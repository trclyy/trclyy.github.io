<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>田润超的博客</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2019-02-23T13:17:49.958Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>python_wuyanzu_boke</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>数据库resis命令大全</title>
    <link href="http://yoursite.com/2019/02/23/%E6%95%B0%E6%8D%AE%E5%BA%93resis%E5%91%BD%E4%BB%A4%E5%A4%A7%E5%85%A8/"/>
    <id>http://yoursite.com/2019/02/23/数据库resis命令大全/</id>
    <published>2019-02-23T13:16:57.000Z</published>
    <updated>2019-02-23T13:17:49.958Z</updated>
    
    <content type="html"><![CDATA[<h1 id="数据库-【redis】-命令大全"><a href="#数据库-【redis】-命令大全" class="headerlink" title="数据库 【redis】 命令大全"></a><a href="https://www.cnblogs.com/tangkaishou/p/10269712.html" target="_blank" rel="noopener">数据库 【redis】 命令大全</a></h1><p>以下纯属搬砖，我用Python抓取的redis命令列表页内容</p><p>如果想看命令的具体使用可查去官网查看，以下整理为个人查找方便而已</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br></pre></td><td class="code"><pre><span class="line">地理位置</span><br><span class="line">GEOADD     将指定的地理空间位置（纬度、经度、名称）添加到指定的key中</span><br><span class="line">GEODIST    返回两个给定位置之间的距离</span><br><span class="line">GEOHASH    返回一个或多个位置元素的 Geohash 表示</span><br><span class="line">GEOPOS     从key里返回所有给定位置元素的位置（经度和纬度）</span><br><span class="line">GEORADIUS  以给定的经纬度为中心， 找出某一半径内的元素</span><br><span class="line">GEORADIUSBYMEMBER  找出位于指定范围内的元素，中心点是由给定的位置元素决定</span><br><span class="line">key</span><br><span class="line">DEL    该用于在 key 存在是删除 key。</span><br><span class="line">Dump   序列化给定 key ，并返回被序列化的值。</span><br><span class="line">EXISTS     检查给定 key 是否存在。</span><br><span class="line">Expire     seconds为给定 key 设置过期时间。</span><br><span class="line">Expireat   EXPIREAT 的作用和 EXPIRE 类似，都用于为 key 设置过期时间。 不同在于 EXPIREAT 接受的时间参数是 UNIX 时间戳(unix timestamp)。</span><br><span class="line">PEXPIREAT  设置 key 的过期时间亿以毫秒计。</span><br><span class="line">PEXPIREAT  设置 key 过期时间的时间戳(unix timestamp) 以毫秒计</span><br><span class="line">Keys   查找所有符合给定模式( pattern)的 key 。</span><br><span class="line">Move   将当前数据库的 key 移动到给定的数据库 db 当中。</span><br><span class="line">PERSIST    移除 key 的过期时间，key 将持久保持。</span><br><span class="line">Pttl   以毫秒为单位返回 key 的剩余的过期时间。</span><br><span class="line">TTL    以秒为单位，返回给定 key 的剩余生存时间(TTL, time to live)。</span><br><span class="line">RANDOMKEY  从当前数据库中随机返回一个 key 。</span><br><span class="line">Rename     修改 key 的名称</span><br><span class="line">Renamenx   仅当 newkey 不存在时，将 key 改名为 newkey 。</span><br><span class="line">Type   返回 key 所储存的值的类型。</span><br><span class="line"></span><br><span class="line">String </span><br><span class="line">SET    设置指定 key 的值</span><br><span class="line">Get    获取指定 key 的值。</span><br><span class="line">Getrange   返回 key 中字符串值的子字符</span><br><span class="line">Getset     将给定 key 的值设为 value ，并返回 key 的旧值(old value)。</span><br><span class="line">Getbit     对 key 所储存的字符串值，获取指定偏移量上的位(bit)。</span><br><span class="line">Mget   获取所有(一个或多个)给定 key 的值。</span><br><span class="line">Setbit     对 key 所储存的字符串值，设置或清除指定偏移量上的位(bit)。</span><br><span class="line">Setex  将值 value 关联到 key ，并将 key 的过期时间设为 seconds (以秒为单位)。</span><br><span class="line">Setnx  只有在 key 不存在时设置 key 的值。</span><br><span class="line">Setrange   用 value 参数覆写给定 key 所储存的字符串值，从偏移量 offset 开始。</span><br><span class="line">Strlen     返回 key 所储存的字符串值的长度。</span><br><span class="line">Mset   同时设置一个或多个 key-value 对。</span><br><span class="line">Msetnx     同时设置一个或多个 key-value 对，当且仅当所有给定 key 都不存在。</span><br><span class="line">Psetex     这个和 SETEX 相似，但它以毫秒为单位设置 key 的生存时间，而不是像 SETEX 那样，以秒为单位。</span><br><span class="line">Incr   将 key 中储存的数字值增一。</span><br><span class="line">Incrby     将 key 所储存的值加上给定的增量值（increment） 。</span><br><span class="line">Incrbyfloat    将 key 所储存的值加上给定的浮点增量值（increment） 。</span><br><span class="line">Decr   将 key 中储存的数字值减一。</span><br><span class="line">Decrby     key 所储存的值减去给定的减量值（decrement） 。</span><br><span class="line">Append     如果 key 已经存在并且是一个字符串， APPEND 将 value 追加到 key 原来的值的末尾。</span><br><span class="line"></span><br><span class="line">Hash</span><br><span class="line">Hdel   删除一个或多个哈希表字段</span><br><span class="line">Hexists    查看哈希表 key 中，指定的字段是否存在。</span><br><span class="line">Hget   获取存储在哈希表中指定字段的值/td&gt;</span><br><span class="line">Hgetall    获取在哈希表中指定 key 的所有字段和值</span><br><span class="line">Hincrby    为哈希表 key 中的指定字段的整数值加上增量 increment 。</span><br><span class="line">Hincrbyfloat   为哈希表 key 中的指定字段的浮点数值加上增量 increment 。</span><br><span class="line">Hkeys  获取所有哈希表中的字段</span><br><span class="line">Hlen   获取哈希表中字段的数量</span><br><span class="line">Hmget  获取所有给定字段的值</span><br><span class="line">Hmset  同时将多个 field-value (域-值)对设置到哈希表 key 中。</span><br><span class="line">Hset   将哈希表 key 中的字段 field 的值设为 value 。</span><br><span class="line">Hsetnx     只有在字段 field 不存在时，设置哈希表字段的值。</span><br><span class="line">Hvals  获取哈希表中所有值</span><br><span class="line"></span><br><span class="line">List</span><br><span class="line">Blpop  移出并获取列表的第一个元素， 如果列表没有元素会阻塞列表直到等待超时或发现可弹出元素为止。</span><br><span class="line">Brpop  移出并获取列表的最后一个元素， 如果列表没有元素会阻塞列表直到等待超时或发现可弹出元素为止。</span><br><span class="line">Brpoplpush     从列表中弹出一个值，将弹出的元素插入到另外一个列表中并返回它； 如果列表没有元素会阻塞列表直到等待超时或发现可弹出元素为止。</span><br><span class="line">Lindex     通过索引获取列表中的元素</span><br><span class="line">Linsert    在列表的元素前或者后插入元素</span><br><span class="line">Llen   获取列表长度</span><br><span class="line">Lpop   移出并获取列表的第一个元素</span><br><span class="line">Lpush  将一个或多个值插入到列表头部</span><br><span class="line">Lpushx     将一个或多个值插入到已存在的列表头部</span><br><span class="line">Lrange     获取列表指定范围内的元素</span><br><span class="line">Lrem   移除列表元素</span><br><span class="line">Lset   通过索引设置列表元素的值</span><br><span class="line">Ltrim  对一个列表进行修剪(trim)，就是说，让列表只保留指定区间内的元素，不在指定区间之内的元素都将被删除。</span><br><span class="line">Rpop   移除并获取列表最后一个元素</span><br><span class="line">Rpoplpush  移除列表的最后一个元素，并将该元素添加到另一个列表并返回</span><br><span class="line">Rpush  在列表中添加一个或多个值</span><br><span class="line">Rpushx     为已存在的列表添加值</span><br><span class="line"></span><br><span class="line">Set 命令</span><br><span class="line">Sadd   向集合添加一个或多个成员</span><br><span class="line">Scard  获取集合的成员数</span><br><span class="line">Sdiff  返回给定所有集合的差集</span><br><span class="line">Sdiffstore     返回给定所有集合的差集并存储在 destination 中</span><br><span class="line">Sinter     返回给定所有集合的交集</span><br><span class="line">Sinterstore    返回给定所有集合的交集并存储在 destination 中</span><br><span class="line">Sismember  判断 member 元素是否是集合 key 的成员</span><br><span class="line">Smembers   返回集合中的所有成员</span><br><span class="line">Smove  将 member 元素从 source 集合移动到 destination 集合</span><br><span class="line">Spop   移除并返回集合中的一个随机元素</span><br><span class="line">Srandmember    返回集合中一个或多个随机数</span><br><span class="line">Srem   移除集合中一个或多个成员</span><br><span class="line">Sunion     返回所有给定集合的并集</span><br><span class="line">Sunionstore    所有给定集合的并集存储在 destination 集合中</span><br><span class="line">Sscan  迭代集合中的元素</span><br><span class="line"></span><br><span class="line">sorted set有序集合</span><br><span class="line">Zadd   向有序集合添加一个或多个成员，或者更新已存在成员的分数</span><br><span class="line">Zcard  获取有序集合的成员数</span><br><span class="line">Zcount     计算在有序集合中指定区间分数的成员数</span><br><span class="line">Zincrby    有序集合中对指定成员的分数加上增量 increment</span><br><span class="line">Zinterstore    计算给定的一个或多个有序集的交集并将结果集存储在新的有序集合 key 中</span><br><span class="line">Zlexcount  在有序集合中计算指定字典区间内成员数量</span><br><span class="line">Zrange     通过索引区间返回有序集合成指定区间内的成员</span><br><span class="line">Zrangebylex    通过字典区间返回有序集合的成员</span><br><span class="line">Zrangebyscore  通过分数返回有序集合指定区间内的成员</span><br><span class="line">Zrank  返回有序集合中指定成员的索引</span><br><span class="line">Zrem   移除有序集合中的一个或多个成员</span><br><span class="line">Zremrangebylex     移除有序集合中给定的字典区间的所有成员</span><br><span class="line">Zremrangebyrank    移除有序集合中给定的排名区间的所有成员</span><br><span class="line">Zremrangebyscore   移除有序集合中给定的分数区间的所有成员</span><br><span class="line">Zrevrange  返回有序集中指定区间内的成员，通过索引，分数从高到底</span><br><span class="line">Zrevrangebyscore   返回有序集中指定分数区间内的成员，分数从高到低排序</span><br><span class="line">Zrevrank   返回有序集合中指定成员的排名，有序集成员按分数值递减(从大到小)排序</span><br><span class="line">Zscore     返回有序集中，成员的分数值</span><br><span class="line">Zunionstore    计算给定的一个或多个有序集的并集，并存储在新的 key 中</span><br><span class="line">Zscan  迭代有序集合中的元素（包括元素成员和元素分值）</span><br><span class="line"></span><br><span class="line">Redis HyperLogLog 命令</span><br><span class="line">Pfadd  添加指定元素到 HyperLogLog 中。</span><br><span class="line">Pfcount    返回给定 HyperLogLog 的基数估算值。</span><br><span class="line">Pgmerge    将多个 HyperLogLog 合并为一个 HyperLogLog</span><br><span class="line"></span><br><span class="line">Redis 发布订阅 命令</span><br><span class="line">Psubscribe     订阅一个或多个符合给定模式的频道。</span><br><span class="line">Pubsub     查看订阅与发布系统状态。</span><br><span class="line">Publish    将信息发送到指定的频道。</span><br><span class="line">Punsubscribe   退订所有给定模式的频道。</span><br><span class="line">Subscribe  订阅给定的一个或多个频道的信息。</span><br><span class="line">Unsubscribe    指退订给定的频道。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Redis 事务 命令</span><br><span class="line">Discard    取消事务，放弃执行事务块内的所有。</span><br><span class="line">Exec   执行所有事务块内的。</span><br><span class="line">Multi  标记一个事务块的开始。</span><br><span class="line">Unwatch    取消 WATCH 对所有 key 的监视。</span><br><span class="line">Watch  监视一个(或多个) key ，如果在事务执行之前这个(或这些) key 被其他所改动，那么事务将被打断。</span><br><span class="line"></span><br><span class="line">Redis 脚本 命令</span><br><span class="line">Eval   执行 Lua 脚本。</span><br><span class="line">Evalsha    执行 Lua 脚本。</span><br><span class="line">Script Exists  查看指定的脚本是否已经被保存在缓存当中。</span><br><span class="line">Script Flush   从脚本缓存中移除所有脚本。</span><br><span class="line">Script kill    杀死当前正在运行的 Lua 脚本。</span><br><span class="line">Script Load    将脚本 script 添加到脚本缓存中，但并不立即执行这个脚本。</span><br><span class="line"></span><br><span class="line">Redis 连接 命令</span><br><span class="line">Auth   验证密码是否正确</span><br><span class="line">Echo   打印字符串</span><br><span class="line">Ping   查看服务是否运行</span><br><span class="line">Quit   关闭当前连接</span><br><span class="line">Select     切换到指定的数据库</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Redis 服务器 命令</span><br><span class="line">Bgrewriteaof   异步执行一个 AOF（AppendOnly File） 文件重写操作</span><br><span class="line">Bgsave     在后台异步保存当前数据库的数据到磁盘</span><br><span class="line">Client Kill    关闭客户端连接</span><br><span class="line">Client List    获取连接到服务器的客户端连接列表</span><br><span class="line">Client Getname     获取连接的名称</span><br><span class="line">Client Pause   在指定时间内终止运行来自客户端的</span><br><span class="line">Client Setname     设置当前连接的名称</span><br><span class="line">Cluster Slots  获取集群节点的映射数组</span><br><span class="line">Command    获取 详情数组</span><br><span class="line">Command Count  获取 总数</span><br><span class="line">Command Getkeys    获取给定的所有键</span><br><span class="line">Time   返回当前服务器时间</span><br><span class="line">Command Info   获取指定 描述的数组</span><br><span class="line">Config Get     获取指定配置参数的值</span><br><span class="line">Config rewrite     对启动 服务器时所指定的 redis.conf 配置文件进行改写</span><br><span class="line">Config Set     修改 redis 配置参数，无需重启</span><br><span class="line">Config Resetstat   重置 INFO 中的某些统计数据</span><br><span class="line">Dbsize     返回当前数据库的 key 的数量</span><br><span class="line">Debug Object   获取 key 的调试信息</span><br><span class="line">Debug Segfault     让 服务崩溃</span><br><span class="line">Flushall   删除所有数据库的所有key</span><br><span class="line">Flushdb    删除当前数据库的所有key</span><br><span class="line">Info   获取 服务器的各种信息和统计数值</span><br><span class="line">Lastsave   返回最近一次 成功将数据保存到磁盘上的时间，以 UNIX 时间戳格式表示</span><br><span class="line">Monitor    实时打印出 服务器接收到的，调试用</span><br><span class="line">Role   返回主从实例所属的角色</span><br><span class="line">Save   异步保存数据到硬盘</span><br><span class="line">Shutdown   异步保存数据到硬盘，并关闭服务器</span><br><span class="line">Slaveof    将当前服务器转变为指定服务器的从属服务器(slave server)</span><br><span class="line">Showlog    管理 redis 的慢日志</span><br><span class="line">Sync   用于复制功能(replication)的内部</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;数据库-【redis】-命令大全&quot;&gt;&lt;a href=&quot;#数据库-【redis】-命令大全&quot; class=&quot;headerlink&quot; title=&quot;数据库 【redis】 命令大全&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://www.cnblogs.com/tangk
      
    
    </summary>
    
    
      <category term="redis" scheme="http://yoursite.com/tags/redis/"/>
    
  </entry>
  
  <entry>
    <title>python面试题总结</title>
    <link href="http://yoursite.com/2019/02/23/python%E9%9D%A2%E8%AF%95%E9%A2%98%E6%80%BB%E7%BB%93/"/>
    <id>http://yoursite.com/2019/02/23/python面试题总结/</id>
    <published>2019-02-23T12:01:42.000Z</published>
    <updated>2019-02-23T12:11:06.606Z</updated>
    
    <content type="html"><![CDATA[<h1 id="用python删除一个文件"><a href="#用python删除一个文件" class="headerlink" title="用python删除一个文件"></a>用python删除一个文件</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">import os</span><br><span class="line">my_file = &apos;D:/text.txt&apos; # 文件路径</span><br><span class="line">if os.path.exists(my_file): # 如果文件存在</span><br><span class="line">    #删除文件，可使用以下两种方法。</span><br><span class="line">    os.remove(my_file) # 则删除</span><br><span class="line">    #os.unlink(my_file)</span><br><span class="line">else:</span><br><span class="line">    print(&apos;no such file:%s&apos;%my_file)</span><br></pre></td></tr></table></figure><h1 id="Python中is和-的区别"><a href="#Python中is和-的区别" class="headerlink" title="Python中is和==的区别"></a><a href="https://www.cnblogs.com/CheeseZH/p/5260560.html" target="_blank" rel="noopener">Python中is和==的区别</a></h1><p>Python中有很多运算符，今天我们就来讲讲is和==两种运算符在应用上的本质区别是什么。</p><p>在讲is和==这两种运算符区别之前，首先要知道Python中对象包含的三个基本要素，分别是：id(身份标识)、type(数据类型)和value(值)。</p><p>is和==都是对对象进行比较判断作用的，但对对象比较判断的内容并不相同。下面来看看具体区别在哪。</p><p>==比较操作符和is同一性运算符区别</p><p>==是python标准操作符中的比较操作符，用来比较判断两个对象的value(值)是否相等，例如下面两个字符串间的比较：</p><p>例1.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; a = &apos;cheesezh&apos;</span><br><span class="line">&gt;&gt;&gt; b = &apos;cheesezh&apos;</span><br><span class="line">&gt;&gt;&gt; a == b</span><br><span class="line">True</span><br></pre></td></tr></table></figure><p>is也被叫做同一性运算符，这个运算符比较判断的是对象间的唯一身份标识，也就是id是否相同。通过对下面几个list间的比较，你就会明白is同一性运算符的工作原理：</p><p>例2.</p><p><a href="javascript:void(0" target="_blank" rel="noopener"><img src="https://common.cnblogs.com/images/copycode.gif" alt="复制代码"></a>;)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; x = y = [4,5,6]</span><br><span class="line">&gt;&gt;&gt; z = [4,5,6]</span><br><span class="line">&gt;&gt;&gt; x == y</span><br><span class="line">True</span><br><span class="line">&gt;&gt;&gt; x == z</span><br><span class="line">True</span><br><span class="line">&gt;&gt;&gt; x is y</span><br><span class="line">True</span><br><span class="line">&gt;&gt;&gt; x is z</span><br><span class="line">False</span><br><span class="line">&gt;&gt;&gt;</span><br><span class="line">&gt;&gt;&gt; print id(x)</span><br><span class="line">3075326572</span><br><span class="line">&gt;&gt;&gt; print id(y)</span><br><span class="line">3075326572</span><br><span class="line">&gt;&gt;&gt; print id(z)</span><br><span class="line">3075328140</span><br></pre></td></tr></table></figure><p><a href="javascript:void(0" target="_blank" rel="noopener"><img src="https://common.cnblogs.com/images/copycode.gif" alt="复制代码"></a>;)</p><p>前三个例子都是True，这什么最后一个是False呢？x、y和z的值是相同的，所以前两个是True没有问题。至于最后一个为什么是False，看看三个对象的id分别是什么就会明白了。</p><p>下面再来看一个例子，例3中同一类型下的a和b的（a==b）都是为True，而（a is b）则不然。</p><p>例3.</p><p><a href="javascript:void(0" target="_blank" rel="noopener"><img src="https://common.cnblogs.com/images/copycode.gif" alt="复制代码"></a>;)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; a = 1 #a和b为数值类型</span><br><span class="line">&gt;&gt;&gt; b = 1</span><br><span class="line">&gt;&gt;&gt; a is b</span><br><span class="line">True</span><br><span class="line">&gt;&gt;&gt; id(a)</span><br><span class="line">14318944</span><br><span class="line">&gt;&gt;&gt; id(b)</span><br><span class="line">14318944</span><br><span class="line">&gt;&gt;&gt; a = &apos;cheesezh&apos; #a和b为字符串类型</span><br><span class="line">&gt;&gt;&gt; b = &apos;cheesezh&apos;</span><br><span class="line">&gt;&gt;&gt; a is b</span><br><span class="line">True</span><br><span class="line">&gt;&gt;&gt; id(a)</span><br><span class="line">42111872</span><br><span class="line">&gt;&gt;&gt; id(b)</span><br><span class="line">42111872</span><br><span class="line">&gt;&gt;&gt; a = (1,2,3) #a和b为元组类型</span><br><span class="line">&gt;&gt;&gt; b = (1,2,3)</span><br><span class="line">&gt;&gt;&gt; a is b</span><br><span class="line">False</span><br><span class="line">&gt;&gt;&gt; id(a)</span><br><span class="line">15001280</span><br><span class="line">&gt;&gt;&gt; id(b)</span><br><span class="line">14790408</span><br><span class="line">&gt;&gt;&gt; a = [1,2,3] #a和b为list类型</span><br><span class="line">&gt;&gt;&gt; b = [1,2,3]</span><br><span class="line">&gt;&gt;&gt; a is b</span><br><span class="line">False</span><br><span class="line">&gt;&gt;&gt; id(a)</span><br><span class="line">42091624</span><br><span class="line">&gt;&gt;&gt; id(b)</span><br><span class="line">42082016</span><br><span class="line">&gt;&gt;&gt; a = &#123;&apos;cheese&apos;:1,&apos;zh&apos;:2&#125; #a和b为dict类型</span><br><span class="line">&gt;&gt;&gt; b = &#123;&apos;cheese&apos;:1,&apos;zh&apos;:2&#125;</span><br><span class="line">&gt;&gt;&gt; a is b</span><br><span class="line">False</span><br><span class="line">&gt;&gt;&gt; id(a)</span><br><span class="line">42101616</span><br><span class="line">&gt;&gt;&gt; id(b)</span><br><span class="line">42098736</span><br><span class="line">&gt;&gt;&gt; a = set([1,2,3])#a和b为set类型</span><br><span class="line">&gt;&gt;&gt; b = set([1,2,3])</span><br><span class="line">&gt;&gt;&gt; a is b</span><br><span class="line">False</span><br><span class="line">&gt;&gt;&gt; id(a)</span><br><span class="line">14819976</span><br><span class="line">&gt;&gt;&gt; id(b)</span><br><span class="line">14822256</span><br></pre></td></tr></table></figure><p><a href="javascript:void(0" target="_blank" rel="noopener"><img src="https://common.cnblogs.com/images/copycode.gif" alt="复制代码"></a>;)</p><p>通过例3可看出，只有数值型和字符串型的情况下，a is b才为True，当a和b是tuple，list，dict或set型时，a is b为False。</p><p>参考资料：<a href="http://www.iplaypython.com/jinjie/is.html" target="_blank" rel="noopener">http://www.iplaypython.com/jinjie/is.html</a></p><table><thead><tr><th>序号</th><th>方法</th><th>描述</th></tr></thead><tbody><tr><td>1</td><td>GET</td><td>请求指定的页面信息，并返回实体主体。</td></tr><tr><td>2</td><td>HEAD</td><td>类似于get请求，只不过返回的响应中没有具体的内容，用于获取报头</td></tr><tr><td>3</td><td>POST</td><td>向指定资源提交数据进行处理请求（例如提交表单或者上传文件）。数据被包含在请求体中。POST请求可能会导致新的资源的建立和/或已有资源的修改。</td></tr><tr><td>4</td><td>PUT</td><td>从客户端向服务器传送的数据取代指定的文档的内容。</td></tr><tr><td>5</td><td>DELETE</td><td>请求服务器删除指定的页面。</td></tr><tr><td>6</td><td>CONNECT</td><td>HTTP/1.1协议中预留给能够将连接改为管道方式的代理服务器。</td></tr><tr><td>7</td><td>OPTIONS</td><td>允许客户端查看服务器的性能。</td></tr><tr><td>8</td><td>TRACE</td><td>回显服务器收到的请求，主要用于测试或诊断。</td></tr></tbody></table><p>HTTP/1.1中定义五种响应代码：</p><p>1xx：指示信息–表示请求已接收，继续处理</p><p>2xx：成功–表示请求已被成功接收、理解、接受</p><p>3xx：重定向–要完成请求必须进行更进一步的操作</p><p>4xx：客户端错误–请求有语法错误或请求无法实现</p><p>5xx：服务器端错误–服务器未能实现合法的请求</p><h1 id="几种常用的操作系统调度策略"><a href="#几种常用的操作系统调度策略" class="headerlink" title="几种常用的操作系统调度策略"></a>几种常用的操作系统调度策略</h1><h1 id="一、先来先服务和短作业-进程-优先调度算法"><a href="#一、先来先服务和短作业-进程-优先调度算法" class="headerlink" title="一、先来先服务和短作业(进程)优先调度算法"></a>一、先来先服务和短作业(进程)优先调度算法</h1><h2 id="1．先来先服务调度算法"><a href="#1．先来先服务调度算法" class="headerlink" title="1．先来先服务调度算法"></a>1．先来先服务调度算法</h2><h2 id="2．短作业-进程-优先调度算法"><a href="#2．短作业-进程-优先调度算法" class="headerlink" title="2．短作业(进程)优先调度算法"></a>2．短作业(进程)优先调度算法</h2><h1 id="二、高优先权优先调度算法"><a href="#二、高优先权优先调度算法" class="headerlink" title="二、高优先权优先调度算法"></a>二、高优先权优先调度算法</h1><h2 id="1．优先权调度算法的类型"><a href="#1．优先权调度算法的类型" class="headerlink" title="1．优先权调度算法的类型"></a>1．优先权调度算法的类型</h2><h2 id="2．高响应比优先调度算法"><a href="#2．高响应比优先调度算法" class="headerlink" title="2．高响应比优先调度算法"></a>2．高响应比优先调度算法</h2><h1 id="三、基于时间片的轮转调度算法"><a href="#三、基于时间片的轮转调度算法" class="headerlink" title="三、基于时间片的轮转调度算法"></a>三、基于时间片的轮转调度算法</h1><h2 id="1．时间片轮转法"><a href="#1．时间片轮转法" class="headerlink" title="1．时间片轮转法"></a>1．时间片轮转法</h2><h2 id="2．多级反馈队列调度算法"><a href="#2．多级反馈队列调度算法" class="headerlink" title="2．多级反馈队列调度算法"></a>2．多级反馈队列调度算法</h2><h1 id="死锁的四个必要条件和解决办法"><a href="#死锁的四个必要条件和解决办法" class="headerlink" title="死锁的四个必要条件和解决办法"></a>死锁的四个必要条件和解决办法</h1><p>死锁概念及产生原理<br>​    概念：多个并发进程因争夺系统资源而产生相互等待的现象。<br>​    原理：当一组进程中的每个进程都在等待某个事件发生，而只有这组进程中的其他进程才能触发该事件，这就称这组进程发生了死锁。<br>​    本质原因：<br>​        1）、系统资源有限。<br>​        2）、进程推进顺序不合理。</p><p>死锁产生的4个必要条件<br>​    1、互斥：某种资源一次只允许一个进程访问，即该资源一旦分配给某个进程，其他进程就不能再访问，直到该进程访问结束。<br>​    2、占有且等待：一个进程本身占有资源（一种或多种），同时还有资源未得到满足，正在等待其他进程释放该资源。<br>​    3、不可抢占：别人已经占有了某项资源，你不能因为自己也需要该资源，就去把别人的资源抢过来。<br>​    4、循环等待：存在一个进程链，使得每个进程都占有下一个进程所需的至少一种资源。<br>​       当以上四个条件均满足，必然会造成死锁，发生死锁的进程无法进行下去，它们所持有的资源也无法释放。这样会导致CPU的吞吐量下降。所以死锁情况是会浪费系统资源和影响计算机的使用性能的。那么，解决死锁问题就是相当有必要的了。</p><p>避免死锁的方法<br>1、死锁预防 —– 确保系统永远不会进入死锁状态<br>​     产生死锁需要四个条件，那么，只要这四个条件中至少有一个条件得不到满足，就不可能发生死锁了。由于互斥条件是非共享资源所必须的，不仅不能改变，还应加以保证，所以，主要是破坏产生死锁的其他三个条件。<br>a、破坏“占有且等待”条件<br>​     方法1：所有的进程在开始运行之前，必须一次性地申请其在整个运行过程中所需要的全部资源。<br>​         优点：简单易实施且安全。<br>​         缺点：因为某项资源不满足，进程无法启动，而其他已经满足了的资源也不会得到利用，严重降低了资源的利用率，造成资源浪费。<br>​                  使进程经常发生饥饿现象。<br>​     方法2：该方法是对第一种方法的改进，允许进程只获得运行初期需要的资源，便开始运行，在运行过程中逐步释放掉分配到的已经使用完毕的资源，然后再去请求新的资源。这样的话，资源的利用率会得到提高，也会减少进程的饥饿问题。<br>b、破坏“不可抢占”条件<br>​      当一个已经持有了一些资源的进程在提出新的资源请求没有得到满足时，它必须释放已经保持的所有资源，待以后需要使用的时候再重新申请。这就意味着进程已占有的资源会被短暂地释放或者说是被抢占了。<br>​      该种方法实现起来比较复杂，且代价也比较大。释放已经保持的资源很有可能会导致进程之前的工作实效等，反复的申请和释放资源会导致进程的执行被无限的推迟，这不仅会延长进程的周转周期，还会影响系统的吞吐量。<br>c、破坏“循环等待”条件<br>​     可以通过定义资源类型的线性顺序来预防，可将每个资源编号，当一个进程占有编号为i的资源时，那么它下一次申请资源只能申请编号大于i的资源。如图所示：</p><p>这样虽然避免了循环等待，但是这种方法是比较低效的，资源的执行速度回变慢，并且可能在没有必要的情况下拒绝资源的访问，比如说，进程c想要申请资源1，如果资源1并没有被其他进程占有，此时将它分配个进程c是没有问题的，但是为了避免产生循环等待，该申请会被拒绝，这样就降低了资源的利用率<br>2、避免死锁 —– 在使用前进行判断，只允许不会产生死锁的进程申请资源<br>的死锁避免是利用额外的检验信息，在分配资源时判断是否会出现死锁，只在不会出现死锁的情况下才分配资源。<br>两种避免办法：<br>​    1、如果一个进程的请求会导致死锁，则不启动该进程<br>​    2、如果一个进程的增加资源请求会导致死锁 ，则拒绝该申请。<br>避免死锁的具体实现通常利用银行家算法<br>​    银行家算法<br>a、银行家算法的相关数据结构<br>​    可利用资源向量Available：用于表示系统里边各种资源剩余的数目。由于系统里边拥有的资源通常都是有很多种（假设有m种），所以，我们用一个有m个元素的数组来表示各种资源。数组元素的初始值为系统里边所配置的该类全部可用资源的数目，其数值随着该类资源的分配与回收动态地改变。<br>​    最大需求矩阵Max：用于表示各个进程对各种资源的额最大需求量。进程可能会有很多个（假设为n个），那么，我们就可以用一个nxm的矩阵来表示各个进程多各种资源的最大需求量<br>​    分配矩阵Allocation：顾名思义，就是用于表示已经分配给各个进程的各种资源的数目。也是一个nxm的矩阵。<br>​    需求矩阵Need：用于表示进程仍然需要的资源数目，用一个nxm的矩阵表示。系统可能没法一下就满足了某个进程的最大需求（通常进程对资源的最大需求也是只它在整个运行周期中需要的资源数目，并不是每一个时刻都需要这么多），于是，为了进程的执行能够向前推进，通常，系统会先分配个进程一部分资源保证进程能够执行起来。那么，进程的最大需求减去已经分配给进程的数目，就得到了进程仍然需要的资源数目了。</p><p>银行家算法通过对进程需求、占有和系统拥有资源的实时统计，确保系统在分配给进程资源不会造成死锁才会给与分配。<br>死锁避免的优点：不需要死锁预防中的抢占和重新运行进程，并且比死锁预防的限制要少。<br>死锁避免的限制：<br>​    必须事先声明每个进程请求的最大资源量<br>​    考虑的进程必须无关的，也就是说，它们执行的顺序必须没有任何同步要求的限制<br>​    分配的资源数目必须是固定的。<br>​    在占有资源时，进程不能退出<br>3、死锁检测与解除 —– 在检测到运行系统进入死锁，进行恢复。<br>​    允许系统进入到死锁状态<br>​    死锁检测<br>下图截自《操作系统–精髓与设计原理》</p><pre><code>死锁的解除</code></pre><p>如果利用死锁检测算法检测出系统已经出现了死锁 ，那么，此时就需要对系统采取相应的措施。常用的解除死锁的方法：<br>1、抢占资源：从一个或多个进程中抢占足够数量的资源分配给死锁进程，以解除死锁状态。<br>2、终止（或撤销）进程：终止或撤销系统中的一个或多个死锁进程，直至打破死锁状态。<br>​    a、终止所有的死锁进程。这种方式简单粗暴，但是代价很大，很有可能会导致一些已经运行了很久的进程前功尽弃。<br>​    b、逐个终止进程，直至死锁状态解除。该方法的代价也很大，因为每终止一个进程就需要使用死锁检测来检测系统当前是否处于死锁状态。另外，每次终止进程的时候终止那个进程呢？每次都应该采用最优策略来选择一个“代价最小”的进程来解除死锁状态。一般根据如下几个方面来决定终止哪个进程：<br>​    进程的优先级<br>​    进程已运行时间以及运行完成还需要的时间<br>​    进程已占用系统资源<br>​    进程运行完成还需要的资源<br>​    终止进程数目<br>    进程是交互还是批处理</p><h2 id="原文：https-blog-csdn-net-guaiguaihenguai-article-details-80303835"><a href="#原文：https-blog-csdn-net-guaiguaihenguai-article-details-80303835" class="headerlink" title="原文：https://blog.csdn.net/guaiguaihenguai/article/details/80303835 "></a>原文：<a href="https://blog.csdn.net/guaiguaihenguai/article/details/80303835" target="_blank" rel="noopener">https://blog.csdn.net/guaiguaihenguai/article/details/80303835</a> </h2>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;用python删除一个文件&quot;&gt;&lt;a href=&quot;#用python删除一个文件&quot; class=&quot;headerlink&quot; title=&quot;用python删除一个文件&quot;&gt;&lt;/a&gt;用python删除一个文件&lt;/h1&gt;&lt;figure class=&quot;highlight plai
      
    
    </summary>
    
    
      <category term="python" scheme="http://yoursite.com/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>常用经典SQL语句大全完整版--详解+实例</title>
    <link href="http://yoursite.com/2019/02/23/%E5%B8%B8%E7%94%A8%E7%BB%8F%E5%85%B8SQL%E8%AF%AD%E5%8F%A5%E5%A4%A7%E5%85%A8%E5%AE%8C%E6%95%B4%E7%89%88-%E8%AF%A6%E8%A7%A3-%E5%AE%9E%E4%BE%8B/"/>
    <id>http://yoursite.com/2019/02/23/常用经典SQL语句大全完整版-详解-实例/</id>
    <published>2019-02-23T11:42:09.000Z</published>
    <updated>2019-02-23T11:44:48.846Z</updated>
    
    <content type="html"><![CDATA[<p>下列语句部分是Mssql语句，不可以在access中使用。<br>　　SQL分类：<br>　　DDL—数据定义语言(CREATE，ALTER，DROP，DECLARE)<br>　　DML—数据操纵语言(SELECT，DELETE，UPDATE，INSERT)<br>　　DCL—数据控制语言(GRANT，REVOKE，COMMIT，ROLLBACK)<br>　　首先,简要介绍基础语句：<br>　　1、说明：创建数据库<br>CREATE DATABASE database-name<br>　　2、说明：删除数据库<br>drop database dbname<br>　　3、说明：备份sql server<br>　　— 创建 备份数据的 device<br>USE master<br>EXEC sp_addumpdevice ’disk’, ’testBack’, ’c:\mssql7backup\MyNwind_1.dat’<br>　　— 开始 备份<br>BACKUP DATABASE pubs TO testBack<br>　　4、说明：创建新表<br>create table tabname(col1 type1 [not null][primary key],col2 type2 [not null],..)<br>　　根据已有的表创建新表：<br>A：create table tab_new like tab_old (使用旧表创建新表)<br>B：create table tab_new as select col1,col2… from tab_old definition only<br>　　5、说明：<br>　　删除新表：drop table tabname<br>　　6、说明：<br>　　增加一个列：Alter table tabname add column col type<br>　　注：列增加后将不能删除。DB2中列加上后数据类型也不能改变，唯一能改变的是增加varchar类型的长度。<br>　　7、说明：<br>　　添加主键：Alter table tabname add primary key(col)<br>　　说明：<br>　　删除主键：Alter table tabname drop primary key(col)<br>　　8、说明：<br>　　创建索引：create [unique] index idxname on tabname(col….)<br>　　删除索引：drop index idxname<br>　　注：索引是不可更改的，想更改必须删除重新建。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">CREATE INDEX index_name ON table_name(column_name,column_name) include(score)</span><br><span class="line"></span><br><span class="line">普通索引</span><br><span class="line"></span><br><span class="line">CREATE UNIQUE INDEX index_name ON table_name (column_name) ;</span><br><span class="line"></span><br><span class="line">非空索引</span><br><span class="line"></span><br><span class="line">CREATE PRIMARY KEY INDEX index_name ON table_name (column_name) ;</span><br><span class="line"></span><br><span class="line">主键索引</span><br><span class="line"> </span><br><span class="line">使用ALTER TABLE语句创建索引</span><br><span class="line"></span><br><span class="line">alter table table_name add index index_name (column_list) ;</span><br><span class="line">alter table table_name add unique (column_list) ;</span><br><span class="line">alter table table_name add primary key (column_list) ;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">删除索引</span><br><span class="line"></span><br><span class="line">drop index index_name on table_name ;</span><br><span class="line">alter table table_name drop index index_name ;</span><br><span class="line">alter table table_name drop primary key ;</span><br></pre></td></tr></table></figure><p>　　9、说明：<br>　　创建视图：create view viewname as select statement<br>　　删除视图：drop view viewname<br>10、说明：几个简单的基本的sql语句<br>　　选择：select <em> from table1 where 范围<br>　　插入：insert into table1(field1,field2) values(value1,value2)<br>　　删除：delete from table1 where 范围<br>　　更新：update table1 set field1=value1 where 范围<br>　　查找：select </em> from table1 where field1 like ’%value1%’ —like的语法很精妙，查资料!<br>　　排序：select <em> from table1 order by field1,field2 [desc]<br>　　总数：select count </em> as totalcount from table1<br>　　求和：select sum(field1) as sumvalue from table1<br>　　平均：select avg(field1) as avgvalue from table1<br>　　最大：select max(field1) as maxvalue from table1<br>　　最小：select min(field1) as minvalue from table1<br>　　11、说明：几个高级查询运算词<br>　　A： UNION 运算符<br>　　UNION 运算符通过组合其他两个结果表（例如 TABLE1 和 TABLE2）并消去表中任何重复行而派生出一个结果表。当 ALL 随 UNION 一起使用时（即 UNION ALL），不消除重复行。两种情况下，派生表的每一行不是来自 TABLE1 就是来自 TABLE2。<br>　　B： EXCEPT 运算符<br>　　EXCEPT 运算符通过包括所有在 TABLE1 中但不在 TABLE2 中的行并消除所有重复行而派生出一个结果表。当 ALL 随 EXCEPT 一起使用时 (EXCEPT ALL)，不消除重复行。<br>　　C： INTERSECT 运算符<br>　　INTERSECT 运算符通过只包括 TABLE1 和 TABLE2 中都有的行并消除所有重复行而派生出一个结果表。当 ALL 随 INTERSECT 一起使用时 (INTERSECT ALL)，不消除重复行。<br>　　注：使用运算词的几个查询结果行必须是一致的。<br>　　12、说明：使用外连接<br>　　A、left outer join：<br>　　左外连接（左连接）：结果集几包括连接表的匹配行，也包括左连接表的所有行。<br>SQL: select a.a, a.b, a.c, b.c, b.d, b.f from a LEFT OUT JOIN b ON a.a = b.c<br>　　B：right outer join:<br>　　右外连接(右连接)：结果集既包括连接表的匹配连接行，也包括右连接表的所有行。<br>　　C：full outer join：<br>　　全外连接：不仅包括符号连接表的匹配行，还包括两个连接表中的所有记录。<br>　　其次，大家来看一些不错的sql语句<br>　　1、说明：复制表(只复制结构,源表名：a 新表名：b) (Access可用)<br>　　法一：select <em> into b from a where 1&lt;&gt;1<br>　　法二：select top 0 </em> into b from a<br>　　2、说明：拷贝表(拷贝数据,源表名：a 目标表名：b) (Access可用)<br>insert into b(a, b, c) select d,e,f from b;<br>　　3、说明：跨数据库之间表的拷贝(具体数据使用绝对路径) (Access可用)<br>insert into b(a, b, c) select d,e,f from b in ‘具体数据库’ where 条件<br>　　例子：..from b in ’”&amp;Server.MapPath(“.”)&amp;”\data.mdb” &amp;”’ where..<br>　　4、说明：子查询(表名1：a 表名2：b)<br>select a,b,c from a where a IN (select d from b ) 或者: select a,b,c from a where a IN (1,2,3)<br>　　5、说明：显示文章、提交人和最后回复时间<br>select a.title,a.username,b.adddate from table a,(select max(adddate) adddate from table where table.title=a.title) b<br>6、说明：外连接查询(表名1：a 表名2：b)<br>select a.a, a.b, a.c, b.c, b.d, b.f from a LEFT OUT JOIN b ON a.a = b.c<br>　　7、说明：在线视图查询(表名1：a )<br>select <em> from (SELECT a,b,c FROM a) T where t.a &gt; 1;<br>　　8、说明：between的用法,between限制查询数据范围时包括了边界值,not between不包括<br>select </em> from table1 where time between time1 and time2<br>select a,b,c, from table1 where a not between 数值1 and 数值2<br>　　9、说明：in 的使用方法<br>select <em> from table1 where a [not] in (‘值1’,’值2’,’值4’,’值6’)<br>　　10、说明：两张关联表，删除主表中已经在副表中没有的信息<br>delete from table1 where not exists ( select </em> from table2 where table1.field1=table2.field1 )<br>　　11、说明：四表联查问题：<br>select <em> from a left inner join b on a.a=b.b right inner join c on a.a=c.c inner join d on a.a=d.d where …..<br>　　12、说明：日程安排提前五分钟提醒<br>SQL: select </em> from 日程安排 where datediff(’minute’,f开始时间,getdate())&gt;5<br>　　13、说明：一条sql 语句搞定数据库分页<br>select top 10 b.<em> from (select top 20 主键字段,排序字段 from 表名 order by 排序字段 desc) a,表名 b where b.主键字段 = a.主键字段 order by a.排序字段<br>　　14、说明：前10条记录<br>select top 10 </em> form table1 where 范围<br>　　15、说明：选择在每一组b值相同的数据中对应的a最大的记录的所有信息(类似这样的用法可以用于论坛每月排行榜,每月热销产品分析,按科目成绩排名,等等.)<br>select a,b,c from tablename ta where a=(select max(a) from tablename tb where tb.b=ta.b)<br>　　16、说明：包括所有在 TableA 中但不在 TableB和TableC 中的行并消除所有重复行而派生出一个结果表<br>(select a from tableA ) except (select a from tableB) except (select a from tableC)<br>　　17、说明：随机取出10条数据<br>select top 10 * from tablename order by newid()<br>　　18、说明：随机选择记录<br>select newid()<br>　　19、说明：删除重复记录<br>Delete from tablename where id not in (select max(id) from tablename group by col1,col2,…)<br>　　20、说明：列出数据库里所有的表名<br>select name from sysobjects where type=’U’<br>21、说明：列出表里的所有的<br>select name from syscolumns where id=object_id(’TableName’)<br>　　22、说明：列示type、vender、pcs字段，以type字段排列，case可以方便地实现多重选择，类似select 中的case。<br>select type,sum(case vender when ’A’ then pcs else 0 end),sum(case vender when ’C’ then pcs else 0 end),sum(case vender when ’B’ then pcs else 0 end) FROM tablename group by type<br>　　显示结果：<br>type    vender pcs<br>电脑 A 1<br>电脑 A 1<br>光盘 B 2<br>光盘 A 2<br>手机 B 3<br>手机 C 3</p><p>23、说明：初始化表table1<br>TRUNCATE TABLE table1<br>　　24、说明：选择从10到15的记录<br>select top 5 <em> from (select top 15 </em> from table order by id asc) table_别名 order by id desc<br>随机选择数据库记录的方法（使用Randomize函数，通过SQL语句实现）<br>　　对存储在数据库中的数据来说，随机数特性能给出上面的效果，但它们可能太慢了些。你不能要求ASP“找个随机数”然后打印出来。实际上常见的解决方案是建立如下所示的循环：<br>Randomize<br>RNumber = Int(Rnd<em>499) +1<br>　<br>While Not objRec.EOF<br>If objRec(“ID”) = RNumber THEN<br>… 这里是执行脚本 …<br>end if<br>objRec.MoveNext<br>Wend<br>　　这很容易理解。首先，你取出1到500范围之内的一个随机数（假设500就是数据库内记录的总数）。然后，你遍历每一记录来测试ID 的值、检查其是否匹配RNumber。满足条件的话就执行由THEN 关键字开始的那一块代码。假如你的RNumber 等于495，那么要循环一遍数据库花的时间可就长了。虽然500这个数字看起来大了些，但相比更为稳固的企业解决方案这还是个小型数据库了，后者通常在一个数据库内就包含了成千上万条记录。这时候不就死定了？<br>　　采用SQL，你就可以很快地找出准确的记录并且打开一个只包含该记录的recordset，如下所示：<br>Randomize<br>RNumber = Int(Rnd</em>499) + 1<br>　<br>SQL = “SELECT <em> FROM Customers WHERE ID = “ &amp; RNumber<br>　<br>set objRec = ObjConn.Execute(SQL)<br>Response.WriteRNumber &amp; “ = “ &amp; objRec(“ID”) &amp; “ “ &amp; objRec(“c_email”)<br>　　不必写出RNumber 和ID，你只需要检查匹配情况即可。只要你对以上代码的工作满意，你自可按需操作“随机”记录。Recordset没有包含其他内容，因此你很快就能找到你需要的记录这样就大大降低了处理时间。<br>再谈随机数<br>　　现在你下定决心要榨干Random 函数的最后一滴油，那么你可能会一次取出多条随机记录或者想采用一定随机范围内的记录。把上面的标准Random 示例扩展一下就可以用SQL应对上面两种情况了。<br>　　为了取出几条随机选择的记录并存放在同一recordset内，你可以存储三个随机数，然后查询数据库获得匹配这些数字的记录：<br>　　SQL = “SELECT </em> FROM Customers WHERE ID = “ &amp; RNumber &amp; “ OR ID = “ &amp; RNumber2 &amp; “ OR ID = “ &amp; RNumber3<br>　　假如你想选出10条记录（也许是每次页面装载时的10条链接的列表），你可以用BETWEEN 或者数学等式选出第一条记录和适当数量的递增记录。这一操作可以通过好几种方式来完成，但是 SELECT 语句只显示一种可能（这里的ID 是自动生成的号码）：<br>SQL = “SELECT <em> FROM Customers WHERE ID BETWEEN “ &amp; RNumber &amp; “ AND “ &amp; RNumber &amp; “+ 9”<br>　　注意：以上代码的执行目的不是检查数据库内是否有9条并发记录。<br>　　随机读取若干条记录，测试过<br>Access语法：SELECT top 10 </em> From 表名 ORDER BY Rnd(id)<br>Sql server:select top n <em> from 表名 order by newid()<br>mysql select </em> From 表名 Order By rand() Limit n<br>　　Access左连接语法(最近开发要用左连接,Access帮助什么都没有,网上没有Access的SQL说明,只有自己测试, 现在记下以备后查)<br>　　语法 select table1.fd1,table1,fd2,table2.fd2 From table1 left join table2 on table1.fd1,table2.fd1 where …<br>　　使用SQL语句 用…代替过长的字符串显示<br>　　语法：<br>　　SQL数据库：select case when len(field)&gt;10 then left(field,10)+’…’ else field end as news_name,news_id from tablename<br>　　Access数据库：SELECT iif(len(field)&gt;2,left(field,2)+’…’,field) FROM tablename;<br>　　Conn.Execute说明<br>　　Execute方法<br>　　该方法用于执行SQL语句。根据SQL语句执行后是否返回记录集，该方法的使用格式分为以下两种：<br>　　1．执行SQL查询语句时，将返回查询得到的记录集。用法为：<br>　　Set 对象变量名=连接对象.Execute(“SQL 查询语言”)<br>　　Execute方法调用后，会自动创建记录集对象，并将查询结果存储在该记录对象中，通过Set方法，将记录集赋给指定的对象保存，以后对象变量就代表了该记录集对象。<br>　　2．执行SQL的操作性语言时，没有记录集的返回。此时用法为：<br>　　连接对象.Execute “SQL 操作性语句” [, RecordAffected][, Option]<br>　　·RecordAffected 为可选项，此出可放置一个变量，SQL语句执行后，所生效的记录数会自动保存到该变量中。通过访问该变量，就可知道SQL语句队多少条记录进行了操作。<br>　　·Option 可选项，该参数的取值通常为adCMDText，它用于告诉ADO，应该将Execute方法之后的第一个字符解释为命令文本。通过指定该参数，可使执行更高效。<br>　　·BeginTrans、RollbackTrans、CommitTrans方法<br>　　这三个方法是连接对象提供的用于事务处理的方法。BeginTrans用于开始一个事物；RollbackTrans用于回滚事务；CommitTrans用于提交所有的事务处理结果，即确认事务的处理。<br>　　事务处理可以将一组操作视为一个整体，只有全部语句都成功执行后，事务处理才算成功；若其中有一个语句执行失败，则整个处理就算失败，并恢复到处里前的状态。<br>　　BeginTrans和CommitTrans用于标记事务的开始和结束，在这两个之间的语句，就是作为事务处理的语句。判断事务处理是否成功，可通过连接对象的Error集合来实现，若Error集合的成员个数不为0，则说明有错误发生，事务处理失败。Error集合中的每一个Error对象，代表一个错误信息。<br>SQL语句大全精要<br>2006/10/26 13:46<br>DELETE语句<br>DELETE语句：用于创建一个删除查询，可从列在 FROM 子句之中的一个或多个表中删除记录，且该子句满足 WHERE 子句中的条件，可以使用DELETE删除多个记录。<br>语法：DELETE [table.<em>] FROM table WHERE criteria<br>语法：DELETE </em> FROM table WHERE criteria=’查询的字’<br>说明：table参数用于指定从其中删除记录的表的名称。<br>criteria参数为一个表达式，用于指定哪些记录应该被删除的表达式。<br>可以使用 Execute 方法与一个 DROP 语句从数据库中放弃整个表。不过，若用这种方法删除表，将会失去表的结构。不同的是当使用 DELETE，只有数据会被删除；表的结构以及表的所有属性仍然保留，例如字段属性及索引。<br>UPDATE<br>有关UPDATE，急！！！！！！！！！！！<br>在ORACLE数据库中<br>表 A ( ID ,FIRSTNAME,LASTNAME )<br>表 B( ID,LASTNAME)<br>表 A 中原来ID,FIRSTNAME两个字段的数据是完整的<br>表 B中原来ID,LASTNAME两个字段的数据是完整的<br>现在要把表 B中的LASTNAME字段的相应的数据填入到A表中LASTNAME相应的位置。两个表中的ID字段是相互关联的。<br>先谢谢了!!!!<br>update a set a.lastname=(select b.lastname from b where a.id=b.id)<br>　　掌握SQL四条最基本的数据操作语句：Insert，Select，Update和Delete。<br>　　练掌握SQL是数据库用户的宝贵财富。在本文中，我们将引导你掌握四条最基本的数据操作语句—SQL的核心功能—来依次介绍比较操作符、选择断言以及三值逻辑。当你完成这些学习后，显然你已经开始算是精通SQL了。<br>　　在我们开始之前，先使用CREATE TABLE语句来创建一个表（如图1所示）。DDL语句对数据库对象如表、列和视进行定义。它们并不对表中的行进行处理，这是因为DDL语句并不处理数据库中实际的数据。这些工作由另一类SQL语句—数据操作语言（DML）语句进行处理。<br>　　SQL中有四种基本的DML操作：INSERT，SELECT，UPDATE和DELETE。由于这是大多数SQL用户经常用到的，我们有必要在此对它们进行一一说明。在图1中我们给出了一个名为EMPLOYEES的表。其中的每一行对应一个特定的雇员记录。请熟悉这张表，我们在后面的例子中将要用到它。</p><p>The Execute method executes a specified query, SQL statement, stored procedure, or provider-specific text.<br>Execute的作用是：执行一个查询语句、陈述语句、程序或技术提供对象[provider]的详细文本。</p><p>The results are stored in a new Recordset object if it is a row-returning query. A closed Recordset object will be returned if it is not a row-returning query.<br>如果返回行[row-returning]查询语句，那么结果将被存储在一个新的记录对象中；如果它不是一个返回行[row-returning]查询语句，那么它将返回一个关闭的记录对象。</p><p>Note: The returned Recordset is always a read-only, forward-only Recordset!<br>注意：返回的Recordset是一个只读的、只向前兼容的Recordset。</p><p>Tip: To create a Recordset with more functionality, first create a Recordset object. Set the desired properties, and then use the Recordset object’s Open method to execute the query.<br>提示：在第一次创建Recordset对象时，需要将它创建为一个更具功能性的Recordset对象。设置一个我们所希望的属性，使用Recordset对象的Open方法去执行查询语句。</p><p>Syntax for row-returning<br>row-returning[返回行]语法</p><p>Set objrs=objconn.Execute(commandtext,ra,options)</p><p>Syntax for non-row-returning<br>non-row-returning[非返回行]语法</p><p>objconn.Execute commandtext,ra,options</p><table><thead><tr><th>Parameter参数</th><th>Description描述</th></tr></thead><tbody><tr><td>commandtext</td><td>Required. The SQL statement, stored procedure, or provider-specific text to execute 必要参数。指定需要执行的SQL语句，现存的程序或技术提供对象[provider]的详细文本</td></tr><tr><td>ra</td><td>Optional. The number of records affected by the query 可选参数。返回查询语句执行的记录数</td></tr><tr><td>options</td><td>Optional. Sets how the provider should evaluate the commandtext parameter. Can be one or more <a href="http://www.w3pop.com/learn/view/doc/met_conn_%20/#commandtypeenum" target="_blank" rel="noopener">CommandTypeEnum</a> or <a href="http://www.w3pop.com/learn/view/doc/met_conn_%20/#executeoptionenum" target="_blank" rel="noopener">ExecuteOptionEnum</a> values. Default is adCmdUnspecified 可选参数。设置技术提供对象[provider]应该如何评估CommandText属性的功能。它可以是一个或多个CommandTypeEnum 或 ExecuteOptionEnum的值。默认值是adCmdUnspecified</td></tr></tbody></table><p>Example<br>案例</p><p>&lt;%sql=”SELECT companyname FROM Customers”Set rs=conn.Execute(sql)%&gt;</p><hr><p>CommandTypeEnum Values</p><table><thead><tr><th>Constant常量</th><th>Value值</th><th>Description描述</th></tr></thead><tbody><tr><td>adCmdUnspecified</td><td>-1</td><td>Does not specify the command type argument. 不指定指令类型自变量</td></tr><tr><td>adCmdText</td><td>1</td><td>Evaluates CommandText as a textual definition of a command or stored procedure call. 指示提供者应该将Source作为命令的文本定义来计算。</td></tr><tr><td>adCmdTable</td><td>2</td><td>Evaluates CommandText as a table name whose columns are all returned by an internally generated SQL query. 指示ADO生成SQL查询以便从在Source中命名的表中返回所有行</td></tr><tr><td>adCmdStoredProc</td><td>4</td><td>Evaluates CommandText as a stored procedure name. 将CommandText作为一个已存的程序名称</td></tr><tr><td>adCmdUnknown</td><td>8</td><td>Indicates that the type of command in the CommandText property is not known. 默认值。指定未知的CommandText属性命令</td></tr><tr><td>adCmdFile</td><td>256</td><td>Evaluates CommandText as the file name of a persistently stored Recordset. Used with Recordset.Open or Requery only. 指示应从在Source中命名的文件中恢复保留（保存的）Recordset。它仅能与Recordset.Open 或 Requery 指令一起使用</td></tr><tr><td>adCmdTableDirect</td><td>512</td><td>Evaluates CommandText as a table name whose columns are all returned. Used with Recordset.Open or Requery only. To use the Seek method, the Recordset must be opened with adCmdTableDirect. This value cannot be combined with the ExecuteOptionEnum value adAsyncExecute. 指示提供者更改从在 Source 中命名的表中返回所有行/ 将CommandText作为一个表的名称（该表的列全部是通过内部的SQL查询语句返回的）。它仅适用Recordset.Open 或 Requery 指令；如果需要使用查找方式，那么Recordset必须以adCmdTableDirect打开。这个值不能与ExecuteOptionEnum值 adAsyncExecute一起使用</td></tr></tbody></table><hr><p>ExecuteOptionEnum Values</p><table><thead><tr><th>Constant常量</th><th>Value值</th><th>Description描述</th></tr></thead><tbody><tr><td>adOptionUnspecified</td><td>-1</td><td>Indicates that the command is unspecified. 指明为指定的指令</td></tr><tr><td>adAsyncExecute</td><td></td><td>Indicates that the command should execute asynchronously. This value cannot be combined with the CommandTypeEnum value adCmdTableDirect. 指明指令是否需要异步执行。这个值不能与CommandTypeEnum 之中的adCmdTableDirect一起使用</td></tr><tr><td>adAsyncFetch</td><td></td><td>Indicates that the remaining rows after the initial quantity specified in the CacheSize property should be retrieved asynchronously. 指明在CacheSize属性中指定了初始量以后，是否应该异步获取保留行[remaining rows]</td></tr><tr><td>adAsyncFetchNonBlocking</td><td></td><td>Indicates that the main thread never blocks while retrieving. If the requested row has not been retrieved, the current row automatically moves to the end of the file. If you open a Recordset from a Stream containing a persistently stored Recordset, adAsyncFetchNonBlocking will not have an effect; the operation will be synchronous and blocking. adAsynchFetchNonBlocking has no effect when the adCmdTableDirect option is used to open the Recordset. 指示主要线程在提取期间从未堵塞。如果所请求的行尚未提取，那么当前行将自动移到文件末尾。如果打开的记录流中的记录固定地包含一个记录，那么adAsyncFetchNonBlocking将不会产生作用；才作程序将同时运行以及阻塞该常量。当adCmdTableDirect选项用于打开记录时，adAsynchFetchNonBlocking将不会产生任何作用</td></tr><tr><td>adExecuteNoRecords</td><td></td><td>Indicates that the command text is a command or stored procedure that does not return rows (for example, a command that only inserts data). If any rows are retrieved, they are discarded and not returned. adExecuteNoRecords can only be passed as an optional parameter to the Command or Connection Execute method. 它仅指明了指令文本仅是一条不返回任何行的指令或现存程序（如：一条只执行数据插入的指令）。如果没有任何行被提取，那么他们将放弃执行并不返回任何值。 adExecuteNoRecords仅可以作为一个可选参数传递到指令中或连接执行方法[Connection Execute method]中</td></tr><tr><td>adExecuteStream</td><td></td><td>Indicates that the results of a command execution should be returned as a stream. adExecuteStream can only be passed as an optional parameter to the Command Execute method. 指明需要以结果流的形式返回命令执行的结果。adExecuteStream仅可以作为一个可选参数传递到指令中或连接执行方法[Connection Execute method]中</td></tr><tr><td>adExecuteRecord</td><td></td><td>Indicates that the CommandText is a command or stored procedure that returns a single row which should be returned as a Record object. 指明CommandText仅是返回一个单独行（该单独行作为一条记录对象返回）的一条指令或现存程序</td></tr></tbody></table>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;下列语句部分是Mssql语句，不可以在access中使用。&lt;br&gt;　　SQL分类：&lt;br&gt;　　DDL—数据定义语言(CREATE，ALTER，DROP，DECLARE)&lt;br&gt;　　DML—数据操纵语言(SELECT，DELETE，UPDATE，INSERT)&lt;br&gt;　　DC
      
    
    </summary>
    
    
      <category term="sql" scheme="http://yoursite.com/tags/sql/"/>
    
  </entry>
  
  <entry>
    <title>MTCP建立连接和断开连接过程详解</title>
    <link href="http://yoursite.com/2019/02/23/MTCP%E5%BB%BA%E7%AB%8B%E8%BF%9E%E6%8E%A5%E5%92%8C%E6%96%AD%E5%BC%80%E8%BF%9E%E6%8E%A5%E8%BF%87%E7%A8%8B%E8%AF%A6%E8%A7%A3/"/>
    <id>http://yoursite.com/2019/02/23/MTCP建立连接和断开连接过程详解/</id>
    <published>2019-02-23T11:34:01.000Z</published>
    <updated>2019-02-23T11:34:49.599Z</updated>
    
    <content type="html"><![CDATA[<p>TCP是一个面向连接的服务,面向连接的服务是电话系统服务模式的抽象,每一次完整的数据传输都必须经过建立连接,数据传输和终止连接三个过程,TCP建立连接的过程称为三次握手,下面说一下三次握手的具体过程:</p><h3 id="TCP三次握手过程"><a href="#TCP三次握手过程" class="headerlink" title="TCP三次握手过程"></a>TCP三次握手过程</h3><ol><li>主机A通过向主机B 发送一个含有同步序列号的标志位的数据段给主机B ,向主机B 请求建立连接,通过这个数据段,主机A告诉主机B 两件事:我想要和你通信;你可以用哪个序列号作为起始数据段来回应我。</li><li>主机B 收到主机A的请求后,用一个带有确认应答(ACK)和同步序列号(SYN)标志位的数据段响应主机A,也告诉主机A两件事:我已经收到你的请求了,你可以传输数据了;你要用哪佧序列号作为起始数据段来回应我。</li><li>主机A收到这个数据段后,再发送一个确认应答,确认已收到主机B 的数据段:我已收到回复,我现在要开始传输实际数据了。</li></ol><p>这样TCP三次握手就完成了,主机A和主机B 就可以传输数据了。三次握手的特点：没有应用层的数据,SYN这个标志位只有在TCP建产连接时才会被置1,握手完成后SYN标志位被置0。</p><p>TCP建立连接要进行三次握手,而断开连接要进行四次,这是由于TCP的半关闭造成的,因为TCP连接是全双工的(即数据可在两个方向上同时传递)所以进行关闭时每个方向上都要单独进行关闭,这个单方向的关闭就叫半关闭.关闭的方法是一方完成它的数据传输后,就发送一个FIN来向另一方通告将要终止这个方向的连接.当一端收到一个FIN,它必须通知应用层TCP连接已终止了这个方向的数据传送,发送FIN通常是应用层进行关闭的结果。</p><h3 id="四次断开过程"><a href="#四次断开过程" class="headerlink" title="四次断开过程"></a>四次断开过程</h3><ol><li>当主机A完成数据传输后,将控制位FIN置1,提出停止TCP连接的请求</li><li>主机B收到FIN后对其作出响应,确认这一方向上的TCP连接将关闭,将ACK置1</li><li>由B 端再提出反方向的关闭请求,将FIN置1</li><li>主机A对主机B的请求进行确认,将ACK置1,双方向的关闭结束。</li></ol><p><a href="http://photo.blog.sina.com.cn/showpic.html#blogid=60a4fcef0101e813&amp;url=http://album.sina.com.cn/pic/001LJkOrgy6FV957oh83e" target="_blank" rel="noopener"><img src="http://s15.sinaimg.cn/mw690/001LJkOrgy6FV957oh83e&amp;690" alt="TCP三次握手 与 四次断开 的详细过程剖析"></a></p><p>由TCP的三次握手和四次断开可以看出,TCP使用面向连接的通信方式,大大提高了数据通信的可靠性,使发送数据端和接收端在数据正式传输前就有了交互,为数据正式传输打下了可靠的基础。</p><p>讲到这里在来一张全面的图来理解一下：(图片来自：<a href="http://blog.csdn.net/hjw1991324/article/details/51044580" target="_blank" rel="noopener">http://blog.csdn.net/hjw1991324/article/details/51044580</a>)</p><p><img src="https://img-blog.csdn.net/20160402170316654" alt="这里写图片描述"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;TCP是一个面向连接的服务,面向连接的服务是电话系统服务模式的抽象,每一次完整的数据传输都必须经过建立连接,数据传输和终止连接三个过程,TCP建立连接的过程称为三次握手,下面说一下三次握手的具体过程:&lt;/p&gt;
&lt;h3 id=&quot;TCP三次握手过程&quot;&gt;&lt;a href=&quot;#TCP
      
    
    </summary>
    
    
      <category term="http" scheme="http://yoursite.com/tags/http/"/>
    
  </entry>
  
  <entry>
    <title>防止ＳＱＬ注入的五种方法</title>
    <link href="http://yoursite.com/2019/02/23/%E9%98%B2%E6%AD%A2SQL%E6%B3%A8%E5%85%A5%E7%9A%84%E4%BA%94%E7%A7%8D%E6%96%B9%E6%B3%95/"/>
    <id>http://yoursite.com/2019/02/23/防止SQL注入的五种方法/</id>
    <published>2019-02-23T10:36:31.000Z</published>
    <updated>2019-02-23T10:37:33.002Z</updated>
    
    <content type="html"><![CDATA[<h1 id="防止SQL注入的五种方法"><a href="#防止SQL注入的五种方法" class="headerlink" title="防止ＳＱＬ注入的五种方法"></a><a href="https://www.cnblogs.com/baizhanshi/p/6002898.html" target="_blank" rel="noopener">防止ＳＱＬ注入的五种方法</a></h1><p><strong>一、SQL注入简介</strong></p><p>​    SQL注入是比较常见的网络攻击方式之一，它不是利用操作系统的BUG来实现攻击，而是针对程序员编程时的疏忽，通过SQL语句，实现无帐号登录，甚至篡改数据库。</p><p><strong>二、SQL注入攻击的总体思路</strong></p><p>1.寻找到SQL注入的位置</p><p>2.判断服务器类型和后台数据库类型</p><p>3.针对不通的服务器和数据库特点进行SQL注入攻击</p><p><strong>三、SQL注入攻击实例</strong></p><p>比如在一个登录界面，要求输入用户名和密码：</p><p>可以这样输入实现免帐号登录：</p><p>用户名： ‘or 1 = 1 –</p><p>密 码：</p><p>点登陆,如若没有做特殊处理,那么这个非法用户就很得意的登陆进去了.(当然现在的有些语言的数据库API已经处理了这些问题)</p><p>这是为什么呢? 下面我们分析一下：</p><p>从理论上说，后台认证程序中会有如下的SQL语句：</p><p>String sql = “select * from user_table where username=</p><p>‘ “+userName+” ‘ and password=’ “+password+” ‘“;</p><p>当输入了上面的用户名和密码，上面的SQL语句变成：</p><p>SELECT * FROM user_table WHERE username=</p><p>‘’or 1 = 1 – and password=’’</p><p>分析SQL语句：</p><p>条件后面username=”or 1=1 用户名等于 ” 或1=1 那么这个条件一定会成功；</p><p>然后后面加两个-，这意味着注释，它将后面的语句注释，让他们不起作用，这样语句永远都能正确执行，用户轻易骗过系统，获取合法身份。</p><p>这还是比较温柔的，如果是执行</p><p>SELECT * FROM user_table WHERE</p><p>username=’’ ;DROP DATABASE (DB Name) –’ and password=’’</p><p>….其后果可想而知… </p><p><strong>四、应对方法</strong></p><p>下面我针对JSP，说一下应对方法：</p><p><strong>1.（简单又有效的方法）PreparedStatement</strong></p><p>采用预编译语句集，它内置了处理SQL注入的能力，只要使用它的setXXX方法传值即可。</p><p>使用好处：</p><p>(1).代码的可读性和可维护性.</p><p>(2).PreparedStatement尽最大可能提高性能.</p><p>(3).最重要的一点是极大地提高了安全性.</p><p>原理：</p><p>sql注入只对sql语句的准备(编译)过程有破坏作用</p><p>而PreparedStatement已经准备好了,执行阶段只是把输入串作为数据处理,</p><p>而不再对sql语句进行解析,准备,因此也就避免了sql注入问题. </p><p><strong>2.使用正则表达式过滤传入的参数</strong></p><p>要引入的包：</p><p>import java.util.regex.*;</p><p>正则表达式：</p><p>private String CHECKSQL = “^(.+)\sand\s(.+)|(.+)\sor(.+)\s$”;</p><p>判断是否匹配：</p><p>Pattern.matches(CHECKSQL,targerStr);</p><p>下面是具体的正则表达式：</p><p>检测SQL meta-characters的正则表达式 ：</p><p>/(\%27)|(\’)|(--)|(\%23)|(#)/ix</p><p>修正检测SQL meta-characters的正则表达式 ：/((\%3D)|(=))[^\n]*((\%27)|(\’)|(--)|(\%3B)|(:))/i</p><p>典型的SQL 注入攻击的正则表达式 ：/\w*((\%27)|(\’))((\%6F)|o|(\%4F))((\%72)|r|(\%52))/ix</p><p>检测SQL注入，UNION查询关键字的正则表达式 ：/((\%27)|(\’))union/ix(\%27)|(\’)</p><p>检测MS SQL Server SQL注入攻击的正则表达式：</p><p>/exec(\s|+)+(s|x)p\w+/ix</p><p>等等…..</p><p><strong>3.字符串过滤</strong></p><p>比较通用的一个方法：</p><p>（||之间的参数可以根据自己程序的需要添加）</p><p>public static boolean sql_inj(String str){</p><p>String inj_str = “‘|and|exec|insert|select|delete|update|</p><p>count|*|%|chr|mid|master|truncate|char|declare|;|or|-|+|,”;</p><p>String inj_stra[] = split(inj_str,”|”);</p><p>for (int i=0 ; i &lt; inj_stra.length ; i++ ){</p><p>if (str.indexOf(inj_stra[i])&gt;=0){</p><p>return true;</p><p>}</p><p>}</p><p>return false;</p><p>}</p><p><strong>4.jsp中调用该函数检查是否包函非法字符</strong></p><p>防止SQL从URL注入：</p><p>sql_inj.java代码：</p><p>package sql_inj;</p><p>import java.net.*;</p><p>import java.io.*;</p><p>import java.sql.*;</p><p>import java.text.*;</p><p>import java.lang.String;</p><p>public class sql_inj{</p><p>public static boolean sql_inj(String str){</p><p>String inj_str = “‘|and|exec|insert|select|delete|update|</p><p>count|*|%|chr|mid|master|truncate|char|declare|;|or|-|+|,”;</p><p>//这里的东西还可以自己添加</p><p>String[] inj_stra=inj_str.split(“\|”);</p><p>for (int i=0 ; i &lt; inj_stra.length ; i++ ){</p><p>if (str.indexOf(inj_stra[i])&gt;=0){</p><p>return true;</p><p>}</p><p>}</p><p>return false;</p><p>}</p><p>}</p><p><strong>5.JSP页面判断代码：</strong></p><p>使用javascript在客户端进行不安全字符屏蔽</p><p>功能介绍：检查是否含有”‘”,”\”,”/”</p><p>参数说明：要检查的字符串</p><p>返回值：0：是1：不是</p><p>函数名是</p><p>function check(a){</p><p>return 1;</p><p>fibdn = new Array (”‘” ,”\”,”/”);</p><p>i=fibdn.length;</p><p>j=a.length;</p><p>for (ii=0; ii＜i; ii++)</p><p>{ for (jj=0; jj＜j; jj++)</p><p>{ temp1=a.charAt(jj);</p><p>temp2=fibdn[ii];</p><p>if (tem’; p1==temp2)</p><p>{ return 0; }</p><p>}</p><p>}</p><p>return 1;</p><p>}</p><p>===================================</p><p>总的说来，防范一般的SQL注入只要在代码规范上下点功夫就可以了。</p><p>凡涉及到执行的SQL中有变量时，用JDBC（或者其他数据持久层）提供的如：PreparedStatement就可以 ，切记不要用拼接字符串的方法就可以了。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;防止SQL注入的五种方法&quot;&gt;&lt;a href=&quot;#防止SQL注入的五种方法&quot; class=&quot;headerlink&quot; title=&quot;防止ＳＱＬ注入的五种方法&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://www.cnblogs.com/baizhanshi/p/6002
      
    
    </summary>
    
    
      <category term="sql" scheme="http://yoursite.com/tags/sql/"/>
    
  </entry>
  
  <entry>
    <title>CSRF_oken介绍与应对策略</title>
    <link href="http://yoursite.com/2019/02/18/CSRF-oken%E4%BB%8B%E7%BB%8D%E4%B8%8E%E5%BA%94%E5%AF%B9%E7%AD%96%E7%95%A5/"/>
    <id>http://yoursite.com/2019/02/18/CSRF-oken介绍与应对策略/</id>
    <published>2019-02-18T07:47:19.000Z</published>
    <updated>2019-02-18T07:47:55.048Z</updated>
    
    <content type="html"><![CDATA[<h1 id="CSRF-背景与介绍"><a href="#CSRF-背景与介绍" class="headerlink" title="CSRF 背景与介绍"></a>CSRF 背景与介绍</h1><p>CSRF（Cross Site Request Forgery, 跨站域请求伪造）是一种网络的攻击方式，它在 2007 年曾被列为互联网 20 大安全隐患之一。其他安全隐患，比如 SQL 脚本注入，跨站域脚本攻击等在近年来已经逐渐为众人熟知，很多网站也都针对他们进行了防御。然而，对于大多数人来说，CSRF 却依然是一个陌生的概念。即便是大名鼎鼎的 Gmail, 在 2007 年底也存在着 CSRF 漏洞，从而被黑客攻击而使 Gmail 的用户造成巨大的损失。</p><h1 id="CSRF-攻击实例"><a href="#CSRF-攻击实例" class="headerlink" title="CSRF 攻击实例"></a>CSRF 攻击实例</h1><p>CSRF 攻击可以在受害者毫不知情的情况下以受害者名义伪造请求发送给受攻击站点，从而在并未授权的情况下执行在权限保护之下的操作。比如说，受害者 Bob 在银行有一笔存款，通过对银行的网站发送请求 <a href="http://bank.example/withdraw?account=bob&amp;amount=1000000&amp;for=bob2" target="_blank" rel="noopener">http://bank.example/withdraw?account=bob&amp;amount=1000000&amp;for=bob2</a> 可以使 Bob 把 1000000 的存款转到 bob2 的账号下。通常情况下，该请求发送到网站后，服务器会先验证该请求是否来自一个合法的 session，并且该 session 的用户 Bob 已经成功登陆。黑客 Mallory 自己在该银行也有账户，他知道上文中的 URL 可以把钱进行转帐操作。Mallory 可以自己发送一个请求给银行：<a href="http://bank.example/withdraw?account=bob&amp;amount=1000000&amp;for=Mallory。但是这个请求来自" target="_blank" rel="noopener">http://bank.example/withdraw?account=bob&amp;amount=1000000&amp;for=Mallory。但是这个请求来自</a> Mallory 而非 Bob，他不能通过安全认证，因此该请求不会起作用。这时，Mallory 想到使用 CSRF 的攻击方式，他先自己做一个网站，在网站中放入如下代码： src=”<a href="http://bank.example/withdraw?account=bob&amp;amount=1000000&amp;for=Mallory" target="_blank" rel="noopener">http://bank.example/withdraw?account=bob&amp;amount=1000000&amp;for=Mallory</a> ”，并且通过广告等诱使 Bob 来访问他的网站。当 Bob 访问该网站时，上述 url 就会从 Bob 的浏览器发向银行，而这个请求会附带 Bob 浏览器中的 cookie 一起发向银行服务器。大多数情况下，该请求会失败，因为他要求 Bob 的认证信息。但是，如果 Bob 当时恰巧刚访问他的银行后不久，他的浏览器与银行网站之间的 session 尚未过期，浏览器的 cookie 之中含有 Bob 的认证信息。这时，悲剧发生了，这个 url 请求就会得到响应，钱将从 Bob 的账号转移到 Mallory 的账号，而 Bob 当时毫不知情。等以后 Bob 发现账户钱少了，即使他去银行查询日志，他也只能发现确实有一个来自于他本人的合法请求转移了资金，没有任何被攻击的痕迹。而 Mallory 则可以拿到钱后逍遥法外。</p><h1 id="CSRF-攻击的对象"><a href="#CSRF-攻击的对象" class="headerlink" title="CSRF 攻击的对象"></a>CSRF 攻击的对象</h1><p>在讨论如何抵御 CSRF 之前，先要明确 CSRF 攻击的对象，也就是要保护的对象。从以上的例子可知，CSRF 攻击是黑客借助受害者的 cookie 骗取服务器的信任，但是黑客并不能拿到 cookie，也看不到 cookie 的内容。另外，对于服务器返回的结果，由于浏览器同源策略的限制，黑客也无法进行解析。因此，黑客无法从返回的结果中得到任何东西，他所能做的就是给服务器发送请求，以执行请求中所描述的命令，在服务器端直接改变数据的值，而非窃取服务器中的数据。所以，我们要保护的对象是那些可以直接产生数据改变的服务，而对于读取数据的服务，则不需要进行 CSRF 的保护。比如银行系统中转账的请求会直接改变账户的金额，会遭到 CSRF 攻击，需要保护。而查询余额是对金额的读取操作，不会改变数据，CSRF 攻击无法解析服务器返回的结果，无需保护。</p><h2 id="当前防御-CSRF-的几种策略"><a href="#当前防御-CSRF-的几种策略" class="headerlink" title="当前防御 CSRF 的几种策略"></a>当前防御 CSRF 的几种策略</h2><p>验证 HTTP Referer 字段<br>根据 HTTP 协议，在 HTTP 头中有一个字段叫 Referer，它记录了该 HTTP 请求的来源地址。在通常情况下，访问一个安全受限页面的请求来自于同一个网站，比如需要访问 <a href="http://bank.example/withdraw?account=bob&amp;amount=1000000&amp;for=Mallory，用户必须先登陆" target="_blank" rel="noopener">http://bank.example/withdraw?account=bob&amp;amount=1000000&amp;for=Mallory，用户必须先登陆</a> bank.example，然后通过点击页面上的按钮来触发转账事件。这时，该转帐请求的 Referer 值就会是转账按钮所在的页面的 URL，通常是以 bank.example 域名开头的地址。而如果黑客要对银行网站实施 CSRF 攻击，他只能在他自己的网站构造请求，当用户通过黑客的网站发送请求到银行时，该请求的 Referer 是指向黑客自己的网站。因此，要防御 CSRF 攻击，银行网站只需要对于每一个转账请求验证其 Referer 值，如果是以 bank.example 开头的域名，则说明该请求是来自银行网站自己的请求，是合法的。如果 Referer 是其他网站的话，则有可能是黑客的 CSRF 攻击，拒绝该请求。<br>这种方法的显而易见的好处就是简单易行，网站的普通开发人员不需要操心 CSRF 的漏洞，只需要在最后给所有安全敏感的请求统一增加一个拦截器来检查 Referer 的值就可以。特别是对于当前现有的系统，不需要改变当前系统的任何已有代码和逻辑，没有风险，非常便捷。<br>然而，这种方法并非万无一失。Referer 的值是由浏览器提供的，虽然 HTTP 协议上有明确的要求，但是每个浏览器对于 Referer 的具体实现可能有差别，并不能保证浏览器自身没有安全漏洞。使用验证 Referer 值的方法，就是把安全性都依赖于第三方（即浏览器）来保障，从理论上来讲，这样并不安全。事实上，对于某些浏览器，比如 IE6 或 FF2，目前已经有一些方法可以篡改 Referer 值。如果 bank.example 网站支持 IE6 浏览器，黑客完全可以把用户浏览器的 Referer 值设为以 bank.example 域名开头的地址，这样就可以通过验证，从而进行 CSRF 攻击。<br>即便是使用最新的浏览器，黑客无法篡改 Referer 值，这种方法仍然有问题。因为 Referer 值会记录下用户的访问来源，有些用户认为这样会侵犯到他们自己的隐私权，特别是有些组织担心 Referer 值会把组织内网中的某些信息泄露到外网中。因此，用户自己可以设置浏览器使其在发送请求时不再提供 Referer。当他们正常访问银行网站时，网站会因为请求没有 Referer 值而认为是 CSRF 攻击，拒绝合法用户的访问。<br>在请求地址中添加 token 并验证<br>CSRF 攻击之所以能够成功，是因为黑客可以完全伪造用户的请求，该请求中所有的用户验证信息都是存在于 cookie 中，因此黑客可以在不知道这些验证信息的情况下直接利用用户自己的 cookie 来通过安全验证。要抵御 CSRF，关键在于在请求中放入黑客所不能伪造的信息，并且该信息不存在于 cookie 之中。可以在 HTTP 请求中以参数的形式加入一个随机产生的 token，并在服务器端建立一个拦截器来验证这个 token，如果请求中没有 token 或者 token 内容不正确，则认为可能是 CSRF 攻击而拒绝该请求。<br>这种方法要比检查 Referer 要安全一些，token 可以在用户登陆后产生并放于 session 之中，然后在每次请求时把 token 从 session 中拿出，与请求中的 token 进行比对，但这种方法的难点在于如何把 token 以参数的形式加入请求。对于 GET 请求，token 将附在请求地址之后，这样 URL 就变成 <a href="http://url?csrftoken=tokenvalue。" target="_blank" rel="noopener">http://url?csrftoken=tokenvalue。</a> 而对于 POST 请求来说，要在 form 的最后加上 <input type="”hidden”" name="”csrftoken”" value="”tokenvalue”/">，这样就把 token 以参数的形式加入请求了。但是，在一个网站中，可以接受请求的地方非常多，要对于每一个请求都加上 token 是很麻烦的，并且很容易漏掉，通常使用的方法就是在每次页面加载时，使用 javascript 遍历整个 dom 树，对于 dom 中所有的 a 和 form 标签后加入 token。这样可以解决大部分的请求，但是对于在页面加载之后动态生成的 html 代码，这种方法就没有作用，还需要程序员在编码时手动添加 token。<br>该方法还有一个缺点是难以保证 token 本身的安全。特别是在一些论坛之类支持用户自己发表内容的网站，黑客可以在上面发布自己个人网站的地址。由于系统也会在这个地址后面加上 token，黑客可以在自己的网站上得到这个 token，并马上就可以发动 CSRF 攻击。为了避免这一点，系统可以在添加 token 的时候增加一个判断，如果这个链接是链到自己本站的，就在后面添加 token，如果是通向外网则不加。不过，即使这个 csrftoken 不以参数的形式附加在请求之中，黑客的网站也同样可以通过 Referer 来得到这个 token 值以发动 CSRF 攻击。这也是一些用户喜欢手动关闭浏览器 Referer 功能的原因。<br>在 HTTP 头中自定义属性并验证<br>这种方法也是使用 token 并进行验证，和上一种方法不同的是，这里并不是把 token 以参数的形式置于 HTTP 请求之中，而是把它放到 HTTP 头中自定义的属性里。通过 XMLHttpRequest 这个类，可以一次性给所有该类请求加上 csrftoken 这个 HTTP 头属性，并把 token 值放入其中。这样解决了上种方法在请求中加入 token 的不便，同时，通过 XMLHttpRequest 请求的地址不会被记录到浏览器的地址栏，也不用担心 token 会透过 Referer 泄露到其他网站中去。<br>然而这种方法的局限性非常大。XMLHttpRequest 请求通常用于 Ajax 方法中对于页面局部的异步刷新，并非所有的请求都适合用这个类来发起，而且通过该类请求得到的页面不能被浏览器所记录下，从而进行前进，后退，刷新，收藏等操作，给用户带来不便。另外，对于没有进行 CSRF 防护的遗留系统来说，要采用这种方法来进行防护，要把所有请求都改为 XMLHttpRequest 请求，这样几乎是要重写整个网站，这代价无疑是不能接受的。</p><h1 id="读后感"><a href="#读后感" class="headerlink" title="读后感"></a>读后感</h1><p>看了很多篇关于token的文章，这个算是最通俗易懂的文章之一了。</p><p>CSRF攻击属于一种恶意网站的攻击，恶意网站会通过你电脑，尚未过期的session登陆状态，来发送一些请求，达到某种目的。</p><p>防止的方法：</p><p>1.可以通过Referer得到请求来源，判断是正规网站的来源，还是通过CSRF攻击所请求的。</p><p>但是这种办法黑客可以通过修改referer来实现，并且也属于第三方的，通过浏览器来实现安全。对于程序员来说，不可定性还是很高。</p><p>2.可以通过设置一定个token，在登陆的时候，自动生成一个token，在表单提交或者请求连接的时候，都加上token值。这个样子的话，如果是CSRF攻击的话，那么就不存在token值或错误的token值。就会的导致token不一致，无法过拦截器。</p><p>现在做的项目就是在登陆的时候自动生成一个token值，存入到mysql数据库，当请求的时候，就会去数据库匹配token。至于为什么使用mysql里存储token，不用session存储。这个我就不知道了，可能是手机端吧。</p><p>3.可以在自定义属性XMLHttpRequest中，添加一个token，这个token不是以参数的形式传递的，而是放到HTTP头中自定义的属性里，通过XMLHttpRequest给所有求情加上token。</p><p>但是XMLHttpRequest是大多数用于ajax请求，局限性比较大，不是所有的类都是由这个类来发起的。对于一些遗留性代码，如果要使用这种方式，需要重写整个程序，这个代价是非常大的。并且通过该类访问的地址，在浏览器上不会有记录，所以用户在前进，后退，刷新，收藏等操作，不容易实现。造成一定困难。</p><p>CSRF 防御方法选择之道<br>通过上文讨论可知，目前业界应对 CSRF 攻击有一些克制方法，但是每种方法都有利弊，没有一种方法是完美的。如何选择合适的方法非常重要。如果网站是一个现有系统，想要在最短时间内获得一定程度的 CSRF 的保护，那么验证 Referer 的方法是最方便的，要想增加安全性的话，可以选择不支持低版本浏览器，毕竟就目前来说，IE7+, FF3+ 这类高版本浏览器的 Referer 值还无法被篡改。</p><p>如果系统必须支持 IE6，并且仍然需要高安全性。那么就要使用 token 来进行验证，在大部分情况下，使用 XmlHttpRequest 并不合适，token 只能以参数的形式放于请求之中，若你的系统不支持用户自己发布信息，那这种程度的防护已经足够，否则的话，你仍然难以防范 token 被黑客窃取并发动攻击。在这种情况下，你需要小心规划你网站提供的各种服务，从中间找出那些允许用户自己发布信息的部分，把它们与其他服务分开，使用不同的 token 进行保护，这样可以有效抵御黑客对于你关键服务的攻击，把危害降到最低。毕竟，删除别人一个帖子比直接从别人账号中转走大笔存款严重程度要轻的多。</p><p>如果是开发一个全新的系统，则抵御 CSRF 的选择要大得多。笔者建议对于重要的服务，可以尽量使用 XMLHttpRequest 来访问，这样增加 token 要容易很多。另外尽量避免在 js 代码中使用复杂逻辑来构造常规的同步请求来访问需要 CSRF 保护的资源，比如 window.location 和 document.createElement(“a”) 之类，这样也可以减少在附加 token 时产生的不必要的麻烦。</p><p>最后，要记住 CSRF 不是黑客唯一的攻击手段，无论你 CSRF 防范有多么严密，如果你系统有其他安全漏洞，比如跨站域脚本攻击 XSS，那么黑客就可以绕过你的安全防护，展开包括 CSRF 在内的各种攻击，你的防线将如同虚设。</p><p>总结与展望<br>可见，CSRF 是一种危害非常大的攻击，又很难以防范。目前几种防御策略虽然可以很大程度上抵御 CSRF 的攻击，但并没有一种完美的解决方案。一些新的方案正在研究之中，比如对于每次请求都使用不同的动态口令，把 Referer 和 token 方案结合起来，甚至尝试修改 HTTP 规范，但是这些新的方案尚不成熟，要正式投入使用并被业界广为接受还需时日。在这之前，我们只有充分重视 CSRF，根据系统的实际情况选择最合适的策略，这样才能把 CSRF 的危害降到最低。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;CSRF-背景与介绍&quot;&gt;&lt;a href=&quot;#CSRF-背景与介绍&quot; class=&quot;headerlink&quot; title=&quot;CSRF 背景与介绍&quot;&gt;&lt;/a&gt;CSRF 背景与介绍&lt;/h1&gt;&lt;p&gt;CSRF（Cross Site Request Forgery, 跨站域请求
      
    
    </summary>
    
    
      <category term="csrf" scheme="http://yoursite.com/tags/csrf/"/>
    
  </entry>
  
  <entry>
    <title>在hexo博客上添加可爱的live2D模型</title>
    <link href="http://yoursite.com/2019/02/18/%E5%9C%A8Hexo%E5%8D%9A%E5%AE%A2%E4%B8%8A%E6%B7%BB%E5%8A%A0%E5%8F%AF%E7%88%B1%E7%9A%84Live%202D%E6%A8%A1%E5%9E%8B/"/>
    <id>http://yoursite.com/2019/02/18/在Hexo博客上添加可爱的Live 2D模型/</id>
    <published>2019-02-18T07:44:13.000Z</published>
    <updated>2019-02-18T07:45:31.497Z</updated>
    
    <content type="html"><![CDATA[<p>在查找资料的偶然间，我发现一个博客上有非常可爱的Live 2D模型，当时我就被打动了，马上开启审查元素，试图找出这个Live 2D模型的信息，可是找了半天没找到。最后通过截图-&gt;谷歌图片的方式，终于一层一层的找到了相关资料，我正好有一个Hexo博客，所以今天就来在博客上添加一波Live 2D模型！</p><p>首先，安装npm包：</p><p>npm install –save hexo-helper-live2d<br>1<br>然后在hexo的配置文件_config.yml中添加如下配置，详细配置可以参考文档：</p><p>live2d:<br>  enable: true<br>  scriptFrom: local<br>  pluginRootPath: live2dw/<br>  pluginJsPath: lib/<br>  pluginModelPath: assets/<br>  tagMode: false<br>  debug: false<br>  model:<br>​    use: live2d-widget-model-shizuku<br>  display:<br>​    position: right<br>​    width: 150<br>​    height: 300<br>  mobile:<br>​    show: true<br>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>15<br>16<br>然后下载模型，模型名称可以到这里参考，一些模型的预览可以在这里。</p><p>npm install live2d-widget-model-shizuku<br>1<br>所有模型列表如下：</p><p>live2d-widget-model-chitose<br>live2d-widget-model-epsilon2_1<br>live2d-widget-model-gf<br>live2d-widget-model-haru/01 (use npm install –save live2d-widget-model-haru)<br>live2d-widget-model-haru/02 (use npm install –save live2d-widget-model-haru)<br>live2d-widget-model-haruto<br>live2d-widget-model-hibiki<br>live2d-widget-model-hijiki<br>live2d-widget-model-izumi<br>live2d-widget-model-koharu<br>live2d-widget-model-miku<br>live2d-widget-model-ni-j<br>live2d-widget-model-nico<br>live2d-widget-model-nietzsche<br>live2d-widget-model-nipsilon<br>live2d-widget-model-nito<br>live2d-widget-model-shizuku<br>live2d-widget-model-tororo<br>live2d-widget-model-tsumiki<br>live2d-widget-model-unitychan<br>live2d-widget-model-wanko<br>live2d-widget-model-z16<br>下载完之后，在Hexo根目录中新建文件夹live2d_models，然后在node_modules文件夹中找到刚刚下载的live2d模型，将其复制到live2d_models中，然后编辑配置文件中的model.use项，将其修改为live2d_models文件夹中的模型文件夹名称。</p><p>一切就绪之后，用hexo server命令启动服务器，稍等一下就可以看到右下角出现了一个可爱的萌萌哒的妹纸！本来录了一个GIF，可惜上传上来变成了PNG格式……想看动态图的话只能直接看我的博客了，不过因为所有东西都在Github上托管的原因，可能Live2D不能马上加载出来。</p><hr>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;在查找资料的偶然间，我发现一个博客上有非常可爱的Live 2D模型，当时我就被打动了，马上开启审查元素，试图找出这个Live 2D模型的信息，可是找了半天没找到。最后通过截图-&amp;gt;谷歌图片的方式，终于一层一层的找到了相关资料，我正好有一个Hexo博客，所以今天就来在博客
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>使用Hexo+Github一步步搭建属于自己的博客基础篇</title>
    <link href="http://yoursite.com/2019/02/18/%E4%BD%BF%E7%94%A8Hexo-Github%E4%B8%80%E6%AD%A5%E6%AD%A5%E6%90%AD%E5%BB%BA%E5%B1%9E%E4%BA%8E%E8%87%AA%E5%B7%B1%E7%9A%84%E5%8D%9A%E5%AE%A2%E5%9F%BA%E7%A1%80%E7%AF%87/"/>
    <id>http://yoursite.com/2019/02/18/使用Hexo-Github一步步搭建属于自己的博客基础篇/</id>
    <published>2019-02-18T07:33:49.000Z</published>
    <updated>2019-02-18T07:34:32.215Z</updated>
    
    <content type="html"><![CDATA[<p>前言：电脑系统为window 10专业版，64位<br>相关步骤：</p><h3 id="1、安装Node-js和配置好Node-js环境，打开cmd命令行，成功界面如下"><a href="#1、安装Node-js和配置好Node-js环境，打开cmd命令行，成功界面如下" class="headerlink" title="1、安装Node.js和配置好Node.js环境，打开cmd命令行，成功界面如下"></a>1、安装Node.js和配置好Node.js环境，打开cmd命令行，成功界面如下</h3><p><img src="https://images2017.cnblogs.com/blog/1108615/201710/1108615-20171021222335756-1508643846.png" alt="在这里插入图片描述"></p><h3 id="2、安装Git和配置好Git环境，安装成功的象征就是在电脑上任何位置鼠标右键能够出现如下两个选择"><a href="#2、安装Git和配置好Git环境，安装成功的象征就是在电脑上任何位置鼠标右键能够出现如下两个选择" class="headerlink" title="2、安装Git和配置好Git环境，安装成功的象征就是在电脑上任何位置鼠标右键能够出现如下两个选择"></a>2、安装Git和配置好Git环境，安装成功的象征就是在电脑上任何位置鼠标右键能够出现如下两个选择</h3><p><img src="https://images2017.cnblogs.com/blog/1108615/201710/1108615-20171021222542474-1351750125.png" alt="在这里插入图片描述"></p><p>注意：一般出于安全考虑，只有在Git Bash Here中才能进行Git的相关操作。如果需要在cmd命令行里调用Git，那么就要配置电脑的环境变量Path，或者在安装的时候选择use Git from the Windows Command Prompt。这个可有可无，影响不大，成功配置的界面如图</p><p><img src="https://images2017.cnblogs.com/blog/1108615/201710/1108615-20171021223101193-1524328031.png" alt="在这里插入图片描述"></p><h3 id="3、Github账户注册和新建项目，项目必须要遵守格式：账户名-github-io，不然接下来会有很多麻烦。并且需要勾选Initialize-this-repository-with-a-README"><a href="#3、Github账户注册和新建项目，项目必须要遵守格式：账户名-github-io，不然接下来会有很多麻烦。并且需要勾选Initialize-this-repository-with-a-README" class="headerlink" title="3、Github账户注册和新建项目，项目必须要遵守格式：账户名.github.io，不然接下来会有很多麻烦。并且需要勾选Initialize this repository with a README"></a>3、Github账户注册和新建项目，项目必须要遵守格式：账户名.github.io，不然接下来会有很多麻烦。并且需要勾选Initialize this repository with a README</h3><p><img src="https://images2017.cnblogs.com/blog/1108615/201710/1108615-20171021223639881-1998790649.png" alt="在这里插入图片描述"><br>在建好的项目右侧有个settings按钮，点击它，向下拉到GitHub Pages，你会看到那边有个网址，访问它，你将会惊奇的发现该项目已经被部署到网络上，能够通过外网来访问它。<br><img src="https://images2017.cnblogs.com/blog/1108615/201710/1108615-20171021223928802-1978574025.png" alt="在这里插入图片描述"></p><h3 id="4、安装Hexo，在自己认为合适的地方创个文件夹，我是在D盘建了一个blog文件夹。然后通过命令行进入到该文件夹里面"><a href="#4、安装Hexo，在自己认为合适的地方创个文件夹，我是在D盘建了一个blog文件夹。然后通过命令行进入到该文件夹里面" class="headerlink" title="4、安装Hexo，在自己认为合适的地方创个文件夹，我是在D盘建了一个blog文件夹。然后通过命令行进入到该文件夹里面"></a>4、安装Hexo，在自己认为合适的地方创个文件夹，我是在D盘建了一个blog文件夹。然后通过命令行进入到该文件夹里面</h3><p><img src="https://images2017.cnblogs.com/blog/1108615/201710/1108615-20171021224442443-1196707159.png" alt="在这里插入图片描述"></p><p>输入npm install hexo -g，开始安装Hexo</p><p><img src="https://images2017.cnblogs.com/blog/1108615/201710/1108615-20171021224910568-2096615217.png" alt="在这里插入图片描述"></p><p> 输入hexo -v，检查hexo是否安装成功<br> <img src="https://images2017.cnblogs.com/blog/1108615/201710/1108615-20171021225015224-1426206003.png" alt="在这里插入图片描述"></p><p>输入hexo init，初始化该文件夹（有点漫长的等待。。。）<br><img src="https://images2017.cnblogs.com/blog/1108615/201710/1108615-20171021230203912-509196411.png" alt="在这里插入图片描述"><br><img src="https://images2017.cnblogs.com/blog/1108615/201710/1108615-20171021230241646-1660449756.png" alt="在这里插入图片描述"></p><p>看到后面的“Start blogging with Hexo！”，激动有木有！！！！！</p><p>输入npm install，安装所需要的组件<br><img src="https://images2017.cnblogs.com/blog/1108615/201710/1108615-20171021231521646-1099473727.png" alt="在这里插入图片描述"></p><p>输入hexo g，首次体验Hexo<br><img src="https://images2017.cnblogs.com/blog/1108615/201710/1108615-20171021231705474-1404994153.png" alt="在这里插入图片描述"></p><p> 输入hexo s，开启服务器，访问该网址，正式体验Hexo<br><img src="https://images2017.cnblogs.com/blog/1108615/201710/1108615-20171021231833912-663774637.png" alt="在这里插入图片描述"><br>问题：假如页面一直无法跳转，那么可能端口被占用了。此时我们ctrl+c停止服务器，接着输入“hexo server -p 端口号”来改变端口号<br><img src="https://images2017.cnblogs.com/blog/1108615/201710/1108615-20171021232311912-1198771378.png" alt="在这里插入图片描述"></p><p>那么出现如下图就成功了<br><img src="https://images2017.cnblogs.com/blog/1108615/201710/1108615-20171021232413224-1288183746.png" alt="在这里插入图片描述"></p><h3 id="5、将Hexo与Github-page联系起来，设置Git的user-name和email（如果是第一次的话）"><a href="#5、将Hexo与Github-page联系起来，设置Git的user-name和email（如果是第一次的话）" class="headerlink" title="5、将Hexo与Github page联系起来，设置Git的user name和email（如果是第一次的话）"></a>5、将Hexo与Github page联系起来，设置Git的user name和email（如果是第一次的话）</h3><p><img src="https://images2017.cnblogs.com/blog/1108615/201710/1108615-20171021233157224-1386748377.png" alt="在这里插入图片描述"></p><p>上图是在其文件夹里面鼠标右键，点击Git Base Here。这里“feng”可以替换成自己的用户名，邮箱可以替换成自己的邮箱</p><p>输入cd ~/.ssh，检查是否由.ssh的文件夹<br><img src="https://images2017.cnblogs.com/blog/1108615/201710/1108615-20171021233543052-76995831.png" alt="在这里插入图片描述"></p><p>输入ls，列出该文件下的内容。下图说明存在<br><img src="https://images2017.cnblogs.com/blog/1108615/201710/1108615-20171021233630568-279882178.png" alt="在这里插入图片描述"></p><p> 输入ssh-keygen -t rsa -C “<a href="mailto:929762930@qq.com" target="_blank" rel="noopener">929762930@qq.com</a>”，连续三个回车，生成密钥，最后得到了两个文件：id_rsa和id_rsa.pub（默认存储路径是：C:\Users\Administrator.ssh）。<br><img src="https://images2017.cnblogs.com/blog/1108615/201710/1108615-20171021234107209-1205335399.png" alt="在这里插入图片描述"></p><p> 输入eval “$(ssh-agent -s)”，添加密钥到ssh-agent<br><img src="https://images2017.cnblogs.com/blog/1108615/201710/1108615-20171021234314146-695835137.png" alt="在这里插入图片描述"></p><p> 再输入ssh-add ~/.ssh/id_rsa，添加生成的SSH key到ssh-agent<br><img src="https://images2017.cnblogs.com/blog/1108615/201710/1108615-20171021234528552-610835964.png" alt="在这里插入图片描述"></p><p> 登录Github，点击头像下的settings，添加ssh</p><p> <img src="https://images2017.cnblogs.com/blog/1108615/201710/1108615-20171021234636834-426105098.png" alt="在这里插入图片描述"></p><p>新建一个new ssh key，将id_rsa.pub文件里的内容复制上去<br><img src="https://images2017.cnblogs.com/blog/1108615/201710/1108615-20171021234906724-1938556332.png" alt="在这里插入图片描述"></p><p>输入ssh -T <a href="mailto:git@github.com" target="_blank" rel="noopener">git@github.com</a>，测试添加ssh是否成功。如果看到Hi后面是你的用户名，就说明成功了<br><img src="https://images2017.cnblogs.com/blog/1108615/201710/1108615-20171021235116271-1521882533.png" alt="在这里插入图片描述"></p><p>问题：假如ssh-key配置失败，那么只要以下步骤就能完全解决</p><p>首先，清除所有的key-pair<br>ssh-add -D<br>rm -r ~/.ssh<br>删除你在github中的public-key</p><p>重新生成ssh密钥对<br>ssh-keygen -t rsa -C “<a href="mailto:xxx@xxx.com" target="_blank" rel="noopener">xxx@xxx.com</a>“</p><p>接下来正常操作<br>在github上添加公钥public-key:<br>1、首先在你的终端运行 xclip -sel c ~/.ssh/id_rsa.pub将公钥内容复制到剪切板<br>2、在github上添加公钥时，直接复制即可<br>3、保存</p><p>测试：<br>在终端 ssh -T <a href="mailto:git@github.com" target="_blank" rel="noopener">git@github.com</a></p><h3 id="6、配置Deployment，在其文件夹中，找到-config-yml文件，修改repo值（在末尾）"><a href="#6、配置Deployment，在其文件夹中，找到-config-yml文件，修改repo值（在末尾）" class="headerlink" title="6、配置Deployment，在其文件夹中，找到_config.yml文件，修改repo值（在末尾）"></a>6、配置Deployment，在其文件夹中，找到_config.yml文件，修改repo值（在末尾）</h3><p><img src="https://images2017.cnblogs.com/blog/1108615/201710/1108615-20171021235812974-84318377.png" alt="在这里插入图片描述"></p><p>repo值是你在github项目里的ssh（右下角）<br><img src="https://images2017.cnblogs.com/blog/1108615/201710/1108615-20171021235722365-818312042.png" alt="在这里插入图片描述"></p><h3 id="7、新建一篇博客，在cmd执行命令：hexo-new-post-“博客名”"><a href="#7、新建一篇博客，在cmd执行命令：hexo-new-post-“博客名”" class="headerlink" title="7、新建一篇博客，在cmd执行命令：hexo new post “博客名”"></a>7、新建一篇博客，在cmd执行命令：hexo new post “博客名”</h3><p><img src="https://images2017.cnblogs.com/blog/1108615/201710/1108615-20171022000508865-46787156.png" alt="在这里插入图片描述"></p><p> 这时候在文件夹_posts目录下将会看到已经创建的文件</p><p><img src="https://images2017.cnblogs.com/blog/1108615/201710/1108615-20171022000508865-46787156.png" alt="在这里插入图片描述"><br>在生成以及部署文章之前，需要安装一个扩展：npm install hexo-deployer-git –save<br><img src="https://images2017.cnblogs.com/blog/1108615/201710/1108615-20171022001237943-657272339.png" alt="在这里插入图片描述"></p><p>使用编辑器编好文章，那么就可以使用命令：hexo d -g，生成以及部署了<br><img src="https://images2017.cnblogs.com/blog/1108615/201710/1108615-20171022001410662-1611125904.png" alt="在这里插入图片描述"></p><p>部署成功后访问你的地址：http://用户名.github.io。那么将看到生成的文章<br><img src="https://images2017.cnblogs.com/blog/1108615/201710/1108615-20171022001738037-1195721153.png" alt="在这里插入图片描述"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;前言：电脑系统为window 10专业版，64位&lt;br&gt;相关步骤：&lt;/p&gt;
&lt;h3 id=&quot;1、安装Node-js和配置好Node-js环境，打开cmd命令行，成功界面如下&quot;&gt;&lt;a href=&quot;#1、安装Node-js和配置好Node-js环境，打开cmd命令行，成功界面如
      
    
    </summary>
    
    
      <category term="hexo" scheme="http://yoursite.com/tags/hexo/"/>
    
  </entry>
  
  <entry>
    <title>【史上最全】国内外常用精品API汇总</title>
    <link href="http://yoursite.com/2019/02/18/%E3%80%90%E5%8F%B2%E4%B8%8A%E6%9C%80%E5%85%A8%E3%80%91%E5%9B%BD%E5%86%85%E5%A4%96%E5%B8%B8%E7%94%A8%E7%B2%BE%E5%93%81API%E6%B1%87%E6%80%BB/"/>
    <id>http://yoursite.com/2019/02/18/【史上最全】国内外常用精品API汇总/</id>
    <published>2019-02-18T07:29:27.000Z</published>
    <updated>2019-02-18T07:30:04.134Z</updated>
    
    <content type="html"><![CDATA[<h1 id="【史上最全】国内外常用精品API汇总"><a href="#【史上最全】国内外常用精品API汇总" class="headerlink" title="【史上最全】国内外常用精品API汇总"></a>【史上最全】国内外常用精品API汇总</h1><p>API是获取网络服务最便捷的方式，合理地使用API开发项目可以大大提高开发效率，把精力都集中在程序的业务逻辑之上，避免重复造轮子。推荐给大家个人觉得很赞的第三方API（资源整合自网络）。文章分为天气查询、生活常用、文体娱乐、企业金融、通讯服务、交通出行、技术开发七大类，如果你觉得分类不直观，想直接获取免费可试用的api，也可以直接搜索用友APILink，或访问官网api.yonyoucloud.com</p><h2 id="一、天气查询"><a href="#一、天气查询" class="headerlink" title="一、天气查询"></a>一、天气查询</h2><p>天气查询应用的场景非常广，我猜很多人练手的第一个项目就是做天气查询类的demo。</p><p>全国天气预报 - 一个简单的HTTP接口，根据用户输入的adcode，查询目标区域当前/未来的天气情况。 使用API前需先申请Key。</p><p>AccuWeather - AccuWeather API 通过一个简单的 REST 风格的 Web 界面为订阅者提供基于位置的天气数据的访问.</p><p>Aeris Weather - 驱动你的定制应用的先进 API, 为新鲜空气提供了从简到繁的解决方案.</p><p>彩云天气 - 中国天气信息.</p><p>和风天气 - 中国天气信息.</p><p>Open Weather Map - Open Weather Map 服务提供免费的天气数据和预测 API, 适用于任何制图服务, 如网页和智能手机应用程序.</p><p>Weather Underground - 可靠的数据, 准确的预测, 全球覆盖80种语言.</p><p>Weather Unlocked - 电子广告商, 电子商务和开发人员的天气驱动方案.</p><p>心知天气 - 中国天气信息.</p><p>Yandex.Weather - Yandex.Weather 使用专有的预测技术 Meteum 来评估俄罗斯地区特定地点的当前天气情况, 并为这些地理坐标创建预报.</p><p>Yahoo! Weather - 获取任何位置的最新天气信息, 包括5天预报, 风, 大气, 天文条件等.</p><h2 id="二、生活常用"><a href="#二、生活常用" class="headerlink" title="二、生活常用"></a>二、生活常用</h2><p>空气质量指数- 支持全国300多个城市的空气质量指数（AQI）查询，每小时更新一次，可查询到城市的首要污染物、空气质量的优良级别、指数颜色值等信息</p><p>全国医院信息查询- 可查询到国内各大医院的详细信息，包括医院所在的具体地址、医院类型、医院名称、医院等级、联系方式、重点科室、医院专家和医院简介等详细信息。</p><p>公交及站点查询-全国城市公交站点、线路、换乘查询。<br>列车时刻表信息查询- 根据车次查询列车时刻信息，及各站里程；根据始发和终点站查询列车时刻信息，及各站里程</p><p>物流五级区域查询-最新全国省、市、县行政区域信息，未包括我国台湾省、香港特别行政区、澳门特别行政区</p><p>今日油价查询-提供今日油价查询。 支持查询全国各省市的今日油价，提供89号汽油、90号汽油、92号汽油、93号汽油、95号汽油、97号汽油、0号柴油的价格</p><p>新发地菜市场行情-提供北京新发地菜市场行情查询，输入菜品名称就可以查询到该菜品的最低价格、最高价格、平均价格、计量单位以及价格更新日期</p><p>全国高校信息查询-根据省份、城市、详细地址、大学名称可查询到符合条件的大学的基本信息，包括大学类别（比如理工类、综合类、财经类、艺术类等）、大学详细地址、学校级别（本科、专科）、联系方式、电子邮箱、site等信息。</p><p>谷歌日历 - Google Calendar API 可以让你将你的应用与 Google Calendar 集成, 为你吸引用户创造新的途径.</p><p>Outlook Calendar - The Calendar API 提供了访问由 Office 365 中 Azure Active Directory 保护的事件, 日历, 日历组以及以下域中的特定 Microsoft 帐户中的类似数据: Hotmail.com, Live.com, MSN.com, Outlook.com 和 Passport.com.</p><p>外卖</p><p>百度外卖 - 支持商户，菜品，商品，订单和基础数据等内容，提供SDK和Demo。</p><p>大众点评 - 支持商户，团购，在线预定，商品点评，数据统计，元数据等内容。</p><p>饿了么 - 支持查询，预定，订单，其他订单，数据推送，支付，评价，活动，账户同步，数据落地同步等内容。</p><p>美团外卖 - 支持门店，配送范围，菜品，药品，订单，订单推送等内容。</p><p>其他</p><p>常见疾病查询；万年历查询；二十四节气查询；节假日查询；标准中文电码查询；BMI计算；区号查询；简繁体转换</p><h2 id="三、文体娱乐"><a href="#三、文体娱乐" class="headerlink" title="三、文体娱乐"></a>三、文体娱乐</h2><p>博客</p><p>Blogger - Blogger API v3 版本允许你创建新的博客, 编辑或者删除已经存在的博客, 查询符合特定标准的博客.</p><p>Medium - 访问 medium.com 的数据. s</p><p>Weebly -借助 Weebly Cloud, 你可以提供 Weebly 的最佳网站构建方式, 使你的客户能够在几分钟内创建自己的网站, 博客或在线商店, 同时完全控制帐单, 支持和客户关系.</p><p>WordPress - 访问 WordPress 的 API.</p><p>Telegraph - 访问 Telegraph 的 API, Telegram 的 发布服务.</p><p>书籍</p><p>An API Of Ice And Fire - 冰与火之歌的 API 提供 JSON 格式的“冰与火之歌”宇宙中的所有书籍, 人物, 房屋的数据. 无需验证身份. Node 和 Swift 库可用.</p><p>Open Library Books API - Open Library 是一个开放的, 可编辑的图书馆目录, 为每一本出版的图书都建立了网页.</p><p>The New York Public Library Digital Collections API - 一个多世纪以来, 纽约公共图书馆已经积累了一系列罕见而独特的材料, 涵盖了所有有记录的知识.</p><p>Bookshare - Bookshare API 使我们的合作伙伴能够使具有合格的阅读障碍的顾客搜索, 浏览和下载书籍和期刊.</p><p>杂志</p><p>豆瓣一刻(非官方) - 支持获取指定日期文章列表，栏目总览，推荐作者，作者信息，作者更多文章信息，栏目文章列表及翻页，文章评论及热门评论列表。 #非官方</p><p>开眼(非官方) - 支持获取未登录状态下开眼精选、发现、关注信息。 #非官方</p><p>One一个(非官方) - 支持获取首页图片，文章，音乐及电影。 #非官方</p><p>图虫(非官方) - 支持获取图虫 app 所有信息。 #非官方</p><p>一席(非官方) - 支持获取一席主页、演讲、讲者、枝桠等内容 #非官方</p><p>知乎日报(非官方) - 支持获取界面启动图像，软件版本查询，最新消息，消息内容获取与离线下载，过往消息，新闻额外消息，新闻对应长/短评论查看，主题日报列表，主题日报内容，热门消息，栏目总览，栏目具体消息，新闻的推荐者，某个专栏之前的新闻，Editor的主页等。 #非官方</p><p>知乎专栏(非官方) - 支持获取指定专栏的信息，指定专栏的文章列表，指定的文章内容，评论列表，点赞信息。 #非官方</p><p>新闻 &amp; 信息</p><p>BrewereyDB - BreweryDB 是一个包含啤酒厂, 啤酒, 啤酒活动和公会信息的数据库.</p><p>Diigo - Diigo API 允许你构建与 Diigo 服务交互的应用程序.</p><p>feedly - 访问 feedly 的 API.</p><p>Genius - Genius API 帮助维基百科建立世界上最伟大的公共知识项目.</p><p>goodreads - Goodreads API 允许开发人员访问 Goodreads 数据, 以帮助处理书籍的网站或应用程序更加个性化, 社交化和更具吸引力.</p><p>HackerNews - 官方 HN API 的文档和示例.</p><p>Inoreader - Inoreader API 允许你帮助用户订阅订阅源, 阅读文章或将其编目以供稍后查看.</p><p>Instapaper - Instapaper API 允许第三方应用程序将 URL 添加到 Instapaper.</p><p>Narro -访问文章和读物, 并代表客户提交.</p><p>Newsblur - NewsBlur 的 API 允许用户获取摘要, 摘要数量, 摘要图标, 内容分析和独立的摘要故事.</p><p>NPR - NPR 的 API 提供了一种灵活, 强大的方式来访问你最喜欢的 NPR 内容.</p><p>Pinboard - Pinboard API 是一种以编程方式与书签, 笔记和其他 Pinboard 数据进行交互的方式.</p><p>Pocket - 通过集成 Pocket API, 将『保存后使用』的功能带给用户和应用程序.</p><p>Product Hunt - 访问 producthunt.com 的 API.</p><p>纽约时报 - 访问『纽约时报』的 API.</p><p>今日美国 - 访问来自『今日美国』的新闻和有趣的故事.</p><p>今日热闻API：包含以下十四个新闻频道，可以获得文章的内容和图片。</p><p>（头条、新闻、财经、体育、娱乐、军事、教育、科技、NBA、股票、星座、女性、健康、育儿。）</p><p>游戏</p><p>暴雪 - Battle.net 是一个在线电子游戏网站, 其特点是由暴雪娱乐开发的游戏集合. 可用的 Battle.net API 包括 D3, WoW, SC2, 社区 API 和游戏数据 API.</p><p>部落冲突 - 部落冲突 API 提供了接近实时的游戏相关数据.</p><p>星战前夜 - EVE Online 是最受欢迎的科幻大型多人在线角色扮演游戏（MMORPG）之一. EVE Online CREST 和 XML API 提供了对角色, 行业, 市场, Solar System, 联盟和企业以及其他游戏数据的编程访问.</p><p>Facebook Games Services - Facebook Games Services 为游戏开发者提供了各种服务, 包括(但不限于) 成就 API, 分数 API, 应用通知, 请求, 游戏养成和 Facebook SDK for Unity.</p><p>Google Play Games Services - Google Developers Games 网站提供了各种 API, SDK 和服务, 包括(但不限于)游戏发布 API, Unity 插件, Play 游戏服务(成就, 排行榜, 玩家统计等)和 Google AdMob.</p><p>Riot Games - 为英雄联盟开发者社区提供安全可靠的游戏数据访问.</p><p>Steam Web APIs - Steam Web API 允许开发人员向 Steam 查询他们可以在自己的网站上展示的信息. 目前我们提供的唯一 API 提供了 Team Fortress 2 的项目数据, 但是这个列表将随着时间的推移而增长.</p><p>Giant Bomb - Giant Bomb API 提供了对 Giant Bomb 网站上的大量信息的程序化访问, 例如游戏名称, 评级, 视频, 公司, 主题, 流派等等。</p><p>笑话大全：<a href="https://www.apishop.net/#/api/detail/?productID=122" target="_blank" rel="noopener">https://www.apishop.net/#/api/detail/?productID=122</a></p><p>菜谱大全：<a href="https://www.apishop.net/#/api/detail/?productID=171" target="_blank" rel="noopener">https://www.apishop.net/#/api/detail/?productID=171</a></p><p>新华字典：<a href="https://apistore.eolinker.com/#/api/detail/?productID=98" target="_blank" rel="noopener">https://apistore.eolinker.com/#/api/detail/?productID=98</a></p><p>NBA赛事：<a href="https://www.apishop.net/#/api/detail/?productID=125" target="_blank" rel="noopener">https://www.apishop.net/#/api/detail/?productID=125</a></p><p>周公解梦：<a href="https://www.apishop.net/#/api/detail/?productID=126" target="_blank" rel="noopener">https://www.apishop.net/#/api/detail/?productID=126</a></p><p>电视节目：<a href="https://www.apishop.net/#/api/detail/?productID=129" target="_blank" rel="noopener">https://www.apishop.net/#/api/detail/?productID=129</a></p><p>炉石传说卡牌：<a href="https://www.apishop.net/#/api/detail/?productID=203" target="_blank" rel="noopener">https://www.apishop.net/#/api/detail/?productID=203</a></p><p>万智牌卡牌：<a href="https://www.apishop.net/#/api/detail/?productID=204" target="_blank" rel="noopener">https://www.apishop.net/#/api/detail/?productID=204</a></p><p>绕口令：<a href="https://www.apishop.net/#/api/detail/?productID=127" target="_blank" rel="noopener">https://www.apishop.net/#/api/detail/?productID=127</a></p><p>健身 &amp; 可穿戴</p><p>Adidas AG - 访问 Adidas AG 的 API.</p><p>Fitbit - Fitbit API 允许开发人员在自己的应用程序, 产品和服务中与 Fitbit 数据进行交互.</p><p>Jawbone UP - 利用步数, 运动, 食物和睡眠跟踪的力量建立自己的产品和体验.</p><p>Lifelog - 索尼的 Lifelog API使你可以安全地访问智能手机中的传感器和 SmartWear 设备收集到的用户的生活方式, 健身和健康数据. 利用它在你的应用程序或服务中创建的具有创造性的新用例.</p><p>Misfit - 你现在可以利用一整套工具将 Misfit 的活动跟踪, 睡眠跟踪和可穿戴控制功能集成到你的产品和服务中.</p><p>Nike+ - Nike Activity Services 会将用户活动汇总的详细信息返回给 Nike +. 例如, 用户的跑步细节, 如平均速度, 时间, 距离, 从他/她的 Nike + FuelBand 获得的 NikeFuel, 终身成就等等.</p><p>Recon - 访问 Recon instruments 的数据.</p><p>Strava - Strava V3 API 是一个公开可用的接口, 允许开发人员访问丰富的 Strava 数据集.</p><p>Withings - Withings API 允许开发人员利用 Withings 设备和 Withings 记录的数据创建应用程序.</p><p>音乐</p><p>Deezer - Deezer 是一种基于网络的音乐流服务.</p><p>豆瓣音乐 - 允许访问豆瓣音乐的数据.</p><p>考拉FM - 允许访问考拉 FM 的数据.</p><p>Last.fm - Last.fm API 允许任何人使用 Last.fm 数据创建他们自己的程序, 无论他们使用网络, 桌面还是移动设备上.</p><p>MusicGraph - 由 Senzari 推出的 MusicGraph API 是世界上第一个音乐知识引擎, 它将作为一个功能强大的『图形 API』的方式提供, 开发人员可以利用它来利用强大的音乐智能来增强其应用.</p><p>Musixmatch - 使用 Musixmatch API 将歌词带到你的应用程序中.</p><p>One Music - One Music API 能够提供令人惊讶的音乐范围的元数据, 因为它汇集了现有的, 维护良好的在线数据库.</p><p>蜻蜓FM - 允许访问蜻蜓 FM 的数据.</p><p>企鹅FM - 允许访问企鹅 FM 的数据.</p><p>SoundCloud - 允许用户在网络上上传和分享音乐.</p><p>Spotify - Spotify 的 Web API 可让你的应用程序从 Spotify 音乐目录获取数据, 并管理用户的播放列表和保存的音乐.</p><p>视频</p><p>Dailymotion - Dailymotion 是全球第二大视频托管平台.</p><p>豆瓣电影 - 电影数据.</p><p>Narrative - 自定义剪辑, 获取玩家, 徽章, 并与 Narrative API 一起玩耍.</p><p>爱奇艺 - 支持查询爱奇艺的数据.</p><p>乐视视频 - 允许查询, 上传, 下载等.</p><p>Rotten Tomatoes - Rotten Tomatoes API 提供了获得 Rotten Tomatoes 的评分和评论, 允许获得批准的公司和个人用 Rotten Tomatoes 数据丰富他们的应用和小部件.</p><p>搜狐视频 - 允许查询数据.</p><p>The Movie Database (TMDb) - The Movie Database 提供最受好评的电影, 即将到来的电影, 现在播放电影, 热门电影, 热门电视节目, 最受好评的电视节目, On the air 节目, Airing today TV shows, 热门人物等的接口.</p><p>Vimeo - 最受创作者支持的网络社区, 可以获得高质量的工具, 用于在没有广告的情况下以华丽的高清格式托管, 分享和流式传输视频.</p><p>Youtube - 将YouTube 的功能嵌入到你自己的网站和应用程序中.</p><p>优酷 - 允许上传, 下载, 登录等.</p><p>电影</p><p>豆瓣电影 - 豆瓣电影支持电影条目，影人条目，搜索和榜单等。</p><p>豆瓣电影(非官方) - 获取最近热映电影、短评、影评、图片等。 #非官方</p><p>猫眼电影(非官方) - 支持查询首页电影列表，电影详情(含评论)，本地影院和影院详情，选座。 #非官方</p><p>Time时光(非官方) - 支持获取时光网网站数据。 #非官方</p><p>V电影(非官方) - 支持获取V电影网站的数据。 #非官方</p><p>笔记</p><p>OneNote - OneNote支持获取，复制，创建，更新，导入与导出笔记，支持为笔记添加多媒体内容，管理权限等。提供SDK和Demo。</p><p>有道云笔记 -有道云笔记提供了Android SDK，同时Open API允许进行授权，用户，笔记本，笔记，分享，附件等方面的操作。</p><p>为知笔记 - 为知笔记Windows客户端开放了大量的API，其中绝大部分，都通过COM提供，可以在javascript, C#, C++, Delphi等语言中使用。接口通过IDL(Interface description language)语言描述。</p><p>印象笔记 - 印象笔记提供了ActionScript 3, Android, C++, Windows, iOS, Java, JavaScript, OS X, Perl, PHP, Python, Ruby等平台的SDK和完整的API参考文档，</p><p>翻译</p><p>百度翻译 - 支持多种语言之间的相互翻译.</p><p>Google Translate - 支持动态地翻译上千种语言间的相互翻译.</p><p>金山词霸 - 支持简单的翻译功能.</p><p>金山词霸(非官方) - 金山词霸允许进行简单的翻译操作。 #非官方</p><p>Microsoft Translator - 支持多种语言的基于云的机器翻译服务, 可达到全球国内生产总值 (GDP) 的95％以上.</p><p>牛津词典 - 访问牛津词典的 API.</p><p>扇贝 - 提供了完整的 API, 支持查询, 添加学习记录, 写笔记等.</p><p>Yandex Translate - 支持超过70种语言并且能够翻译单独的词语或完整的文本.</p><p>译云翻译 API - 支持几种语言之间的翻译.</p><p>有道翻译 - 支持简单的翻译操作.</p><p>有道词典(非官方) - 允许进行简单的翻译操作。 #非官方</p><p>必应词典 - 微软翻译API支持文字和语音两种类型，支持多种语言互相翻译，提供C#版本Demo。</p><p>必应词典(非官方) - 支持单词和语句翻译。 #非官</p><p>教育文化</p><p>成语大全：<a href="https://www.apishop.net/#/api/detail/?productID=93" target="_blank" rel="noopener">https://www.apishop.net/#/api/detail/?productID=93</a></p><p>新华字典：<a href="https://www.apishop.net/#/api/detail/?productID=98" target="_blank" rel="noopener">https://www.apishop.net/#/api/detail/?productID=98</a></p><p>汉语词典：<a href="https://www.apishop.net/#/api/detail/?productID=99" target="_blank" rel="noopener">https://www.apishop.net/#/api/detail/?productID=99</a></p><p>名言警句：<a href="https://www.apishop.net/#/api/detail/?productID=123" target="_blank" rel="noopener">https://www.apishop.net/#/api/detail/?productID=123</a></p><p>英语名言：<a href="https://www.apishop.net/#/api/detail/?productID=124" target="_blank" rel="noopener">https://www.apishop.net/#/api/detail/?productID=124</a></p><p>驾驶员从业资格题：<a href="https://www.apishop.net/#/api/detail/?productID=190" target="_blank" rel="noopener">https://www.apishop.net/#/api/detail/?productID=190</a></p><p>猫咪大全：<a href="https://www.apishop.net/#/api/detail/?productID=193" target="_blank" rel="noopener">https://www.apishop.net/#/api/detail/?productID=193</a></p><p>狗狗大全：<a href="https://www.apishop.net/#/api/detail/?productID=192" target="_blank" rel="noopener">https://www.apishop.net/#/api/detail/?productID=192</a></p><p>小型宠物大全：<a href="https://www.apishop.net/#/api/detail/?productID=195" target="_blank" rel="noopener">https://www.apishop.net/#/api/detail/?productID=195</a></p><p>水族宠物大全：<a href="https://www.apishop.net/#/api/detail/?productID=200" target="_blank" rel="noopener">https://www.apishop.net/#/api/detail/?productID=200</a></p><p>爬行类宠物大全：<a href="https://www.apishop.net/#/api/detail/?productID=201" target="_blank" rel="noopener">https://www.apishop.net/#/api/detail/?productID=201</a></p><p>植物大全：<a href="https://www.apishop.net/#/api/detail/?productID=199" target="_blank" rel="noopener">https://www.apishop.net/#/api/detail/?productID=199</a></p><p>旅游</p><p>携程 - 访问携程的数据.</p><p>艺龙 - 访问艺龙网的酒店和飞机票数据.</p><p>去哪儿 - 访问去哪儿网的酒店, 火车票, 飞机票和保险数据.</p><p>途牛 - 访问途牛的数据. 仅对供应商开放.</p><p>摄影</p><p>500px - 500px API 提供对 500px 功能和内容的编程访问.</p><p>Giphy - 世界上最大的 GIF 图片库.</p><p>Imgur - 使用 Imgur 的 RESTful API, 你可以做任何你能够在 imgur.com 网站做的事情.</p><p>Pixabay - pixabay API 是一个 RESTful 接口, 用于搜索和检索 Creative Commons CC0 下发布的 Pixabay 图像和视频.</p><p>Unsplash - 访问世界上最强大的图片引擎.</p><p>Unsplash It - 使用来自 unsplash 的优美的占位图.</p><p>Unsplash Resource - 一个用于嵌入 Unsplash 图片的简单 API.</p><p>社交</p><p>Disqus -Disqus 平台包含各种功能, 如社交整合, 社交网络, 用户档案, 垃圾邮件和审核工具, 分析, 电子邮件通知和移动评论.</p><p>豆瓣 - 访问图书, 电影, 音乐, 广播等内容.</p><p>Facebook - Facebook是一家美国营利性公司, 也是一家在线社交媒体和社交网络服务公司.</p><p>Flickr - 几乎是世界上最好的在线照片管理和共享的应用.</p><p>Foursquare - Foursquare API 让你可以访问我们的世界级的地点数据库, 并且可以与 Foursquare 用户和商家进行互动.</p><p>Instagram - 与朋友和家人用一种简单有趣并有创造性的方式来捕捉, 编辑, 分享照片, 视频和信息.</p><p>LinkedIn - 世界上最大的专业网络平台.</p><p>Pinterest - Pinterest API 使你能够访问用户的 Pinterest 数据, 喜欢他们的信息流, Pins, 关注者等.</p><p>Reddit - Reddit 是一个美国社交新闻聚合, 网上内容评分, 和讨论的网站.</p><p>Tumblr - Tumblr 是一个表达自我, 发现自我, 并与你喜爱的东西紧密相连的地方.</p><p>Twitter - 访问 Twitter 的数据.</p><p>微博 - 访问微博, 用户, 评论, 收藏等内容.</p><h2 id="四、企业金融"><a href="#四、企业金融" class="headerlink" title="四、企业金融"></a>四、企业金融</h2><p>Yelp - 访问 Yelp 的 API.</p><p>Zomato - Zomato API 使你能够访问全球10000个城市超过150万家餐厅的最新, 最详尽的信息.</p><p>购物</p><p>Amazon - 访问Amazon 的 API.</p><p>Best Buy -访问 Best Buy 的 APIs.</p><p>当当 - 访问当当网的 API.</p><p>eBay - 访问 eBay 的 API.</p><p>Home Depot - 访问 Home Depot 的API.</p><p>京东 - 访问京东的 API.</p><p>Semantics3 - 访问 Semantics3 的 RESTful API.</p><p>Slice - 访问 Slice 的 REST API.</p><p>淘宝 - 访问淘宝的 API.</p><p>电商</p><p>当当 - 当当允许商家用户和网站接入授权，可进行商品，订单，图片，问答，店铺和促销等方面的操作。</p><p>京东 - 京东提供了Java, PHP, .net的SDK，授权后可进行多种操作。</p><p>苏宁开放服务 - 苏宁提供了Java, PHP, .Net, Python版本的SDK，授权后可进行多种操作。</p><p>淘宝开放平台 - 淘宝提供了Java, .Net, PHP, Python版本的SDK，授权后提供多种操作。</p><p>亚马逊 - 亚马逊提供多种语言版本的SDK，授权后允许多种操作。</p><p>电商通 – 用友电商通对接淘宝、苏宁、京东、1号店API</p><p>支付</p><p>PayPal - 访问 PayPal REST API.</p><p>Paymill - 访问完整的 API 参考, 获得你需要知道引入 PAYMILL 相关的任何信息。</p><p>Paytm - 访问你需要使用的 API 的详细信息, 使用 Paytm Wallet 在你的应用/网站上进行付款, 并处理与付款相关的操作问题(例如: 退款, 交易状态检查).</p><p>WePay - WePay 专为平台, 如市场, 众筹网站和小型商业工具而设计. 可获得无缝的用户体验和防欺诈保护.</p><p>金融服务</p><p>汇率查询：提供币种查询、汇率转换、中国银行汇率查询、十大银行实时汇率查询</p><p>银行网点及联行号查询：支持72家银行网点相关信息查询</p><p>股票预期共识数据：覆盖了几乎所有券商机构的分析报告，分别计算了各个券商机构相同股票净利润、EPS、营业利润、营业收入预测值的简单平均值，并将机构和时间的量化后再进行加权计算分别得到了其最终的预测数据值。</p><p>金属矿产_现货价格：金属矿产现货价格动态详情</p><p>虚拟货币交易行情、区块链今日快讯</p><p>企业服务</p><p>企业工商信息查询：提供企业工商信息查询功能，主要查询企业的企业名称、统一社会信用代码、工商注册号、注册地址、营业状态、企业类型、注册时间、法人、注册资金、经营期限、注册机构、行业、经营范围、官网、邮箱、电话、税号等数据。</p><p>企业开票税号查询：可以查到公司纳税人识别号、注册地址等开发票需要的详细信息。</p><p>上市企业查询：查询新三板、上海A股、上海B股、深圳A股、深圳B股企业信息，根据关键字查询上市公司信息。</p><p>全国五级行政区划查询：最新全国省、市、县行政区域信息，未包括我国台湾省、香港特别行政区、澳门特别行政区。</p><p>实名认证</p><p>手机号三要素实名认证：手机号、姓名和身份证号，认证信息是否匹配。数据来自公安部，实时核查，比较靠谱的接口</p><p>身份证二要素实名认证：快速验证姓名与身份证号的真实性和一致性</p><p>识别图片身份证信息：从身份证图片中识别出身份证信息</p><p>银行卡三要素实名认证：银行卡号、持卡人姓名、持卡人身份证号，验证此三种信息是否一致，可快速校验个人身份信息，数据来自公安部和银联中心</p><p>图片与图像处理</p><p>别样网 - 无版权免费大尺寸图片共享平台。</p><p>Camera360 - 支持全帧率直播美白滤镜，提供SDK和Demo。</p><p>嗨图 - 支持图片标注，仅提供iOS版本SDK。</p><p>名片全能王 - 支持精准识别几十种语言的名片，自动切边并美化名片图像，自动返回识别结果，提供多种版本SDK，收费。</p><p>pixabay - 在所有的图像和视频Pixabay释放自由版权下创作共用CC0。你可以下载、修改、分发，并使用它们在任何你喜欢的任何东西，即使在商业应用程序中使用它们。不需要归属权。</p><p>企业证件识别 - 支持身份证，驾驶证，护照等，收费。</p><p>扫描全能王 - 支持图像智能剪裁，五种图像增强模式，手动调节图像细节，自动返回扫描结果等，提供iOS与Android版本SDK，收费。</p><p>我知图 - 支持相似图像搜索，图像识别匹配，图像识别关键词推荐，重复图片探测等内容。</p><p>图片隐写术-图片版权保护API，图片水印加密技术，处理后的图片看上去没有任何变化，但是实际上图片已经拥有了自己的唯一标识</p><p>工作</p><p>Airtable - Airtable Standard API 允许你创建, 读取, 更新和销毁记录.</p><p>Buffer - The Buffer API 提供了访问用户的待发送和已发送的更新内容, 社交媒体资料, 定时访问和更多内容.</p><p>Concur Labs - 访问 Concur 的 RESTful API.</p><p>Envoy - 访问 Envoy 的 API.</p><p>JotForm - JotForm API 可以在不使用JotForm 网站的情况下连接到你的表单数据.</p><p>MailChimp - 访问 MailChimp 的 API.</p><p>Pruvan - 访问 Pruvan 的 API.</p><p>Quip - Quip REST API 让你实现流程自动化, 并将Quip 与你或你公司使用的其他产品集成在一起.</p><p>Salesforce - 访问 Salesforce 的 API.</p><p>Square - Square 提供简单的信用卡处理和针对各类业务的完整解决方案.</p><p>Wolfram Data Drop - 访问 Wolfram Data Drop 的 RESTful API.</p><p>五、通讯服务</p><p>短信API</p><p>在各大网站或APP，用户注册、修改密码等涉及到个人隐私的操作时，都离不开短信验证码。 平时也收到不少的商家促销短信、还有通知短信等等，这些都可以通过短信服务的API实现。</p><p>短信API ：短信验证码、通知短信等；支持虚拟运营商号段，保证短信发送不间断</p><p>短信API接口【营销类】：适用于产品推广、活动宣传等营销类使用场景</p><p>短信API接口【金融类】：适用于金融行业产品营销、客户关怀、投资提醒等场景 </p><p>语音验证码：通过电话获取语音验证码，杜绝恶意注册，确保用户真实性。适用于用户注册、手机绑定、安全登录、身份验证、找回密码、支付认证等场景</p><p>IP地址、域名查询：可查询到IP地址、域名的地理位置。地理位置精确到省、市、区。手机号归属地：能根据手机号查询到手机号所在的省份和城市、该手机号属于哪种运营商，是移动，电信或者联通，该手机号码所在地区的身份证号前几位，例如，云南昆明的身份证号前几位为：530000。</p><p>邮编查询：查询该地区的邮政编码。</p><p>邮件</p><p>Context.IO - Context.IO 是一个现代的, 可扩展的电子邮件 API, 简化了电子邮件数据的处理.</p><p>Gmail - 现代, 简单, 快速, RESTful.</p><p>Inbox - Inbox 提供了用于与邮件提供商合作的现代 RESTful API. 停止与旧的协议角力, 专注于构建伟大的应用程序.</p><p>Mandrill - Mandrill 就像 MailChimp, 适用于应用程序. 发送交易性的, 易于触发和个性化的电子邮件, 然后跟踪结果.</p><p>Outlook Mail - Outlook Mail API允许你阅读, 创建和发送消息和附件, 查看和响应事件消息, 以及管理由 Office 365中的 Azure Active Directory 保护的文件夹. 它还在 Microsoft 帐户中专门提供了与这些域中相同的功能: Hotmail.com, Live.com, MSN.com, Outlook.com 和 Passport.com.</p><p>通信</p><p>Cisco Spark - 创建一个房间, 邀请他人, 搜索公司里的人, 将信息发布到一个房间, 获取房间历史记录, 或者在他人发布新信息时实时通知他们.</p><p>Dingtalk - 访问 Dingtalk 的 API.</p><p>dondeEsta Family - 访问 dondeEsta family 的 API.</p><p>Fleep - Fleep是所有团队和项目的使者.</p><p>GroupMe - GroupMe API 使你能够使用群组消息传递功能来增强现有的应用程序, 创建有趣的新体验, 或者只是为现有的群组添加一些调味品.</p><p>indoona - 基于 HTTPS 的 The indoona RESTful API 使你能够: 给 indoona 用户和群组发送信息, 创建特定的联系人地址簿使 indoona 用户能够与你的应用聊天.</p><p>LINE - LINE是一款免费应用, 用于在智能手机, 平板电脑和个人电脑等电子设备上进行即时通讯.</p><p>MessageBird - MessageBird API 将你的网站或应用程序连接到世界各地的运营商. 使用API, 你可以集成短信, 聊天和语音.</p><p>Slack - Slack是基于云的专有团队协作工具和服务.</p><p>Telegram - The Bot API 允许你轻松创建使用 Telegram 消息作为接口的应用. The Telegram API 允许你建立自己的定制 Telegram 客户端.</p><p>Yo - Yo 是最简单的通知平台.</p><p>消息推送</p><p>百度云推送 - 支持iOS, Android和服务器端，支持推送，统计，组管理等Rest API接口。服务器端支持Java, Python, PHP, REST API。提供所支持各语言版本的SDK。</p><p>华为推送 - 支持Android，提供SDK。</p><p>极光 - 支持Android, iOS, WindowsPhone, 服务器端REST API, 提供Java, Python, PHP, Ruby, C#, Node.js等版本的SDK。</p><p>LeanCloud - 支持Android, iOS, WindowsPhone和Web网页推送，使用云引擎和JavaScript创建推送，使用REST API推送消息。提供Objectvie-C(开放源码), JavaScript(开放源码), Android, Unity, .Net, WindowsPhone, Java(开放源码), Python(开放源码), PHP(开放源码), C++(开放源码), Swift(开放源码)版本SDK。同时提供Demo。</p><p>腾讯信鸽 - 支持iOS和Android平台，服务器端采用Rest API, 同时服务器端支持Java, PHP, Python等语言并提供SDK。</p><p>小米 - 支持Android和iOS平台，服务器端支持Java, Python并提供SDK。</p><p>友盟 - 支持Android和iOS平台，服务器端支持PHP, Java, Python并提供SDK。</p><h2 id="六、交通出行"><a href="#六、交通出行" class="headerlink" title="六、交通出行"></a>六、交通出行</h2><p>快递查询</p><p>Trackingmore - Trackingmore目前支持400多家国内外快递商，免费版有使用次数限制。</p><p>全国快递物流查询 - 提供包括申通、顺丰、圆通、韵达、中通、汇通等国内快递公司在内的百家快递物流单号查询，免费版有使用次数限制。</p><p>AfterShip - 支持超过200家物流公司的物流跟踪和通知.</p><p>Aramex - 通过全球物流提供商网络提供包裹, 快递和货运服务.</p><p>Canada Post - 允许电子商务解决方案提供商和在线商家将加拿大邮政服务(如邮寄,评级和跟踪数据)整合到平台或网站中.</p><p>DHL - DHL XML 服务为开发者提供了整合 DHL 来自140多个国家的服务可用性, 运输时间, 费率, 物流跟踪以及更多功能的能力.</p><p>FedEx - FedEx 网络服务允许企业将 FedEx 的运输功能集成到他们现有的仓库管理系统中, 无需现场托管。</p><p>UPS - 提供了将 UPS 的运输功能集成到网站和企业应用程序的能力.</p><p>出行服务</p><p>公交及站点查询：<a href="https://apistore.eolinker.com/#/api/detail/?productID=77" target="_blank" rel="noopener">https://apistore.eolinker.com/#/api/detail/?productID=77</a></p><p>经纬度地址转换：<a href="https://apistore.eolinker.com/#/api/detail/?productID=78" target="_blank" rel="noopener">https://apistore.eolinker.com/#/api/detail/?productID=78</a></p><p>中国省市区查询：<a href="https://apistore.eolinker.com/#/api/detail/?productID=75" target="_blank" rel="noopener">https://apistore.eolinker.com/#/api/detail/?productID=75</a></p><p>全国油价查询：<a href="https://apistore.eolinker.com/#/api/detail/?productID=82" target="_blank" rel="noopener">https://apistore.eolinker.com/#/api/detail/?productID=82</a></p><p>POI检索：<a href="https://apistore.eolinker.com/#/api/detail/?productID=97" target="_blank" rel="noopener">https://apistore.eolinker.com/#/api/detail/?productID=97</a></p><p>公交、地铁路线规划查询：<a href="https://apistore.eolinker.com/#/api/detail/?productID=105" target="_blank" rel="noopener">https://apistore.eolinker.com/#/api/detail/?productID=105</a></p><p>车型大全：<a href="https://apistore.eolinker.com/#/api/detail/?productID=117" target="_blank" rel="noopener">https://apistore.eolinker.com/#/api/detail/?productID=117</a></p><p>火车票查询：<a href="https://www.apishop.net/#/api/detail/?productID=91" target="_blank" rel="noopener">https://www.apishop.net/#/api/detail/?productID=91</a></p><p>长途汽车查询：<a href="https://www.apishop.net/#/api/detail/?productID=100" target="_blank" rel="noopener">https://www.apishop.net/#/api/detail/?productID=100</a></p><p>汽车尾号限行：<a href="https://www.apishop.net/#/api/detail/?productID=194" target="_blank" rel="noopener">https://www.apishop.net/#/api/detail/?productID=194</a></p><p>驾考题库：<a href="https://www.apishop.net/#/api/detail/?productID=187" target="_blank" rel="noopener">https://www.apishop.net/#/api/detail/?productID=187</a></p><p>共享汽车</p><p>Lyft - 允许访问实时 ETA, 可用性, 价格估计, 乘坐状态等数据.</p><p>神州租车 - 来自中国的共享汽车公司.</p><p>Uber - 允许定制旅行体验, 请求出行, 后勤保障, 创建机器人等等.</p><p>滴滴 - 滴滴提供了iOS和Android SDK, 可实现拉起滴滴叫车等方面的操作。</p><p>地图</p><p>百度地图 - 百度地图提供了Android, iOS版本的SDK和JavaScript API，可进行定位、地图、数据、出行、鹰眼轨迹和分析服务。</p><p>高德地图 - 高德地图提供了JavaScript和web服务API，Android和iOS SDK，支持地图，定位，搜索，路线规划，导航和室内地图等。</p><p>腾讯地图 - 腾讯地图提供了JavaScript API，Android和iOS SDK，支持定位，地图，地点搜索，路线和导航等。</p><p>天地图 - 天地图提供了H5 API和JavaScript API等web API，同时提供了Android和iOS SDK，支持基础地图服务，图层管理，地图覆盖物，地图工具，地名搜索和出行规划服务。</p><p>图吧地图 - 图吧提供了JavaScript和Flash API，Android和iOS SDK，支持定位，地址解析，位置标注，位置截图，路线规划，周边查询，兴趣点搜索和在线导航。</p><p>地图</p><p>高德地图 - 访问高德地图的 Web API.</p><p>百度地图 - 访问百度地图的 Web API.</p><p>必应地图 - 访问必应地图的 API.</p><p>Google Maps - Google Maps web Service 是一个 Google 服务的 HTTP 接口集合, 为你的地图应用程序提供地理数据.</p><p>Here Maps - 使用简单的 HTTP GET 方法提供地图, 路由, 地理编码, 地点, 定位, 交通, 过境和天气信息.</p><p>腾讯地图 - 访问腾讯地图的 WebService API.</p><p>即时通讯</p><p>环信 - 支持Android, iOS, WebIM, Linux, REST集成，支持多种消息类型。</p><p>融云 - 支持Android, iOS, Web, 游戏集成，支持多种消息类型。</p><p>网易云信 - 支持IM实时通讯，实时音视频，教学白班，专线电话，短信，聊天室，提供iOS, Android, Windows和Web SDK。</p><p>腾讯云通信IM - 提供iOS, Android, Windows和Web SDK，支持多种消息类型。</p><p>旅游</p><p>12306(非官方) - 支持获取12306火车票票数、票价查询。 #非官方</p><p>去哪儿 - 支持获取去哪儿网的内容。</p><p>途牛 - 支持途牛网的内容，仅开放给供应商系统。</p><p>途牛火车票(非官方) - 支持获取途牛火车票票数、票价查询。 #非官方</p><p>携程 - 支持携程网的内容。</p><p>艺龙 - 支持获取产品数据，完成用户的预订，进行订单查询、更改或取消。提供在线工具，以及H5, Java, C#, PHP, Ruby版本的Demo。</p><h2 id="七、技术开发"><a href="#七、技术开发" class="headerlink" title="七、技术开发"></a>七、技术开发</h2><p>用友云</p><p>阿里云</p><p>百度云</p><p>Bmob</p><p>Google Cloud Platform</p><p>LeanCloud</p><p>Oracle Cloud</p><p>七牛</p><p>腾讯云</p><p>云存储</p><p>Amazon Cloud Drive - 借助 Amazon Cloud Drive 最新的 RESTful API 和 Android 与 iOS SDK, Amazon Drive 正转向为受邀的开发者提供服务, 以确保他们能够为其所支持的使用案例提供始终如一的可用云盘服务。</p><p>Box - 支持搜索, 元数据, 粒度权限模型, 企业级安全, 保留策略, 120种类型的文件预览功能.</p><p>Digital Ocean - 在55秒内部署SSD云服务器.</p><p>Document Cloud - DocumentCloud 运行在你通过 OpenCalais 上传的每一份文件中, 为你提供有关人员, 地点和组织的广泛信息.</p><p>Dropbox - 为和文件相关的应用提供了一个强大的 API.</p><p>Google Drive- Google Drive API 允许你从移动设备和网络应用中读取, 写入和同步存储在 Google Drive 中的文件.</p><p>OneDrive - 访问 OneDrive 中的文件.</p><p>QNAP - 借助 QNAP 开发工具包(API 和 SDK), 开发人员可以设计能在客户端设备(如智能手机或 PC)上运行的应用, 并远程管理和访问存储在NAS上的文件和文档。</p><p>Verizon Cloud - 上传, 检索和管理大量数据, 通过 API 调用访问数据, 查看预先打包的报告, 依靠 Verizon 的安全措施保证数据安全和随时可用.</p><p>开发者网站</p><p>Coding - 授权后可访问<a href="http://coding.net网站的内容。" target="_blank" rel="noopener">http://coding.net网站的内容。</a></p><p>干货集中营 - 提供妹子图和Android, iOS, 前端，拓展资源等内容。</p><p>diycode - 授权后可访问diycode网站的内容。</p><p>开源中国 - 授权后可访问开源中国网站的内容。</p><p>Laravel China - 授权后可访问 Laravel China 网站的内容。</p><p>Ruby China - 授权后可访问Ruby China网站的内容。</p><p>V2EX - 可访问V2EX网站的内容。</p><p>开发工具</p><p>四位图片验证码生成：<a href="https://www.apishop.net/#/api/detail/?productID=102" target="_blank" rel="noopener">https://www.apishop.net/#/api/detail/?productID=102</a></p><p>六位图片验证码生成：<a href="https://www.apishop.net/#/api/detail/?productID=101" target="_blank" rel="noopener">https://www.apishop.net/#/api/detail/?productID=101</a></p><p>中文分词：<a href="https://www.apishop.net/#/api/detail/?productID=120" target="_blank" rel="noopener">https://www.apishop.net/#/api/detail/?productID=120</a></p><p>二维码编解码：<a href="https://www.apishop.net/#/api/detail/?productID=128" target="_blank" rel="noopener">https://www.apishop.net/#/api/detail/?productID=128</a></p><p>网站排名查询：<a href="https://www.apishop.net/#/api/detail/?productID=214" target="_blank" rel="noopener">https://www.apishop.net/#/api/detail/?productID=214</a></p><p>设计</p><p>Dribbble - 访问 Bucket, 项目, 作品, 团队, 用户和工作等数据.</p><p>Behance - 获取项目, 可关注的广告素材, 创意领域, 用户, 收藏等信息.</p><p>deviantART - 允许获取 deviantart.com 的数据.</p><p>开发</p><p>ARTIK Cloud - ARTIK Cloud API 提供访问 ARTIK Cloud 平台的数据.</p><p>AT&amp;T M2X - M2X 的 RESTful API 简化了设备和 M2X 服务之间的连接, 使你能够构建利用时间序列数据分析和分布式的高可用性时间序列数据存储的应用程序和服务, 为你的客户和最终用户提供有意义的信息, 并构建物联网和 M2M 解决方案, 而无需管理自己的存储基础架构.</p><p>Bitbucket - Bitbucket 是一个基于 Web 的托管服务, 由 Atlassian 拥有, 用于使用 Mercurial 或 Git 版本控制系统的源代码和开发项目.</p><p>bitly - bitly是一种最简单, 最有趣的方式来保存, 分享和发现来自网络的链接.</p><p>Buddy - Buddy 是一个持续集成服务. 它支持 GitHub, Bitbucket 和 Gitlab 项目. 自动化 Web 和 Docker 应用程序的生命周期: 构建, 测试和部署.</p><p>Bugzilla - Bugzilla 是一个基于 Web 的通用的错误追踪器和测试工具, 最初由 Mozilla 项目开发和使用, 并在 Mozilla Public License 下获得许可.</p><p>CircleCI - CircleCI API 是一个 RESTful, 全功能的 API, 允许你访问所有信息并触发 CircleCI 中的所有操作.</p><p>Coding - 访问 <a href="https://coding.net/" target="_blank" rel="noopener">https://coding.net/</a> 的 API.</p><p>diycode - 访问 <a href="https://www.diycode.cc/" target="_blank" rel="noopener">https://www.diycode.cc/</a> 的 API.</p><p>干活集中营 - 访问 <a href="http://gank.io/" target="_blank" rel="noopener">http://gank.io/</a> 的 API.</p><p>GitHub - 世界上领先的软件开发平台.</p><p>Gitter - GitHub 的聊天工具.</p><p>GitLab - 通过一个简单而强大的 API 自动化 GitLab.</p><p>Google Play Developer - Google Play Developer API 允许你执行大量的发布和应用程序管理任务。</p><p>IPInfo.io - 使用ipinfo.io IP查找API快速简单地将IP地理位置集成到你的脚本或网站。</p><p>Laravel China - 访问 <a href="https://laravel-china.org/" target="_blank" rel="noopener">https://laravel-china.org/</a> 的 API.</p><p>openHAB - openHAB 的 REST API 服务于不同的目标. 它可用于将 openHAB 与其他系统集成, 因为它允许读取项目和项目状态以及状态更新或发送项目命令. 此外, 它还提供对站点地图的访问, 因此它是远程用户界面(例如胖客户端或完全基于 Javascript 的 Web 客户端)使用的接口.</p><p>开源中国 - 访问 <a href="https://oschina.net/" target="_blank" rel="noopener">https://oschina.net/</a> 的 API.</p><p>Particle - Particle Cloud API 是一个 REST API.</p><p>QR Code Generator - 你可以使用 QR 码生成器 Web API 在 api.qrserver.com 上生成和解码/读取 QR 码图形.</p><p>Ruby China - 访问 <a href="https://ruby-china.org/" target="_blank" rel="noopener">https://ruby-china.org/</a> 的 API.</p><p>StackExchange 访问 Stack Exchange API.</p><p>SVN - 文档涵盖了 Subversion 库提供的公共 API. 它主要面向程序员, 无论是从事 Subversion 本身的开发人员, 还是希望使用这些 API 的第三方应用程序开发人员.</p><p>TravisCI - 这是官方 Travis CI Web 界面使用的 API, 因此 web 界面所能做的所有事情都可以通过 API 完成.</p><p>V2EX - 访问 <a href="https://www.v2ex.com/" target="_blank" rel="noopener">https://www.v2ex.com/</a> 的 API.</p><p>W3C - 作为对 W3C 社区的开发人员要求与 W3C 的数据进行交互的要求的相应, W3C Systems 团队开发了一个 Web API. 通过它, 规格, 群组, 组织和用户的数据变得可用. W3C API 是基于 JSON 格式的仅针对公开数据的只读 Web API.</p><p>ZenHub - ZenHub 是唯一的原生集成在 GitHub 接口中的项目管理工具.</p><p>物联网</p><p>Automatic - 为和 Automatic 数据交互提供了 REST API, 实时事件 API 和 流式 API.</p><p>Amazon Alexa - 利用 Alexa Voice Service API, 开发人员可以通过话筒和扬声器为连接的产品提供语音功能.</p><p>Google Assistant - Actions on Google 允许你为 Google Assistant 创建应用.</p><p>Home8 - 100％无线物联网系统, Home8 简化了智能报警系统的 DIY 安装, 同时为你提供最佳的视频认证报警保护.</p><p>Homey - 访问 Homey 的 API.</p><p>HP Print - 访问 HP Print 的 API.</p><p>LIFX - LIFX 是一款多色智能 WiFi LED 灯泡. LIFX HTTP API 允许你通过互联网控制 LIFX 设备, 并且是与 LIFX 设备交互的REST API.</p><p>LightwaveRF - 该 API 概述了 LightwaveRF 系统当前正在使用的本地命令协议.</p><p>microBees - 轻松执行 REST API 并订阅实时消息.</p><p>Mojio - 使用 REST 节点进行请求和响应类型集成, 使用 PUSH API 来实时推送数据.</p><p>myStrom - myStrom WLAN Energy Control Switch 提供了一个 REST API, 允许你从 myStrom 独立的本地网络直接访问/控制交换机.</p><p>Neurio - Neurio 是一个带有公共 API 的开放平台, 所以你可以任意扩展它. 将其连接到 Web 服务, 或编写自己的应用程序.</p><p>Philips Hue - 飞利浦的 Hue 连接的灯泡和桥接器让你能够完全控制你的照明.</p><p>Smappee - 使用 Smappee 的 API, 可以帮助你测量电能消耗和太阳能生产量.</p><p>SmartThins - 访问 SmartThings 的 API.</p><p>Stack Lighting - Stack API 是一个 REST API, 它定义了一组允许开发人员执行请求并通过 HTTP 协议接收响应的函数. 该 API 为开发人员提供了控制亮度, 色温, 运动设置, 环境光线感应设置以及其他功能的功能, 以根据个人喜好调整 Stack 响应式照明.</p><p>Vinli - Vinli 是一个用于简单快速地构建车联网应用的平台.</p><p>Yeelight - Yeelight 智能 LED 产品支持通过 WiFi 远程控制.</p><p>机器学习</p><p>Amazon Machine Learning - Amazon Machine Learning 使开发人员可以轻松构建智能应用程序, 包括欺诈检测, 需求预测, 有针对性的市场营销和点击预测等.</p><p>BigML - BigML 平台具有异常检测, 聚类分析, 用于决策树的 SunBurst 可视化, 文本分析等功能.</p><p>Diffbot - Diffbot 平台利用 AI, 计算机视觉, 机器学习和自然语言处理的组合, 自动从网页(如文本, 图像, 视频, 产品信息和评论)提取数据.</p><p>Google Cloud Prediction - Google Cloud Prediction API 提供了一个 RESTful API 来构建机器学习模型. Prediction 的基于云的机器学习工具可以帮助你分析数据, 为你的应用程序添加各种功能, 如客户情绪分析, 垃圾邮件检测, 推荐系统等.</p><p>IBM Watson - 允许开发人员构建利用机器学习技术的应用程序, 如自然语言处理, 计算机视觉和预测.</p><p>Microsoft Azure Machine Learning - Microsoft Azure 机器学习平台提供自然语言处理, 推荐引擎, 模式识别, 计算机视觉和预测建模等功能.</p><p>图灵聊天机器人：<a href="http://doc.tuling123.com/openapi2/263611" target="_blank" rel="noopener">http://doc.tuling123.com/openapi2/263611</a></p><p>团队协作</p><p>Asana - 允许你以编程方式更新和访问平台上的大部分数据.</p><p>join.me - join.me 是一个在线会议工具, 让人们可以一起完成伟大的事情.</p><p>Teambition - Teambition 的 Open Platform 提供用于获取数据的完整开放 API 集. 根据项目数据构建应用程序将充分利用你的协作数据, 如项目跟踪, 数据挖掘等.</p><p>TeamSnap - 使用世界上最好的团队管理解决方案来支持你的用户.</p><p>Trello - Trello 是一个基于 Web的项目管理应用程序.</p><p>Worktile - 访问 Worktile 的 API.</p><p>文本分析</p><p>BosonNLP - 中文文本分析.</p><p>腾讯文智 - 中文文本分析.</p><p>Text Analytics API - The Text Analytics API 是一套文本分析 Web 服务, 使用最佳的 Microsoft 机器学习算法构建.</p><p>Watson Natural Language Understanding - Watson 的 Natural Language Understanding 使用自然语言处理来分析任何文本的语义特征.</p><p>待办</p><p>Beeminder - 访问 Beeminder 的 API.</p><p>FollowUp.cc - 访问 FollowUp.cc 的 API.</p><p>Todoist - Todoist API (也称为『Sync API』) 专门用于客户端(例如移动应用程序)和 Todoist 之间的高效数据同步.</p><p>Toodledo - Toodledo API 可以自由使用, 并提供对用户的任务, 笔记, 大纲和列表的访问.</p><p>语音分析</p><p>百度语音 - 访问百度的语音分析 REST API.</p><p>Cloud Speech API - Google Cloud Speech API 使开发人员能够通过在易于使用的 API 中应用强大的神经网络模型, 将音频转换为文本.</p><p>语义识别</p><p>BosonNLP玻森 - 支持REST API并提供Python SDK。</p><p>腾讯文智 - 支持词法类，句法类，篇章类，下载类API，目前平台能识别类别囊括了求职招聘、影视、音乐、健康养生、财经、广告推广、犯罪、政治等90多个类别，且算法支持快速迭代更新已有类别及增加新类别。提供Python SDK。</p><p>语音识别</p><p>百度语音 - 支持全平台REST API, 离线在线融合模式，深度语义解析，场景识别定制，自定义上传语料、训练模型，基础服务永久免费。提供相应SDK和Demo应用。</p><p>搜狗语音云开放平台 - 支持在线/离线语音识别，在线听歌识曲，离线语音合成等内容。提供相应平台SDK。</p><p>讯飞开放平台 - 支持语音听写/转写，在线/离线命令词识别，语音唤醒等内容，平台支持广泛，提供相应SDK。</p><p>人工智能</p><p>百度AI开放平台：涵盖图像处理、自然语言、语音技术、知识图谱、数据智能、AR、视频技术和深度学习八大方面。看需选择即可。</p><p>人脸识别Face++ 注：申请试用的API Key可以免费</p><p>OCR-身份证识别：<a href="https://www.apishop.net/#/api/detail/?productID=186" target="_blank" rel="noopener">https://www.apishop.net/#/api/detail/?productID=186</a></p><p>OCR-营业执照识别：<a href="https://www.apishop.net/#/api/detail/?productID=196" target="_blank" rel="noopener">https://www.apishop.net/#/api/detail/?productID=196</a></p><p>OCR-行驶证识别：<a href="https://www.apishop.net/#/api/detail/?productID=197" target="_blank" rel="noopener">https://www.apishop.net/#/api/detail/?productID=197</a></p><p>银行卡识别：验证身份真实性</p><p>名片识别：<a href="https://www.apishop.net/#/api/detail/?productID=206" target="_blank" rel="noopener">https://www.apishop.net/#/api/detail/?productID=206</a></p><p>车牌识别：<a href="https://www.apishop.net/#/api/detail/?productID=207" target="_blank" rel="noopener">https://www.apishop.net/#/api/detail/?productID=207</a></p><p>《机动车合格证》二维码解码：<a href="https://www.apishop.net/#/api/detail/?productID=216" target="_blank" rel="noopener">https://www.apishop.net/#/api/detail/?productID=216</a></p><p>综合</p><p>用友APILink- 提供中国可用的API，金融企业和生活相关，支持免费试用。</p><p>阿里大于 - 提供中国可用的 API .</p><p>Amazon Developer - 允许构建有关 Amazon 的应用与游戏, Alexa, AWS, Amazon 服务与 API 以及 Amazon 设备的软件。</p><p>APiX - 提供中国可用的信用相关的 API.</p><p>阿凡达数据 - 提供中国可用的 API .</p><p>百度API STORE - 提供中国可用的 API .</p><p>Google API Library - Google API Library 包含100多个 API, 例如 Google Cloud API, Google Maps API, Google Apps API, 移动 API, 社交媒体 API, Youtube API, 广告 API 以及其他受欢迎的 API.</p><p>HaoService - 提供中国可用的 API .</p><p>iTunes Search API - 允许在网站中放置搜索字段以搜索 iTunes Store, App Store, iBooks Store 和 Mac App Store 中的内容.</p><p>Microsoft Developer - 访问 Microsoft 的公共 API.</p><p>ProgrammableWeb - 关于 API 的新闻和信息的主要来源, 记录全球 API 经济的发展, 提供网络最依赖的 API 目录.</p><p>Yahoo! Developer Network - Yahoo Developer Network 为开发者提供了用于简化构建, 宣传, 增强应用的API 和 工具. 和 Yahoo 一起赚钱</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;【史上最全】国内外常用精品API汇总&quot;&gt;&lt;a href=&quot;#【史上最全】国内外常用精品API汇总&quot; class=&quot;headerlink&quot; title=&quot;【史上最全】国内外常用精品API汇总&quot;&gt;&lt;/a&gt;【史上最全】国内外常用精品API汇总&lt;/h1&gt;&lt;p&gt;API是获取
      
    
    </summary>
    
    
      <category term="API" scheme="http://yoursite.com/tags/API/"/>
    
  </entry>
  
  <entry>
    <title>mysql表设计的常用类型</title>
    <link href="http://yoursite.com/2019/02/18/mysql%E8%A1%A8%E8%AE%BE%E8%AE%A1%E7%9A%84%E5%B8%B8%E7%94%A8%E7%B1%BB%E5%9E%8B/"/>
    <id>http://yoursite.com/2019/02/18/mysql表设计的常用类型/</id>
    <published>2019-02-18T07:25:43.000Z</published>
    <updated>2019-02-18T07:26:00.531Z</updated>
    
    <content type="html"><![CDATA[<h1 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h1><ol><li>整数类型，tinyint、smallint、mediumint、int、bigint</li><li>实数类型，float、double</li><li>字符串类型，varhcar、char</li><li>时间类型，datetime、timestamp</li></ol><h2 id="1-整数类型，tinyint、smallint、mediumint、int、bigint"><a href="#1-整数类型，tinyint、smallint、mediumint、int、bigint" class="headerlink" title="1. 整数类型，tinyint、smallint、mediumint、int、bigint"></a>1. 整数类型，tinyint、smallint、mediumint、int、bigint</h2><p>如果需要保存整数（不含小数），可以选择tinyint、smallint、mediumint、int、bigint，它们的范围如下图：</p><p><img src="https://images2015.cnblogs.com/blog/463931/201704/463931-20170413212438439-303077088.png" alt="在这里插入图片描述"><br>另外，一些小知识：</p><p>整形的计算是使用64位的bigint进行计算的<br>如果为整形指定长度，并不会限制其大小范围，只是影响显示，其存储与计算与其它长度的整形一致</p><h2 id="2-实数类型，float、double"><a href="#2-实数类型，float、double" class="headerlink" title="2. 实数类型，float、double"></a>2. 实数类型，float、double</h2><p>如果仅为了存储，不作精确的计算，可用float和double，它们的计算结果并不是精确的，只是近似计算，是CPU直接的原生浮点计算，效率比较高，但不精确。</p><p>如果需要精确计算，则可以用decimal，但存储成本和计算成本比float和double高。</p><h2 id="3-字符串类型，varhcar、char"><a href="#3-字符串类型，varhcar、char" class="headerlink" title="3. 字符串类型，varhcar、char"></a>3. 字符串类型，varhcar、char</h2><p>它们的主要区别在于varhcar是变长的，char是定长的。</p><p>在记录的字符串长度不一，或最大的字符串长度大于字符串平均长度时，使用varchar非常合适<br>记录可知的定长的字符串，用char就合适了</p><h2 id="4-时间类型，datetime、timestamp"><a href="#4-时间类型，datetime、timestamp" class="headerlink" title="4. 时间类型，datetime、timestamp"></a>4. 时间类型，datetime、timestamp</h2><p>datetime将时间数据年月日时分秒内部存储为整数类型，它需要8字节的空间。<br>timestamp记录GTM 2017-01-01至今的秒数，使用4字节的空间。它的缺点是时间范围只能到2038年，另外，它依赖与时区，时区的变更会使时间变得不同。<br>timestamp更小，但有缺点，主要取决于这些缺点是否影响到你的程序。<br>另外，使用timestamp需注意一点是，我在使用工具创建一个表时，创建时没有特别设置“默认值”、“非空”、“更新”等属性，但timestamp会设置“默认值”为“CURRENT_TIMESTAMP”，“非空”，和“自动更新”。（究竟是工具的行为还是MySQL的行为我没有考究，大家引起注意这点，不要因此导致业务异常）：<br><img src="https://images2015.cnblogs.com/blog/463931/201704/463931-20170413213652361-685673570.png" alt="在这里插入图片描述"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;目录&quot;&gt;&lt;a href=&quot;#目录&quot; class=&quot;headerlink&quot; title=&quot;目录&quot;&gt;&lt;/a&gt;目录&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;整数类型，tinyint、smallint、mediumint、int、bigint&lt;/li&gt;
&lt;li&gt;实数类型，float、d
      
    
    </summary>
    
    
      <category term="mysql" scheme="http://yoursite.com/tags/mysql/"/>
    
  </entry>
  
  <entry>
    <title>python3_time.sleep用法</title>
    <link href="http://yoursite.com/2019/02/18/python3-time-sleep%E7%94%A8%E6%B3%95/"/>
    <id>http://yoursite.com/2019/02/18/python3-time-sleep用法/</id>
    <published>2019-02-18T07:24:10.000Z</published>
    <updated>2019-02-18T07:25:01.096Z</updated>
    
    <content type="html"><![CDATA[<h4 id="sleep-方法暂停给定秒数后执行程序。该参数可以是一个浮点数来表示一个更精确的睡眠时间。"><a href="#sleep-方法暂停给定秒数后执行程序。该参数可以是一个浮点数来表示一个更精确的睡眠时间。" class="headerlink" title="sleep() 方法暂停给定秒数后执行程序。该参数可以是一个浮点数来表示一个更精确的睡眠时间。"></a>sleep() 方法暂停给定秒数后执行程序。该参数可以是一个浮点数来表示一个更精确的睡眠时间。</h4><p>实际中止时间可能不到所请求的，因为任何捕获信号将终止 sleep()接下来执行该信号捕捉的程序。<br>语法</p><h3 id="以下是sleep-方法的语法："><a href="#以下是sleep-方法的语法：" class="headerlink" title="以下是sleep()方法的语法："></a>以下是sleep()方法的语法：</h3><p>time.sleep(t)<br>参数 t – 这是要暂停执行的秒数。 返回值<br>此方法不返回任何值。<br>示例</p><h3 id="下面的示例说明-sleep-方法的使用。"><a href="#下面的示例说明-sleep-方法的使用。" class="headerlink" title="下面的示例说明 sleep()方法的使用。"></a>下面的示例说明 sleep()方法的使用。</h3><p>#!/usr/bin/python3<br>import time</p><p>print (“Start : %s” % time.ctime())<br>time.sleep( 5 )<br>print (“End : %s” % time.ctime())</p><p>当我们运行上面的程序，它会产生以下结果：<br>Start : Mon Feb 15 12:08:42 2016<br>End : Mon Feb 15 12:08:47 2016</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;sleep-方法暂停给定秒数后执行程序。该参数可以是一个浮点数来表示一个更精确的睡眠时间。&quot;&gt;&lt;a href=&quot;#sleep-方法暂停给定秒数后执行程序。该参数可以是一个浮点数来表示一个更精确的睡眠时间。&quot; class=&quot;headerlink&quot; title=&quot;sl
      
    
    </summary>
    
    
      <category term="python" scheme="http://yoursite.com/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>如何区分静态和动态网页</title>
    <link href="http://yoursite.com/2019/02/18/%E5%A6%82%E4%BD%95%E5%8C%BA%E5%88%86%E9%9D%99%E6%80%81%E5%92%8C%E5%8A%A8%E6%80%81%E7%BD%91%E9%A1%B5/"/>
    <id>http://yoursite.com/2019/02/18/如何区分静态和动态网页/</id>
    <published>2019-02-18T07:22:53.000Z</published>
    <updated>2019-02-18T07:23:12.968Z</updated>
    
    <content type="html"><![CDATA[<h3 id="静态页面，动态页面主要根据页面制作的语言来区分："><a href="#静态页面，动态页面主要根据页面制作的语言来区分：" class="headerlink" title="静态页面，动态页面主要根据页面制作的语言来区分： 　　"></a>静态页面，动态页面主要根据页面制作的语言来区分： 　　</h3><p>静态页面运用语言：HTML（超文本符号语言）或XML（可扩展符号语言） 　　动态页面运用语言：HTML＋ASP 或HTML+ASP.NET或 HTML＋PHP 或 HTML＋JSP 等。</p><h3 id="静态页面与动态的区别"><a href="#静态页面与动态的区别" class="headerlink" title="静态页面与动态的区别"></a>静态页面与动态的区别</h3><p>　 　程序是否在服务器端运转，是重要标志。在服务器端运转的程序、页面、组件，属于动态页面，它们会随不同客户、不同时间，返回不同的页面，例如ASP、PHP、JSP、ASP.net、CGI等。运转于客户端的程序、页面、插件、组件，属于静态页面，例如html页、Flash、JavaScript、VBScript等等，它们是永久不变的。 　　</p><pre><code>静态页面和动态页面各有特点，网站选用动态页面还是静态页面主要取决于网站的功能需求和网站内容的多少，如果网站功能比较简单，内容更新量不是很大，选用纯静态页面的方法会更简单，反之通常要选用动态页面技能来完成。 　　静态页面是网站建设的基础，静态页面和动态页面之间也并不矛盾，为了网站适应搜索引擎检索的需求，即使选用动态网站技能，也可以将页面内容转化为静态页面发布。</code></pre><h2 id="网站设计中，纯粹HTML格式的页面通常被称为“静态页面”，早期的网站通常都是由静态页面制作的。"><a href="#网站设计中，纯粹HTML格式的页面通常被称为“静态页面”，早期的网站通常都是由静态页面制作的。" class="headerlink" title="网站设计中，纯粹HTML格式的页面通常被称为“静态页面”，早期的网站通常都是由静态页面制作的。 　"></a>网站设计中，纯粹HTML格式的页面通常被称为“静态页面”，早期的网站通常都是由静态页面制作的。 　</h2><p>　 ### 静态页面的网址方式通常为： 　　<br>      也就是以.htm、.html、.shtml、.xml等为后后缀的。在HTML格式的页面上，也可以出现各种动态的效果，如.GIF格式的动画、FLASH、翻滚字母等，这些“动态效果”仅仅视觉上的，与下面将要介绍的动态页面是不同的概念。</p><p>　 　我们将静态页面的特点简要归纳如下： 　　<br>（1）静态页面每个页面都有一个固定的URL，且页面URL以.htm、.html、.shtml等常见方式为后缀，而不含有“？”； 　　</p><p>（2）页面内容一经发布到网站服务器上，无论是否有用户访问，每个静态页面的内容都是保存在网站服务器上的，也就是说，静态页面是实实在在保存在服务器上的文件，每个页面都是一个独立的文件； 　　（3）静态页面的内容相对稳定，因此容易被搜索引擎检索； 　　</p><p>（4）静态页面没有数据库的支持，在网站制作和维护方面工作量较大，因此当网站信息量很大时完全依靠静态页面制作方法比较困难； 　　</p><p>（5）静态页面的交互性穿插，在功能方面有较大的限制 　　好像看懂了,第一看后缀名,第二看是否能与服务器发作交互行为 　　静态页面是相对于动态页面而言，是指没有后台数据库、不含程序和不行交互的页面。你编的是什么它显现的就是什么、不会有任何改动。</p><pre><code>静态页面相对更新起来比较费事，适用于通常更新较少的展示型网站。另外,如果扩展名为.asp但却没有连数据库,完全是静态的页面,那也是静态网站.仅仅.asp扩展名。</code></pre><h3 id="动态页面的通常特点简要归纳如下："><a href="#动态页面的通常特点简要归纳如下：" class="headerlink" title="动态页面的通常特点简要归纳如下： 　　"></a>动态页面的通常特点简要归纳如下： 　　</h3><p>（1）动态页面以数据库技能为基础，可以大大下降网站维护的工作量； 　　</p><p>（2）选用动态页面技能的网站可以完成更多的功能，如用户注册、用户登录、在线调查、用户管理、订单管理等等； 　　</p><p> (3）动态页面实际上并不是独立存在于服务器上的页面文件，只有当用户请求时服务器才返回一个完整的页面； 　　</p><p>（4）动态页面中的“？”对搜索引擎检索存在一定的问题，搜索引擎通常不行能从一个网站的数据库中访问全部页面，或者出于技能方面的考虑，搜索蜘蛛不去抓取网址中“？”后面的内容，因此选用动态页面的网站在进行搜索引擎推广时需求做一定的技能处理才能适应搜索引擎的要求.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;静态页面，动态页面主要根据页面制作的语言来区分：&quot;&gt;&lt;a href=&quot;#静态页面，动态页面主要根据页面制作的语言来区分：&quot; class=&quot;headerlink&quot; title=&quot;静态页面，动态页面主要根据页面制作的语言来区分： 　　&quot;&gt;&lt;/a&gt;静态页面，动态页面主要
      
    
    </summary>
    
    
      <category term="http" scheme="http://yoursite.com/tags/http/"/>
    
  </entry>
  
  <entry>
    <title>简单认识docker</title>
    <link href="http://yoursite.com/2019/02/18/%E7%AE%80%E5%8D%95%E8%AE%A4%E8%AF%86docker/"/>
    <id>http://yoursite.com/2019/02/18/简单认识docker/</id>
    <published>2019-02-18T07:21:03.000Z</published>
    <updated>2019-02-18T07:22:14.587Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://img-blog.csdn.net/20180703103434279?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3ZpdGFhaXI=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt="img"></p><h1 id="1-Docker溯源"><a href="#1-Docker溯源" class="headerlink" title="1.Docker溯源"></a>1.Docker溯源</h1><p>　　Docker的前身是名为dotCloud的小公司，主要提供的是基于 PaaS（Platform as a Service，平台及服务）平台为开发者或开发商提供技术服务，并提供的开发工具和技术框架。因为其为初创的公司，又生于IT行业，dotCloud受到了IBM，亚马逊，google等公司的挤压，发展举步维艰。于是，在2013年dotCloud 的创始人，年仅28岁的Solomon Hykes做了一个艰难的决定：将dotCloud的核心引擎开源！然而一旦这个基于 LXC（Linux Container）技术的核心管理引擎开源，dotCloud公司就相当于走上了一条”不归路”。可正是这个孤注一掷的举动，却带来了全球技术人员的热潮，众程序员惊呼：太方便了，太方便了。也正是这个决定，让所有的IT巨头也为之一颤。一个新的公司也随之出世，它就是：Docker。可以说，Docker是一夜成名的！！</p><h1 id="2-Docker认识"><a href="#2-Docker认识" class="headerlink" title="2.Docker认识"></a>2.Docker认识</h1><h2 id="2-1镜像，容器，仓库"><a href="#2-1镜像，容器，仓库" class="headerlink" title="2.1镜像，容器，仓库"></a>2.1镜像，容器，仓库</h2><p>　　首先，需要了解一下几个概念：镜像，容器，仓库</p><p>镜像（image）：Docker 镜像就是一个只读的模板，镜像可以用来创建 Docker 容器。Docker 提供了一个很简单的机制来创建镜像或者更新现有的镜像，用户甚至可以直接从其他人那里下载一个已经做好的镜像来直接使用。镜像是一种文件结构。Dockerfile中的每条命令都会在文件系统中创建一个新的层次结构，文件系统在这些层次上构建起来，镜像就构建于这些联合的文件系统之上。Docker官方网站专门有一个页面来存储所有可用的镜像，网址是：index.docker.io。</p><p>容器（ Container）：容器是从镜像创建的运行实例。它可以被启动、开始、停止、删除。每个容器都是相互隔离的、保证安全的平台。可以把容器看做是一个简易版的 Linux 环境，Docker 利用容器来运行应用。</p><p>仓库：仓库是集中存放镜像文件的场所，仓库注册服务器（Registry）上往往存放着多个仓库，每个仓库中又包含了多个镜像，每个镜像有不同的标签（tag）。目前，最大的公开仓库是 Docker Hub，存放了数量庞大的镜像供用户下载。</p><h2 id="2-2Docker定义"><a href="#2-2Docker定义" class="headerlink" title="2.2Docker定义"></a>2.2Docker定义</h2><p>Docker 是一个开源的应用容器引擎，让开发者可以打包他们的应用以及依赖包到一个可移植的容器中，然后发布到任何流行的 Linux 机器上。Docker是一个重新定义了程序开发测试、交付和部署过程的开放平台，Docker则可以称为构建一次，到处运行，这就是Docker提出的”Build once，Run anywhere”</p><p>　　Docker仓库用来保存我们的images，当我们创建了自己的image之后我们就可以使用push命令将它上传到公有或者私有仓库，这样下次要在另外一台机器上使用这个image时候，只需要从仓库上pull下来就可以了。注意：Docker不是容器，而是管理容器的引擎！</p><p>Docker中文手册上解释说：Docker是一个开源的引擎，可以轻松的为任何应用创建一个轻量级的、可移植的、自给自足的容器。开发者在笔记本上编译测试通过的容器可以批量地在生产环境中部署，包括VMs（虚拟机）、bare metal、OpenStack 集群和其他的基础应用平台。</p><p>　　从这里我们可以看出，Docker并非是容器，而是管理容器的引擎。Docker是为应用打包、部署的平台，而非单纯的虚拟化技术。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;img src=&quot;https://img-blog.csdn.net/20180703103434279?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3ZpdGFhaXI=/font/5a6L5L2T/fontsize/40
      
    
    </summary>
    
    
      <category term="docker" scheme="http://yoursite.com/tags/docker/"/>
    
  </entry>
  
  <entry>
    <title>mongo常用命令</title>
    <link href="http://yoursite.com/2019/02/18/mongo%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/"/>
    <id>http://yoursite.com/2019/02/18/mongo常用命令/</id>
    <published>2019-02-18T07:17:28.000Z</published>
    <updated>2019-02-18T07:18:17.534Z</updated>
    
    <content type="html"><![CDATA[<h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><h2 id="查看服务"><a href="#查看服务" class="headerlink" title="查看服务"></a>查看服务</h2><p>tasklist /FI “IMAGENAME eq mongod.exe”</p><h3 id="启动服务"><a href="#启动服务" class="headerlink" title="启动服务"></a>启动服务</h3><p>mongod –config “C:\Program Files\Mongodb\Server\4.0.4\mongod.conf”</p><h3 id="注册到windows服务中"><a href="#注册到windows服务中" class="headerlink" title="注册到windows服务中"></a>注册到windows服务中</h3><p>mongod –install –config “C:\Program Files\Mongodb\Server\4.0.4\mongod.conf”</p><p>重新开启一个命令行窗口 输入 mongo 连接服务</p><p>mongod –dbpath “C:\Program Files\Mongodb\Server\4.0.4\data”<br>–logpath “C:\Program Files\Mongodb\Server\4.0.4\log\mongodb.log” –logappend)</p><h3 id="连接服务"><a href="#连接服务" class="headerlink" title="连接服务"></a>连接服务</h3><h1 id="mongo-命令"><a href="#mongo-命令" class="headerlink" title="mongo 命令"></a>mongo 命令</h1><p>show dbs;                  #查看全部数据库</p><p>show collections;          #显示当前数据库中的集合（类似关系数据库中的表）</p><p>show users;                #查看当前数据库的用户信息</p><p>use <db name="">;             #切换数据库跟mysql一样</db></p><p>db;或者db.getName();        #查看当前所在数据库</p><p>db.help();                 #显示数据库操作命令，里面有很多的命令<br>db.foo.help();             #显示集合操作命令，同样有很多的命令，foo指的是当前数据库下，一个叫foo的集合，并非真正意义上的命令<br>db.foo.find();             #对于当前数据库中的foo集合进行数据查找（由于没有条件，会列出所有数据）<br>db.foo.find( { a : 1 } );  #对于当前数据库中的foo集合进行查找，条件是数据中有一个属性叫a，且a的值为1<br>复制代码</p><p>创建一个test数据库例子：</p><p>复制代码</p><blockquote><p>use test;             #创建数据库<br>switched to db test<br>db;<br>test<br>show dbs;           #检查数据库<br>admin 0.000GB<br>local 0.000GB</p></blockquote><blockquote><p>db.test.insert({“_id”:”520”,”name”:”xiaoming”})         #创建表</p></blockquote><p>WriteResult({ “nInserted” : 1 })</p><blockquote><p>db.createUser({user:”xiaoming”,pwd:”123456”,roles:[{role:”userAdmin”,db:”test”}]})        #创建用户<br>Successfully added user: {<br>“user” : “xiaoming”,<br>“roles” : [<br>{<br>“role” : “userAdmin”,<br>“db” : “test”<br>}<br>]<br>}<br>db.removeUser(“userName”);         #删除用户<br>show users;                        #显示当前所有用户<br>复制代码<br>db.dropDatabase();   #删除当前使用数据库</p></blockquote><p>复制代码</p><blockquote><p>show dbs;<br>admin 0.000GB<br>local 0.000GB<br>test 0.000GB<br>test_1 0.000GB</p></blockquote><blockquote><p>db;<br>test_1</p></blockquote><blockquote><p>db.dropDatabase();<br>{ “dropped” : “test_1”, “ok” : 1 }</p></blockquote><blockquote><p>show dbs;<br>admin 0.000GB<br>local 0.000GB<br>test 0.000GB<br>复制代码<br>db.stats();             #显示当前db状态</p></blockquote><p>复制代码</p><blockquote><p>db.stats();<br>{<br>  “db” : “test_1”,<br>  “collections” : 0,<br>  “views” : 0,<br>  “objects” : 0,<br>  “avgObjSize” : 0,<br>  “dataSize” : 0,<br>  “storageSize” : 0,<br>  “numExtents” : 0,<br>  “indexes” : 0,<br>  “indexSize” : 0,<br>  “fileSize” : 0,<br>  “ok” : 1<br>}<br>复制代码<br>db.version();         #当前db版本</p></blockquote><blockquote><p>db.version();<br>3.4.10<br>db.getMongo();     #查看当前db的链接机器地址</p></blockquote><blockquote><p>db.getMongo();<br>connection to 172.16.40.205:27017<br>开启远程访问</p></blockquote><p>复制代码<br>编辑配置文件：vi /etc/mongod.conf<br>bindIp: 172.16.40.205      #数据库所在服务器IP地址<br>保存重启数据库！<br>本地登录：mongo 172.16.40.205/admin -uadmin -p123456<br>远程登录：</p><ol><li>下载mongodb压缩包<br>mongodb-linux-x86_64-3.4.10.tgz</li><li>解压<blockquote><p>tar zxvf mongodb-linux-x86_64-3.4.10.tgz</p></blockquote></li><li>进入bin目录<blockquote><p>cd mongodb-linux-x86_64-3.4.10/bin</p></blockquote></li><li>连接远程数据库<blockquote><p>./mongo 172.16.40.205:27017/admin  -u user  -p  password<br>复制代码</p></blockquote><h3 id="查看服务-1"><a href="#查看服务-1" class="headerlink" title="查看服务"></a>查看服务</h3>tasklist /FI “IMAGENAME eq mongod.exe”</li></ol><h3 id="启动服务-1"><a href="#启动服务-1" class="headerlink" title="启动服务"></a>启动服务</h3><p>mongod –config “C:\Program Files\Mongodb\Server\4.0.4\mongod.conf”</p><h3 id="注册到windows服务中-1"><a href="#注册到windows服务中-1" class="headerlink" title="注册到windows服务中"></a>注册到windows服务中</h3><p>mongod –install –config “C:\Program Files\Mongodb\Server\4.0.4\mongod.conf”</p><p>重新开启一个命令行窗口 输入 mongo 连接服务</p><p>mongod –dbpath “C:\Program Files\Mongodb\Server\4.0.4\data”<br>–logpath “C:\Program Files\Mongodb\Server\4.0.4\log\mongodb.log” –logappend)</p><h3 id="连接服务-1"><a href="#连接服务-1" class="headerlink" title="连接服务"></a>连接服务</h3>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;安装&quot;&gt;&lt;a href=&quot;#安装&quot; class=&quot;headerlink&quot; title=&quot;安装&quot;&gt;&lt;/a&gt;安装&lt;/h1&gt;&lt;h2 id=&quot;查看服务&quot;&gt;&lt;a href=&quot;#查看服务&quot; class=&quot;headerlink&quot; title=&quot;查看服务&quot;&gt;&lt;/a&gt;查看服务&lt;/h
      
    
    </summary>
    
    
      <category term="mongo" scheme="http://yoursite.com/tags/mongo/"/>
    
  </entry>
  
  <entry>
    <title>git常用命令</title>
    <link href="http://yoursite.com/2019/02/18/git%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/"/>
    <id>http://yoursite.com/2019/02/18/git常用命令/</id>
    <published>2019-02-18T07:15:39.000Z</published>
    <updated>2019-02-18T07:16:08.885Z</updated>
    
    <content type="html"><![CDATA[<h1 id="git常用命令："><a href="#git常用命令：" class="headerlink" title="git常用命令："></a>git常用命令：</h1><p>git init //初始化本地git环境<br>git clone XXX//克隆一份代码到本地仓库<br>git pull //把远程库的代码更新到工作台<br>git pull –rebase origin master //强制把远程库的代码跟新到当前分支上面<br>git fetch //把远程库的代码更新到本地库<br>git add . //把本地的修改加到stage中<br>git commit -m ‘comments here’ //把stage中的修改提交到本地库<br>git push //把本地库的修改提交到远程库中<br>git branch -r/-a //查看远程分支/全部分支<br>git checkout master/branch //切换到某个分支<br>git checkout -b test //新建test分支<br>git checkout -d test //删除test分支<br>git merge master //假设当前在test分支上面，把master分支上的修改同步到test分支上<br>git merge tool //调用merge工具<br>git stash //把未完成的修改缓存到栈容器中<br>git stash list //查看所有的缓存<br>git stash pop //恢复本地分支到缓存状态<br>git blame someFile //查看某个文件的每一行的修改记录（）谁在什么时候修改的）<br>git status //查看当前分支有哪些修改<br>git log //查看当前分支上面的日志信息<br>git diff //查看当前没有add的内容<br>git diff –cache //查看已经add但是没有commit的内容<br>git diff HEAD //上面两个内容的合并<br>git reset –hard HEAD //撤销本地修改<br>echo $HOME //查看git config的HOME路径<br>export $HOME=/c/gitconfig //配置git config的HOME路径</p><h1 id="团队协作git操作流程："><a href="#团队协作git操作流程：" class="headerlink" title="团队协作git操作流程："></a>团队协作git操作流程：</h1><p>克隆一个全新的项目，完成新功能并且提交：<br>git clone XXX //克隆代码库<br>git checkout -b test //新建分支<br>modify some files //完成修改<br>git add . //把修改加入stage中<br>git commit -m ‘’ //提交修改到test分支<br>review代码<br>git checkout master //切换到master分支<br>git pull //更新代码<br>git checkout test //切换到test分支<br>git meger master //把master分支的代码merge到test分支<br>git push origin 分支名//把test分支的代码push到远程库<br>目前正在test分支上面开发某个功能，但是没有完成。突然一个紧急的bug需要处理<br>git add .<br>git stash<br>git checkout bugFixBranch<br>git pull –rebase origin master<br>fix the bug<br>git add .<br>git commit -m ‘’<br>git push<br>git checkout test<br>git stash pop<br>continue new feature’s development</p><h1 id="git工作视图"><a href="#git工作视图" class="headerlink" title="git工作视图"></a>git工作视图</h1><p><img src="https://images2015.cnblogs.com/blog/54367/201612/54367-20161209083626991-1934605466.png" alt="在这里插入图片描述"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;git常用命令：&quot;&gt;&lt;a href=&quot;#git常用命令：&quot; class=&quot;headerlink&quot; title=&quot;git常用命令：&quot;&gt;&lt;/a&gt;git常用命令：&lt;/h1&gt;&lt;p&gt;git init //初始化本地git环境&lt;br&gt;git clone XXX//克隆一份代码
      
    
    </summary>
    
    
      <category term="git" scheme="http://yoursite.com/tags/git/"/>
    
  </entry>
  
  <entry>
    <title>码云生成公钥</title>
    <link href="http://yoursite.com/2019/02/18/%E7%A0%81%E4%BA%91%E7%94%9F%E6%88%90%E5%85%AC%E9%92%A5/"/>
    <id>http://yoursite.com/2019/02/18/码云生成公钥/</id>
    <published>2019-02-18T07:13:16.000Z</published>
    <updated>2019-02-18T07:15:24.101Z</updated>
    
    <content type="html"><![CDATA[<h2 id="clone工程有两种："><a href="#clone工程有两种：" class="headerlink" title="clone工程有两种："></a>clone工程有两种：</h2><p>1）HTTPS (pull和push的时候需要密码)</p><p>2）SSH （不需要密码，但是需要创建公钥）</p><p>创建公钥的目的： </p><p>使用SSH公钥可以让你在你的电脑和码云通讯的时候使用安全连接（git的remote要使用SSH地址）</p><p>步骤：</p><p>1.打开终端（git）进入.ssh目录</p><p>cd ~/.ssh    </p><p>如果.ssh文件夹不存在，执行指令自动创建</p><p>mkdir ~/.ssh</p><p>2.生成RSA密钥对</p><p>ssh-keygen -t rsa -C “你的邮箱@xxx.com”</p><p>为了方便全程回车即可（不用输入ras文件名及密码）</p><h1 id="Generating-public-private-rsa-key-pair…"><a href="#Generating-public-private-rsa-key-pair…" class="headerlink" title="Generating public/private rsa key pair…"></a>Generating public/private rsa key pair…</h1><h1 id="三次回车即可生成-ssh-key"><a href="#三次回车即可生成-ssh-key" class="headerlink" title="三次回车即可生成 ssh key"></a>三次回车即可生成 ssh key</h1><p>3.查看公钥内容</p><p>cat ~/.ssh/id_rsa.pub</p><p>4.将公钥内容（全部）复制并粘贴（注意：公钥内容以ssh-rsa开头）</p><p>粘贴地址   <a href="https://gitee.com/profile/sshkeys" target="_blank" rel="noopener">https://gitee.com/profile/sshkeys</a></p><p>5.添加公钥完成后进行测试公钥</p><p>测试SSH链接</p><p>ssh -T <a href="mailto:git@gitee.com" target="_blank" rel="noopener">git@gitee.com</a></p><p>当终端提示welcome to Gitee.com,yourname!表示链接成功</p><h2 id="至此以后只要拷贝ssh链接地址，然后利用git指令即可进行相关操作！"><a href="#至此以后只要拷贝ssh链接地址，然后利用git指令即可进行相关操作！" class="headerlink" title="至此以后只要拷贝ssh链接地址，然后利用git指令即可进行相关操作！"></a>至此以后只要拷贝ssh链接地址，然后利用git指令即可进行相关操作！</h2>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;clone工程有两种：&quot;&gt;&lt;a href=&quot;#clone工程有两种：&quot; class=&quot;headerlink&quot; title=&quot;clone工程有两种：&quot;&gt;&lt;/a&gt;clone工程有两种：&lt;/h2&gt;&lt;p&gt;1）HTTPS (pull和push的时候需要密码)&lt;/p&gt;
&lt;p&gt;
      
    
    </summary>
    
    
      <category term="git" scheme="http://yoursite.com/tags/git/"/>
    
  </entry>
  
  <entry>
    <title>正则表示式中re.S和小括号的作用</title>
    <link href="http://yoursite.com/2019/02/18/%E6%AD%A3%E5%88%99%E8%A1%A8%E7%A4%BA%E5%BC%8F%E4%B8%ADre-S%E5%92%8C%E5%B0%8F%E6%8B%AC%E5%8F%B7%E7%9A%84%E4%BD%9C%E7%94%A8/"/>
    <id>http://yoursite.com/2019/02/18/正则表示式中re-S和小括号的作用/</id>
    <published>2019-02-18T07:10:42.000Z</published>
    <updated>2019-02-18T07:12:14.119Z</updated>
    
    <content type="html"><![CDATA[<h1 id="正则表达式中的小括号用法"><a href="#正则表达式中的小括号用法" class="headerlink" title="正则表达式中的小括号用法"></a>正则表达式中的小括号用法</h1><p>小括号中的连续字符作为可选：</p><p>“Nov” -match “\bNov(ember)?\b”  返回true   </p><p>“November” -match “\bNov(ember)?\b”   返回true   </p><h3 id="正则表达式中的小括号的作用是对字符进行分组，并保存匹配的文本。与位于小括号之间的模式匹配的内容都会被捕获"><a href="#正则表达式中的小括号的作用是对字符进行分组，并保存匹配的文本。与位于小括号之间的模式匹配的内容都会被捕获" class="headerlink" title="正则表达式中的小括号的作用是对字符进行分组，并保存匹配的文本。与位于小括号之间的模式匹配的内容都会被捕获"></a>正则表达式中的小括号的作用是对字符进行分组，并保存匹配的文本。与位于小括号之间的模式匹配的内容都会被捕获</h3><p>“92/01/2009Description”  -match “^(\d)(\d)” </p><p>返回值为9 ，2</p><p><img src="https://images0.cnblogs.com/blog/235279/201408/291441490329077.jpg" alt="在这里插入图片描述"></p><p>当小括号中的内容不是想捕获的对象时，即小括号的内容不作为捕获对象，采用非捕获小括号可以提高匹配效率。</p><p>“92/01/2009Description”  -match “^(\d)(?:\d)”</p><p>返回值为9<br><img src="https://images0.cnblogs.com/blog/235279/201408/291443212989923.jpg" alt="在这里插入图片描述"></p><p>“92/01/2009Description”  -match “^(?:\d)(?:\d)”</p><p>返回 2<br><img src="https://images0.cnblogs.com/blog/235279/201408/291444223767164.jpg" alt="在这里插入图片描述"></p><p>为每个子表达式定义名称：</p><p>“92/01/2009Description”  -match “^(?<first>\d)(?<second>\d)” </second></first></p><p>$matches.first   #返回9<br><img src="https://images0.cnblogs.com/blog/235279/201408/291447424857228.jpg" alt="在这里插入图片描述"></p><p>()小括号就是括号内看成一个整体 ，将基本的单元合成一个大的单元。括号匹配字符串，并记住匹配结果，匹配结果则保存在结果数组中。如果只是用它来做分组，方法是在左括号的后边加上:?，这里第一个圆括弧只是用来分组，而不会占用捕获变量。<br><img src="https://images0.cnblogs.com/blog/235279/201408/251727167358016.jpg" alt="在这里插入图片描述"></p><p>中括号就是匹配括号内的其中一个。</p><p>大括号就是匹配几次</p><p>| 表示 或    例：”Bob and Ted” -match “Alice|Bob”  返回true    </p><p>　　　　　　   “Peter and Bob” -match “and (Bob|Willy)”  返回true   </p><h1 id="Python正则表达式中的re-S的作用"><a href="#Python正则表达式中的re-S的作用" class="headerlink" title="Python正则表达式中的re.S的作用"></a>Python正则表达式中的re.S的作用</h1><p>在Python的正则表达式中，有一个参数为re.S。它表示“.”（不包含外侧双引号，下同）的作用扩展到整个字符串，包括“\n”。看如下代码：</p><p>复制代码<br>import re<br>a = ‘’’asdfhellopass:<br>​    123<br>​    worldaf<br>​    ‘’’<br>b = re.findall(‘hello(.<em>?)world’,a)<br>c = re.findall(‘hello(.</em>?)world’,a,re.S)<br>print ‘b is ‘ , b<br>print ‘c is ‘ , c<br>复制代码<br>运行结果如下：</p><p>b is  []<br>c is  [‘pass:\n\t123\n\t’]</p><h3 id="正则表达式中，“-”的作用是匹配除“-n”以外的任何字符，也就是说，它是在一行中进行匹配。这里的“行”是以“-n”进行区分的。a字符串有每行的末尾有一个“-n”，不过它不可见。"><a href="#正则表达式中，“-”的作用是匹配除“-n”以外的任何字符，也就是说，它是在一行中进行匹配。这里的“行”是以“-n”进行区分的。a字符串有每行的末尾有一个“-n”，不过它不可见。" class="headerlink" title="正则表达式中，“.”的作用是匹配除“\n”以外的任何字符，也就是说，它是在一行中进行匹配。这里的“行”是以“\n”进行区分的。a字符串有每行的末尾有一个“\n”，不过它不可见。"></a>正则表达式中，“.”的作用是匹配除“\n”以外的任何字符，也就是说，它是在一行中进行匹配。这里的“行”是以“\n”进行区分的。a字符串有每行的末尾有一个“\n”，不过它不可见。</h3><p>如果不使用re.S参数，则只在每一行内进行匹配，如果一行没有，就换下一行重新开始，不会跨行。而使用re.S参数以后，正则表达式会将这个字符串作为一个整体，将“\n”当做一个普通的字符加入到这个字符串中，在整体中进行匹配。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;正则表达式中的小括号用法&quot;&gt;&lt;a href=&quot;#正则表达式中的小括号用法&quot; class=&quot;headerlink&quot; title=&quot;正则表达式中的小括号用法&quot;&gt;&lt;/a&gt;正则表达式中的小括号用法&lt;/h1&gt;&lt;p&gt;小括号中的连续字符作为可选：&lt;/p&gt;
&lt;p&gt;“Nov” -m
      
    
    </summary>
    
    
      <category term="爬虫" scheme="http://yoursite.com/tags/%E7%88%AC%E8%99%AB/"/>
    
  </entry>
  
  <entry>
    <title>常用浏览器User_Agent大全</title>
    <link href="http://yoursite.com/2019/02/18/%E5%B8%B8%E7%94%A8%E6%B5%8F%E8%A7%88%E5%99%A8User-Agent%E5%A4%A7%E5%85%A8/"/>
    <id>http://yoursite.com/2019/02/18/常用浏览器User-Agent大全/</id>
    <published>2019-02-18T07:08:42.000Z</published>
    <updated>2019-02-18T07:09:09.955Z</updated>
    
    <content type="html"><![CDATA[<h1 id="常见浏览器User-Agent大全"><a href="#常见浏览器User-Agent大全" class="headerlink" title="常见浏览器User-Agent大全"></a>常见浏览器User-Agent大全</h1><p>下面是工作中需要用到的常见浏览器User-Agent字符串的收集整理，不断更新中。</p><h2 id="Opera"><a href="#Opera" class="headerlink" title="Opera"></a>Opera</h2><p>Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/39.0.2171.95 Safari/537.36 OPR/26.0.1656.60<br>Opera/8.0 (Windows NT 5.1; U; en)<br>Mozilla/5.0 (Windows NT 5.1; U; en; rv:1.8.1) Gecko/20061208 Firefox/2.0.0 Opera 9.50<br>Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.1; en) Opera 9.50</p><h2 id="Firefox"><a href="#Firefox" class="headerlink" title="Firefox"></a>Firefox</h2><p>Mozilla/5.0 (Windows NT 6.1; WOW64; rv:34.0) Gecko/20100101 Firefox/34.0<br>Mozilla/5.0 (X11; U; Linux x86_64; zh-CN; rv:1.9.2.10) Gecko/20100922 Ubuntu/10.10 (maverick) Firefox/3.6.10</p><h2 id="Safari"><a href="#Safari" class="headerlink" title="Safari"></a>Safari</h2><p>Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/534.57.2 (KHTML, like Gecko) Version/5.1.7 Safari/534.57.2</p><h2 id="chrome"><a href="#chrome" class="headerlink" title="chrome"></a>chrome</h2><p>Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/39.0.2171.71 Safari/537.36<br>Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.11 (KHTML, like Gecko) Chrome/23.0.1271.64 Safari/537.11<br>Mozilla/5.0 (Windows; U; Windows NT 6.1; en-US) AppleWebKit/534.16 (KHTML, like Gecko) Chrome/10.0.648.133 Safari/534.16</p><h2 id="360"><a href="#360" class="headerlink" title="360"></a>360</h2><p>Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/30.0.1599.101 Safari/537.36<br>Mozilla/5.0 (Windows NT 6.1; WOW64; Trident/7.0; rv:11.0) like Gecko</p><h2 id="淘宝浏览器"><a href="#淘宝浏览器" class="headerlink" title="淘宝浏览器"></a>淘宝浏览器</h2><p>Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/536.11 (KHTML, like Gecko) Chrome/20.0.1132.11 TaoBrowser/2.0 Safari/536.11</p><h2 id="猎豹浏览器"><a href="#猎豹浏览器" class="headerlink" title="猎豹浏览器"></a>猎豹浏览器</h2><p>Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.1 (KHTML, like Gecko) Chrome/21.0.1180.71 Safari/537.1 LBBROWSER<br>Mozilla/5.0 (compatible; MSIE 9.0; Windows NT 6.1; WOW64; Trident/5.0; SLCC2; .NET CLR 2.0.50727; .NET CLR 3.5.30729; .NET CLR 3.0.30729; Media Center PC 6.0; .NET4.0C; .NET4.0E; LBBROWSER)<br>Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.1; SV1; QQDownload 732; .NET4.0C; .NET4.0E; LBBROWSER)”</p><h2 id="QQ浏览器"><a href="#QQ浏览器" class="headerlink" title="QQ浏览器"></a>QQ浏览器</h2><p>Mozilla/5.0 (compatible; MSIE 9.0; Windows NT 6.1; WOW64; Trident/5.0; SLCC2; .NET CLR 2.0.50727; .NET CLR 3.5.30729; .NET CLR 3.0.30729; Media Center PC 6.0; .NET4.0C; .NET4.0E; QQBrowser/7.0.3698.400)<br>Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.1; SV1; QQDownload 732; .NET4.0C; .NET4.0E)</p><h2 id="sogou浏览器"><a href="#sogou浏览器" class="headerlink" title="sogou浏览器"></a>sogou浏览器</h2><p>Mozilla/5.0 (Windows NT 5.1) AppleWebKit/535.11 (KHTML, like Gecko) Chrome/17.0.963.84 Safari/535.11 SE 2.X MetaSr 1.0<br>Mozilla/4.0 (compatible; MSIE 7.0; Windows NT 5.1; Trident/4.0; SV1; QQDownload 732; .NET4.0C; .NET4.0E; SE 2.X MetaSr 1.0)</p><h2 id="maxthon浏览器"><a href="#maxthon浏览器" class="headerlink" title="maxthon浏览器"></a>maxthon浏览器</h2><p>Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Maxthon/4.4.3.4000 Chrome/30.0.1599.101 Safari/537.36</p><h2 id="UC浏览器"><a href="#UC浏览器" class="headerlink" title="UC浏览器"></a>UC浏览器</h2><p>Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/38.0.2125.122 UBrowser/4.0.3214.0 Safari/537.36</p><p>==================== 移动浏览器大全 ====================</p><h2 id="IPhone"><a href="#IPhone" class="headerlink" title="IPhone"></a>IPhone</h2><p>Mozilla/5.0 (iPhone; U; CPU iPhone OS 4_3_3 like Mac OS X; en-us) AppleWebKit/533.17.9 (KHTML, like Gecko) Version/5.0.2 Mobile/8J2 Safari/6533.18.5</p><h2 id="IPod"><a href="#IPod" class="headerlink" title="IPod"></a>IPod</h2><p>Mozilla/5.0 (iPod; U; CPU iPhone OS 4_3_3 like Mac OS X; en-us) AppleWebKit/533.17.9 (KHTML, like Gecko) Version/5.0.2 Mobile/8J2 Safari/6533.18.5</p><h2 id="IPAD"><a href="#IPAD" class="headerlink" title="IPAD"></a>IPAD</h2><p>Mozilla/5.0 (iPad; U; CPU OS 4_2_1 like Mac OS X; zh-cn) AppleWebKit/533.17.9 (KHTML, like Gecko) Version/5.0.2 Mobile/8C148 Safari/6533.18.5<br>Mozilla/5.0 (iPad; U; CPU OS 4_3_3 like Mac OS X; en-us) AppleWebKit/533.17.9 (KHTML, like Gecko) Version/5.0.2 Mobile/8J2 Safari/6533.18.5</p><h2 id="Android"><a href="#Android" class="headerlink" title="Android"></a>Android</h2><p>Mozilla/5.0 (Linux; U; Android 2.2.1; zh-cn; HTC_Wildfire_A3333 Build/FRG83D) AppleWebKit/533.1 (KHTML, like Gecko) Version/4.0 Mobile Safari/533.1<br>Mozilla/5.0 (Linux; U; Android 2.3.7; en-us; Nexus One Build/FRF91) AppleWebKit/533.1 (KHTML, like Gecko) Version/4.0 Mobile Safari/533.1</p><h2 id="QQ浏览器-Android版本"><a href="#QQ浏览器-Android版本" class="headerlink" title="QQ浏览器 Android版本"></a>QQ浏览器 Android版本</h2><p>MQQBrowser/26 Mozilla/5.0 (Linux; U; Android 2.3.7; zh-cn; MB200 Build/GRJ22; CyanogenMod-7) AppleWebKit/533.1 (KHTML, like Gecko) Version/4.0 Mobile Safari/533.1</p><h2 id="Android-Opera-Mobile"><a href="#Android-Opera-Mobile" class="headerlink" title="Android Opera Mobile"></a>Android Opera Mobile</h2><p>Opera/9.80 (Android 2.3.4; Linux; Opera Mobi/build-1107180945; U; en-GB) Presto/2.8.149 Version/11.10</p><h2 id="Android-Pad-Moto-Xoom"><a href="#Android-Pad-Moto-Xoom" class="headerlink" title="Android Pad Moto Xoom"></a>Android Pad Moto Xoom</h2><p>Mozilla/5.0 (Linux; U; Android 3.0; en-us; Xoom Build/HRI39) AppleWebKit/534.13 (KHTML, like Gecko) Version/4.0 Safari/534.13</p><h2 id="BlackBerry"><a href="#BlackBerry" class="headerlink" title="BlackBerry"></a>BlackBerry</h2><p>Mozilla/5.0 (BlackBerry; U; BlackBerry 9800; en) AppleWebKit/534.1+ (KHTML, like Gecko) Version/6.0.0.337 Mobile Safari/534.1+</p><h2 id="WebOS-HP-Touchpad"><a href="#WebOS-HP-Touchpad" class="headerlink" title="WebOS HP Touchpad"></a>WebOS HP Touchpad</h2><p>Mozilla/5.0 (hp-tablet; Linux; hpwOS/3.0.0; U; en-US) AppleWebKit/534.6 (KHTML, like Gecko) wOSBrowser/233.70 Safari/534.6 TouchPad/1.0</p><h2 id="Nokia-N97"><a href="#Nokia-N97" class="headerlink" title="Nokia N97"></a>Nokia N97</h2><p>Mozilla/5.0 (SymbianOS/9.4; Series60/5.0 NokiaN97-1/20.0.019; Profile/MIDP-2.1 Configuration/CLDC-1.1) AppleWebKit/525 (KHTML, like Gecko) BrowserNG/7.1.18124</p><h2 id="Windows-Phone-Mango"><a href="#Windows-Phone-Mango" class="headerlink" title="Windows Phone Mango"></a>Windows Phone Mango</h2><p>Mozilla/5.0 (compatible; MSIE 9.0; Windows Phone OS 7.5; Trident/5.0; IEMobile/9.0; HTC; Titan)</p><h2 id="UC浏览器-1"><a href="#UC浏览器-1" class="headerlink" title="UC浏览器"></a>UC浏览器</h2><p>UCWEB7.0.2.37/28/999</p><p>NOKIA5700/ UCWEB7.0.2.37/28/999</p><p>UCOpenwave<br>Openwave/ UCWEB7.0.2.37/28/999</p><h2 id="UC-Opera"><a href="#UC-Opera" class="headerlink" title="UC Opera"></a>UC Opera</h2><p>Mozilla/4.0 (compatible; MSIE 6.0; ) Opera/UCWEB7.0.2.37/28/999</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;常见浏览器User-Agent大全&quot;&gt;&lt;a href=&quot;#常见浏览器User-Agent大全&quot; class=&quot;headerlink&quot; title=&quot;常见浏览器User-Agent大全&quot;&gt;&lt;/a&gt;常见浏览器User-Agent大全&lt;/h1&gt;&lt;p&gt;下面是工作中需要用到
      
    
    </summary>
    
    
      <category term="python" scheme="http://yoursite.com/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>mysql测试题目</title>
    <link href="http://yoursite.com/2019/02/18/mysql%E6%B5%8B%E8%AF%95%E9%A2%98%E7%9B%AE/"/>
    <id>http://yoursite.com/2019/02/18/mysql测试题目/</id>
    <published>2019-02-18T07:07:35.000Z</published>
    <updated>2019-02-18T07:08:11.945Z</updated>
    
    <content type="html"><![CDATA[<h3 id="1-创建数据库"><a href="#1-创建数据库" class="headerlink" title="1.创建数据库"></a>1.创建数据库</h3><p>CREATE DATABASE QQDB;</p><h3 id="2-创建各表（表结构；约束）"><a href="#2-创建各表（表结构；约束）" class="headerlink" title="2.创建各表（表结构；约束）"></a>2.创建各表（表结构；约束）</h3><p>/<strong><strong><strong><strong>***</strong></strong></strong></strong>创建<strong><strong><strong><strong><em>**</em></strong></strong></strong></strong>/<br>USE QQDB;</p><p>DROP TABLE IF EXISTS QQUser;<br>CREATE TABLE QQUser<br>(<br>qqid BIGINT PRIMARY KEY,<br>PASSWORD VARCHAR(20) NOT NULL,<br>lastlogtime DATETIME NOT NULL,<br>online INT NOT NULL,<br>LEVEL INT NOT NULL<br>);</p><p>DROP TABLE IF EXISTS baseinfo;<br>CREATE TABLE baseinfo<br>(<br>qqid BIGINT PRIMARY KEY,<br>nickname VARCHAR(50) NOT NULL,<br>sex INT,<br>age INT NOT NULL,<br>province VARCHAR(50),<br>city VARCHAR(50),<br>address VARCHAR(200),<br>phone CHAR(50),<br>CONSTRAINT <code>FK_qqid</code> FOREIGN KEY (<code>qqid</code>) REFERENCES <code>qquser</code> (<code>qqid</code>)<br>);</p><p>DROP TABLE IF EXISTS relaion;<br>CREATE TABLE relaion<br>(<br>qqid BIGINT NOT NULL,<br>relationqqid BIGINT NOT NULL,<br>relationstatus INT NOT NULL,<br>CONSTRAINT <code>FK_r_qqid</code> FOREIGN KEY (qqid) REFERENCES <code>qquser</code> (<code>qqid</code>),<br>CONSTRAINT <code>FK_r_relationqqid</code> FOREIGN KEY (relationqqid) REFERENCES <code>qquser</code> (<code>qqid</code>)<br>);</p><h2 id="3-添加-插入-数据"><a href="#3-添加-插入-数据" class="headerlink" title="3.添加/插入 数据"></a>3.添加/插入 数据</h2><p>/<strong><strong><strong><strong>***</strong></strong></strong></strong>添加<strong><strong><strong><strong><em>**</em></strong></strong></strong></strong>/<br>insert  into <code>qquser</code>(<code>QQid</code>,<code>Password</code>,<code>lastlogTime</code>,<code>Online</code>,<code>level</code>)<br>values (1,’a123456’,’2017-03-02 00:00:00’,1,6),<br>(2,’b123456’,’2017-03-02 00:00:00’,2,7),<br>(3,’c123456’,’2018-03-01 00:00:00’,2,6),<br>(4,’d123456’,’2018-03-02 00:00:00’,2,8),<br>(7,’g123456’,’2012-02-02 00:00:00’,0,-1),<br>(8855678,’gues0221’,’2008-02-21 16:28:20’,1,6),<br>(54789625,’add512#&amp;’,’2008-02-16 17:01:35’,2,1),<br>(88662753,’admin0219’,’2008-02-19 21:08:35’,0,5);</p><p>insert  into <code>baseinfo</code>(<code>QQID</code>,<code>nickName</code>,<code>Sex</code>,<code>Age</code>,<code>provice</code>,<code>City</code>,<code>Addres</code>,<code>phone</code>)<br>values (1,’小明’,0,18,’山东省’,’济南’,’小村村’,’004’),<br>(2,’小天’,1,15,’山东’,’聊城’,’大村村’,’005’),<br>(3,’小王’,1,16,’河南’,’开封’,’不知奥’,’006’),<br>(4,’嘟嘟鱼’,0,13,’天津’,’塘沽’,’呵呵’,’007’),<br>(8855678,’独行侠,1,38,’北京’,’海淀区’,’解放中路号院123室’,’003’),<br>(54789625,’蝴蝶飞飞’,1,16,’北京’,’海淀区’,’亚运村’,’001’),<br>(88662753,’青青草’,0,20,’河南省’,’安阳’,’汤阴’,’002’);</p><p>INSERT INTO <code>relaion</code>(<code>qqid</code>,<code>relationqqid</code>,<code>relationstatus</code>)<br>VALUES(54789625,88662753,0),<br>(88662753,8855678,1),<br>(54789625,8855678,0);</p><h2 id="4-查询数据"><a href="#4-查询数据" class="headerlink" title="4.查询数据"></a>4.查询数据</h2><p>##查询数据</p><p>#01.查询QQ号码为54789625的所有好友信息，包括QQ号码，昵称，年龄<br>select RelationQQID as QQ号码,NickName as 昵称,Age as 年龄<br>from BaseInfo,Relation<br>where BaseInfo.QQID=Relation.RelationQQID<br>and Relation.QQID=54789625<br>and RelationStatus=0 或者1</p><p>#02.查询当前在线用户的信息<br>SELECT NickName,Province FROM<br>BaseInfo,QQUser<br>WHERE BaseInfo.QQID=QQUser.QQID AND Online=0</p><p>#03.查询北京的、年龄在18至45岁之间的在线用户的信息<br>SELECT NickName,Province FROM<br>BaseInfo,QQUser<br>WHERE BaseInfo.QQID=QQUser.QQID<br>AND   BaseInfo.Province LIKE ‘%北京%’<br>AND   BaseInfo.Age BETWEEN 18 AND 45<br>AND   Online=0</p><p>#04.查询昵称为青青草的用户信息<br>SELECT NickName,Province,City,Address<br>FROM BaseInfo<br>WHERE NickName=’青青草’</p><p>#05.查询QQ号码为54789625的用户的好友中每个省份的总人数，并且总人数按由大到小排序。<br>SELECT BaseInfo.Province,COUNT(*) AS 总人数 FROM Relation,BaseInfo<br>WHERE Relation.RelationQQID=BaseInfo.QQID<br>AND Relation.RelationStatus=0<br>AND Relation.QQID=54789625<br>GROUP BY BaseInfo.Province<br>ORDER BY 总人数 DESC</p><p>#06.查询至少有150天未登录QQ账号的用户信息，包括QQ号码，最后一次登录时间、等级、昵称、年龄，并按时间的降序排列<br>SELECT QQUser.QQID,QQUser.LastLogTime,QQUser.Level,BaseInfo.NickName,BaseInfo.Age<br>FROM BaseInfo,QQUser<br>WHERE BaseInfo.QQID=QQUser.QQID<br>AND DATEDIFF(NOW(),lastLogTime)&gt;=150<br>ORDER BY DATEDIFF(NOW(),lastLogTime) DESC</p><p>#07.查询QQ号码为54789625的好友中等级为10级以上的“月亮”级用户信息。<br>SELECT NickName,Province<br>FROM QQUser,Relation,BaseInfo<br>WHERE Relation.RelationQQID=BaseInfo.QQID<br>AND Relation.QQID=54789625<br>AND Relation.RelationStatus=0<br>AND Relation.RelationQQID=QQUser.QQID<br>AND QQUser.Level&gt;=10</p><p>#08.–查询QQ号码为54789625的好友中隐身的用户信息。<br>SELECT NickName,province<br>FROM Relation INNER JOIN BaseInfo<br>ON Relation.RelationQQID=BaseInfo.QQID<br>AND Relation.QQID=54789625<br>INNER JOIN QQUser<br>ON QQUser.QQID=RelationQQID<br>AND Online=2  #2代表隐身<br>AND Relation.RelationStatus=0  #0代表好友</p><p>#09.–查询好友超过20个的用户信息。<br>SELECT Nickname,province<br>FROM BaseInfo WHERE QQID IN<br>(SELECT QQID<br>FROM Relation<br>WHERE RelationStatus=0<br>GROUP BY QQID<br>HAVING COUNT(*)&gt;20<br>)</p><p>#10.为了查看信誉度，管理员需要查询被当做黑名单人物次数排名前3的用户<br>SELECT  RelationQQID,COUNT(<em>) AS 次数<br>FROM Relation<br>WHERE RelationStatus=1<br>GROUP BY RelationQQID<br>ORDER BY COUNT(</em>) DESC<br>LIMIT 3</p><h2 id="5-修改数据"><a href="#5-修改数据" class="headerlink" title="5.修改数据"></a>5.修改数据</h2><p>##修改数据</p><p>#01.假设我的QQ号码为8855678，今天我隐身登录<br>UPDATE QQUser SET Online=2,LastLogTime=NOW()<br>WHERE QQID=8855678</p><p>#02.假设我的QQ号码为8855678，修改我的昵称为“被淹死的鱼”，地址为“解放中路号院123室”<br>UPDATE BaseInfo SET NickName=’被淹死的鱼’,Address=’解放中路号院室’<br>WHERE  QQID=8855678</p><p>#03.假设我的QQ号码为54789625，将我的好友“青青草”拖进黑名单。<br>UPDATE Relation SET RelationStatus=1<br>WHERE QQID=54789625 AND RelationQQID=88662753</p><p>#04.为了提高QQ用户的聊天积极性，把等级小于6级的用户的等级都提升1个级别。<br>update QQUser set Level=Level+1<br>where Level&lt;6</p><p>#05.管理员将超过365天没有登录过的QQ锁定（即将等级值设定为-1）。<br>UPDATE QQUser SET LEVEL=-1<br>WHERE DATEDIFF(NOW(),lastLogTime)&gt;=365</p><p>#06.为了奖励用户，将好友数量超过20的用户等级提升1个级别。<br>UPDATE QQUser SET LEVEL=LEVEL+1<br>WHERE QQID IN(<br>SELECT Relation.QQID FROM Relation<br>WHERE RelationStatus=0<br>GROUP BY Relation.QQID<br>HAVING COUNT(Relation.RelationQQID)&gt;=20)</p><p>#07.把QQ号码为54789625的用户的好友“嘟嘟鱼”拖进黑名单中。<br>UPDATE Relation SET RelationStatus=1<br>WHERE QQID=54789625 AND RelationQQID=<br>(SELECT QQID FROM BaseInfo WHERE NickName=’嘟嘟鱼’)<br>AND RelationStatus=0</p><h2 id="6-删除数据"><a href="#6-删除数据" class="headerlink" title="6.删除数据"></a>6.删除数据</h2><p>##删除数据</p><p>#1.把QQ号码为54789625的用户黑名单中的用户删除。<br>DELETE FROM Relation WHERE QQID=54789625 AND RelationStatus=1</p><p>#2.QQ号码为54789625的用户多次在QQ中发布违法信息，造成了很坏的影响，因此管理员决定将其删除。<br>DELETE FROM Relation WHERE QQID=54789625 OR RelationQQID=54789625<br>DELETE FROM BaseInfo WHERE QQID=54789625<br>DELETE FROM QQUser WHERE QQID=54789625</p><p>#3.管理员将超过1000天没有登录过的QQ删除。<br>DELETE FROM Relation WHERE QQID IN<br>(<br>  SELECT QQID FROM QQUser<br>  WHERE DATEDIFF(NOW(),LastLogTime)&gt;=1000<br>)<br>OR RelationQQID IN<br>(<br>  SELECT QQID FROM QQUser<br>  WHERE DATEDIFF(NOW(),LastLogTime)&gt;=1000<br>)<br>DELETE FROM BaseInfo WHERE QQID IN<br>(<br>  SELECT QQID FROM QQUser<br>  WHERE DATEDIFF(NOW(),LastLogTime)&gt;=1000<br>)<br>DELETE FROM QQUser<br>WHERE DATEDIFF(NOW(),LastLogTime)&gt;=1000</p><p>辅助blog</p><h2 id="MySQL-获得当前日期时间-函数"><a href="#MySQL-获得当前日期时间-函数" class="headerlink" title="MySQL 获得当前日期时间 函数"></a>MySQL 获得当前日期时间 函数</h2><p>获得当前日期+时间（date + time）函数：now()</p><p>mysql&gt; select now();</p><p>+———————+| now() |+———————+| 2008-08-08 22:20:46 |+———————+</p><p>获得当前日期+时间（date + time）函数：sysdate()<br>sysdate() 日期时间函数跟 now() 类似，不同之处在于：now() 在执行开始时值就得到了， sysdate() 在函数执行时动态得到值。看下面的例子就明白了：</p><p>mysql&gt; select now(), sleep(3), now();</p><p>+———————+———-+———————+| now() | sleep(3) | now() |+———————+———-+———————+| 2008-08-08 22:28:21 | 0 | 2008-08-08 22:28:21 |+———————+———-+———————+</p><p>sysdate() 日期时间函数，一般情况下很少用到。</p><p>MySQL 获得当前时间戳函数：current_timestamp, current_timestamp()</p><p>mysql&gt; select current_timestamp, current_timestamp();</p><p>+———————+———————+| current_timestamp | current_timestamp() |+———————+———————+| 2008-08-09 23:22:24 | 2008-08-09 23:22:24 |+———————+———————+</p><p>MySQL 日期转换函数、时间转换函数<br>MySQL Date/Time to Str（日期/时间转换为字符串）函数：date_format(date,format), time_format(time,format)</p><p>mysql&gt; select date_format(‘2008-08-08 22:23:01’, ‘%Y%m%d%H%i%s’);</p><p>+—————————————————-+| date_format(‘2008-08-08 22:23:01’, ‘%Y%m%d%H%i%s’) |+—————————————————-+| 20080808222301 |+—————————————————-+</p><p>MySQL 日期、时间转换函数：date_format(date,format), time_format(time,format) 能够把一个日期/时间转换成各种各样的字符串格式。它是 str_to_date(str,format) 函数的 一个逆转换。</p><p>MySQL Str to Date （字符串转换为日期）函数：str_to_date(str, format)</p><p>select str_to_date(‘08/09/2008’, ‘%m/%d/%Y’); – 2008-08-09select str_to_date(‘08/09/08’ , ‘%m/%d/%y’); – 2008-08-09select str_to_date(‘08.09.2008’, ‘%m.%d.%Y’); – 2008-08-09select str_to_date(‘08:09:30’, ‘%h:%i:%s’); – 08:09:30select str_to_date(‘08.09.2008 08:09:30’, ‘%m.%d.%Y %h:%i:%s’); – 2008-08-09 08:09:30</p><p>可以看到，str_to_date(str,format) 转换函数，可以把一些杂乱无章的字符串转换为日期格式。另外，它也可以转换为时间。“format” 可以参看 MySQL 手册。</p><p>MySQL （日期、天数）转换函数：to_days(date), from_days(days)</p><p>select to_days(‘0000-00-00’); – 0select to_days(‘2008-08-08’); – 733627</p><p>MySQL （时间、秒）转换函数：time_to_sec(time), sec_to_time(seconds)</p><p>select time_to_sec(‘01:00:05’); – 3605select sec_to_time(3605); – ‘01:00:05’</p><p>MySQL 拼凑日期、时间函数：makdedate(year,dayofyear), maketime(hour,minute,second)</p><p>select makedate(2001,31); – ‘2001-01-31’select makedate(2001,32); – ‘2001-02-01’select maketime(12,15,30); – ‘12:15:30’</p><p>MySQL （Unix 时间戳、日期）转换函数</p><p>unix_timestamp(),</p><p>unix_timestamp(date),</p><p>from_unixtime(unix_timestamp),</p><p>from_unixtime(unix_timestamp,format)</p><p>下面是示例：</p><p>select unix_timestamp(); – 1218290027select unix_timestamp(‘2008-08-08’); – 1218124800select unix_timestamp(‘2008-08-08 12:30:00’); – 1218169800</p><p>select from_unixtime(1218290027); – ‘2008-08-09 21:53:47’select from_unixtime(1218124800); – ‘2008-08-08 00:00:00’select from_unixtime(1218169800); – ‘2008-08-08 12:30:00’</p><p>select from_unixtime(1218169800, ‘%Y %D %M %h:%i:%s %x’); – ‘2008 8th August 12:30:00 2008’</p><p>MySQL 日期时间计算函数</p><p>MySQL 为日期增加一个时间间隔：date_add()</p><p>set @dt = now();</p><p>select date_add(@dt, interval 1 day); – add 1 dayselect date_add(@dt, interval 1 hour); – add 1 hourselect date_add(@dt, interval 1 minute); – …select date_add(@dt, interval 1 second);select date_add(@dt, interval 1 microsecond);select date_add(@dt, interval 1 week);select date_add(@dt, interval 1 month);select date_add(@dt, interval 1 quarter);select date_add(@dt, interval 1 year);</p><p>select date_add(@dt, interval -1 day); – sub 1 day</p><p>MySQL adddate(), addtime()函数，可以用 date_add() 来替代。下面是 date_add() 实现 addtime() 功能示例：</p><p>mysql&gt; set @dt = ‘2008-08-09 12:12:33’;</p><p>mysql&gt;</p><p>mysql&gt; select date_add(@dt, interval ‘01:15:30’ hour_second);</p><p>+————————————————+| date_add(@dt, interval ‘01:15:30’ hour_second) |+————————————————+| 2008-08-09 13:28:03 |+————————————————+</p><p>mysql&gt; select date_add(@dt, interval ‘1 01:15:30’ day_second);</p><p>+————————————————-+| date_add(@dt, interval ‘1 01:15:30’ day_second) |+————————————————-+| 2008-08-10 13:28:03 |+————————————————-+</p><p>MySQL 为日期减去一个时间间隔：date_sub()</p><p>mysql&gt; select date_sub(‘1998-01-01 00:00:00’, interval ‘1 1:1:1’ day_second);</p><p>+—————————————————————-+| date_sub(‘1998-01-01 00:00:00’, interval ‘1 1:1:1’ day_second) |+—————————————————————-+| 1997-12-30 22:58:59 |+—————————————————————-+</p><p>MySQL date_sub() 日期时间函数 和 date_add() 用法一致，不再赘述。</p><p>MySQL 日期、时间相减函数：datediff(date1,date2), timediff(time1,time2)</p><p>MySQL datediff(date1,date2)：两个日期相减 date1 - date2，返回天数。select datediff(‘2008-08-08’, ‘2008-08-01’); – 7select datediff(‘2008-08-01’, ‘2008-08-08’); – -7</p><p>MySQL timediff(time1,time2)：两个日期相减 time1 - time2，返回 time 差值。</p><p>select timediff(‘2008-08-08 08:08:08’, ‘2008-08-08 00:00:00’); – 08:08:08select timediff(‘08:08:08’, ‘00:00:00’); – 08:08:08</p><p>注意：timediff(time1,time2) 函数的两个参数类型必须相同。</p><p>MySQL 时间戳（timestamp）转换、增、减函数：</p><p>timestamp(date) – date to timestamptimestamp(dt,time) – dt + time</p><p>timestampadd(unit,interval,datetime_expr) –timestampdiff(unit,datetime_expr1,datetime_expr2) –</p><p>请看示例部分：</p><p>select timestamp(‘2008-08-08’); – 2008-08-08 00:00:00select timestamp(‘2008-08-08 08:00:00’, ‘01:01:01’); – 2008-08-08 09:01:01select timestamp(‘2008-08-08 08:00:00’, ‘10 01:01:01’); – 2008-08-18 09:01:01</p><p>select timestampadd(day, 1, ‘2008-08-08 08:00:00’); – 2008-08-09 08:00:00select date_add(‘2008-08-08 08:00:00’, interval 1 day); – 2008-08-09 08:00:00</p><p>MySQL timestampadd() 函数类似于 date_add()。select timestampdiff(year,’2002-05-01’,’2001-01-01’); – -1select timestampdiff(day ,’2002-05-01’,’2001-01-01’); – -485select timestampdiff(hour,’2008-08-08 12:00:00’,’2008-08-08 00:00:00’); – -12</p><p>select datediff(‘2008-08-08 12:00:00’, ‘2008-08-01 00:00:00’); – 7</p><p>MySQL timestampdiff() 函数就比 datediff() 功能强多了，datediff() 只能计算两个日期（date）之间相差的天数。</p><p>MySQL 时区（timezone）转换函数<br>convert_tz(dt,from_tz,to_tz)</p><p>select convert_tz(‘2008-08-08 12:00:00’, ‘+08:00’, ‘+00:00’); – 2008-08-08 04:00:00</p><p>时区转换也可以通过 date_add, date_sub, timestampadd 来实现。</p><p>select date_add(‘2008-08-08 12:00:00’, interval -8 hour); – 2008-08-08 04:00:00select date_sub(‘2008-08-08 12:00:00’, interval 8 hour); – 2008-08-08 04:00:00select timestampadd(hour, -8, ‘2008-08-08 12:00:00’); – 2008-08-08 04:00:00</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;1-创建数据库&quot;&gt;&lt;a href=&quot;#1-创建数据库&quot; class=&quot;headerlink&quot; title=&quot;1.创建数据库&quot;&gt;&lt;/a&gt;1.创建数据库&lt;/h3&gt;&lt;p&gt;CREATE DATABASE QQDB;&lt;/p&gt;
&lt;h3 id=&quot;2-创建各表（表结构；约束）&quot;&gt;
      
    
    </summary>
    
    
      <category term="mysql" scheme="http://yoursite.com/tags/mysql/"/>
    
  </entry>
  
  <entry>
    <title>python解释器安装</title>
    <link href="http://yoursite.com/2019/02/18/python%E8%A7%A3%E9%87%8A%E5%99%A8%E5%AE%89%E8%A3%85/"/>
    <id>http://yoursite.com/2019/02/18/python解释器安装/</id>
    <published>2019-02-18T07:05:15.000Z</published>
    <updated>2019-02-18T07:07:07.148Z</updated>
    
    <content type="html"><![CDATA[<h2 id="python解释器下载"><a href="#python解释器下载" class="headerlink" title="python解释器下载"></a>python解释器下载</h2><p>Python目前已支持所有主流操作系统      在Linux,Unix,Mac系统上自带Python环境<br>python解释器在Windows系统上需要安装一下，懂我意思吧<br>给各位小捞板详细点的步骤<br> 打开官网 <a href="https://www.python.org/downloads/windows/" target="_blank" rel="noopener">https://www.python.org/downloads/windows/</a> 下载中心<br> 根据自己的要求选择版本   下图是一个python 3.6.1的例子</p><p><img src="https://img-blog.csdn.net/20181024104933865?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1RpYW5fcmM=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt="在这里插入图片描述"></p><h2 id="python解释器的安装"><a href="#python解释器的安装" class="headerlink" title="python解释器的安装"></a>python解释器的安装</h2><p> 真好   现在你应该把python解释器成功安装   突然就觉得自己有点小帅<br> 下面的安装步骤是3.6.4的版本 懂我意思吧</p><h3 id="1"><a href="#1" class="headerlink" title="1."></a>1.</h3><p><img src="https://img-blog.csdn.net/20181024113128501?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1RpYW5fcmM=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt="在这里插入图片描述"> （1）勾选Add Python 3.6 to PATH是把Python的安装路径添加到系统环境变量的Path变量中（这样我们就少一步自己添加环境变量啦^_^）</p><p>（2）选择Install Now默认将pythone安装在C盘目录下</p><p>（3）选择Customize installation可自定义路径</p><h3 id="2-选择Customize-installation后，这一步默认全选，然后点击next"><a href="#2-选择Customize-installation后，这一步默认全选，然后点击next" class="headerlink" title="2.  选择Customize installation后，这一步默认全选，然后点击next"></a>2.  选择Customize installation后，这一步默认全选，然后点击next</h3><p><img src="https://img-blog.csdn.net/20181024113416880?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1RpYW5fcmM=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt="在这里插入图片描述"></p><h3 id="3-这一步要勾选上Install-for-all-users，路径根据自己的需要选择（我安装在了F盘下的Python36文件夹下）"><a href="#3-这一步要勾选上Install-for-all-users，路径根据自己的需要选择（我安装在了F盘下的Python36文件夹下）" class="headerlink" title="3. 这一步要勾选上Install for all users，路径根据自己的需要选择（我安装在了F盘下的Python36文件夹下）"></a>3. 这一步要勾选上Install for all users，路径根据自己的需要选择（我安装在了F盘下的Python36文件夹下）</h3><p><img src="https://img-blog.csdn.net/20181024113530570?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1RpYW5fcmM=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt="在这里插入图片描述"></p><h3 id="4-然后点Install就开始安装了"><a href="#4-然后点Install就开始安装了" class="headerlink" title="4.然后点Install就开始安装了"></a>4.然后点Install就开始安装了</h3><p><img src="https://img-blog.csdn.net/20181024113713872?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1RpYW5fcmM=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt="在这里插入图片描述"></p><h3 id="5-安装成功"><a href="#5-安装成功" class="headerlink" title="5.安装成功"></a>5.安装成功<img src="https://img-blog.csdn.net/20181024113808737?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1RpYW5fcmM=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt="在这里插入图片描述"></h3><h2 id="验证"><a href="#验证" class="headerlink" title="验证"></a>验证</h2><p>打开cmd，输入python，出现以下提示<br><img src="https://img-blog.csdn.net/2018102411385571?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1RpYW5fcmM=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt="在这里插入图片描述"></p><h2 id="添加环境变量"><a href="#添加环境变量" class="headerlink" title="添加环境变量"></a>添加环境变量</h2><p>我的电脑是window10 戴尔笔记本<br>就给小捞板搞个window10的环境变量配置</p><h5 id="1-点“我的电脑”，右键选“属性”"><a href="#1-点“我的电脑”，右键选“属性”" class="headerlink" title="1,点“我的电脑”，右键选“属性”"></a>1,点“我的电脑”，右键选“属性”</h5><h5 id="2，选择“高级系统设置”—-gt-选“环境变量”—-gt-在“系统变量”中选中“Path”-再点“编辑”—-gt-再点“编辑文本”"><a href="#2，选择“高级系统设置”—-gt-选“环境变量”—-gt-在“系统变量”中选中“Path”-再点“编辑”—-gt-再点“编辑文本”" class="headerlink" title="2，选择“高级系统设置”—&gt;选“环境变量”—&gt;在“系统变量”中选中“Path”,再点“编辑”—&gt;再点“编辑文本”"></a>2，选择“高级系统设置”—&gt;选“环境变量”—&gt;在“系统变量”中选中“Path”,再点“编辑”—&gt;再点“编辑文本”</h5><p><img src="https://img-blog.csdn.net/20181024115627778?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1RpYW5fcmM=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdn.net/20181024115921565?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1RpYW5fcmM=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdn.net/20181024115936530?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1RpYW5fcmM=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdn.net/20181024115947540?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1RpYW5fcmM=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt="在这里插入图片描述"></p><h4 id="3"><a href="#3" class="headerlink" title="3,"></a>3,</h4><p>在“变量值”一栏，把自己所安装的python路径拷进去就可以了，我安装的路径是“C:\Python27”<br>这一步要注意：在拷贝路径“C:\Python27”时，前面要加分号，，还要注意，分号一定是英文输入法里的分号，我刚开始没有注意到这一点，有点捞，导致在命令行里输入python命令时，总是失败，会提示‘python’不是内部或外部命令，也不是可运行的程序或批处理文件<br><img src="https://img-blog.csdn.net/20181024120028505?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1RpYW5fcmM=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt="在这里插入图片描述"></p><p>到这里就配置完成了  就可以搞事情了</p><p>python解释器就安装完成了 </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;python解释器下载&quot;&gt;&lt;a href=&quot;#python解释器下载&quot; class=&quot;headerlink&quot; title=&quot;python解释器下载&quot;&gt;&lt;/a&gt;python解释器下载&lt;/h2&gt;&lt;p&gt;Python目前已支持所有主流操作系统      在Linux,Un
      
    
    </summary>
    
    
      <category term="python" scheme="http://yoursite.com/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>python常见的异常类型</title>
    <link href="http://yoursite.com/2019/02/18/python%E5%B8%B8%E8%A7%81%E7%9A%84%E5%BC%82%E5%B8%B8%E7%B1%BB%E5%9E%8B/"/>
    <id>http://yoursite.com/2019/02/18/python常见的异常类型/</id>
    <published>2019-02-18T07:02:32.000Z</published>
    <updated>2019-02-18T07:03:38.452Z</updated>
    
    <content type="html"><![CDATA[<h1 id="python-常见的异常类型"><a href="#python-常见的异常类型" class="headerlink" title="python 常见的异常类型"></a><a href="https://www.cnblogs.com/zln1021/p/6106185.html" target="_blank" rel="noopener">python 常见的异常类型</a></h1><p>python标准异常<br>异常名称    描述<br>BaseException    所有异常的基类<br>SystemExit    解释器请求退出<br>KeyboardInterrupt    用户中断执行(通常是输入^C)<br>Exception    常规错误的基类<br>StopIteration    迭代器没有更多的值<br>GeneratorExit    生成器(generator)发生异常来通知退出<br>StandardError    所有的内建标准异常的基类<br>ArithmeticError    所有数值计算错误的基类<br>FloatingPointError    浮点计算错误<br>OverflowError    数值运算超出最大限制<br>ZeroDivisionError    除(或取模)零 (所有数据类型)<br>AssertionError    断言语句失败<br>AttributeError    对象没有这个属性<br>EOFError    没有内建输入,到达EOF 标记<br>EnvironmentError    操作系统错误的基类<br>IOError    输入/输出操作失败<br>OSError    操作系统错误<br>WindowsError    系统调用失败<br>ImportError    导入模块/对象失败<br>LookupError    无效数据查询的基类<br>IndexError    序列中没有此索引(index)<br>KeyError    映射中没有这个键<br>MemoryError    内存溢出错误(对于Python 解释器不是致命的)<br>NameError    未声明/初始化对象 (没有属性)<br>UnboundLocalError    访问未初始化的本地变量<br>ReferenceError    弱引用(Weak reference)试图访问已经垃圾回收了的对象<br>RuntimeError    一般的运行时错误<br>NotImplementedError    尚未实现的方法<br>SyntaxError    Python 语法错误<br>IndentationError    缩进错误<br>TabError    Tab 和空格混用<br>SystemError    一般的解释器系统错误<br>TypeError    对类型无效的操作<br>ValueError    传入无效的参数<br>UnicodeError    Unicode 相关的错误<br>UnicodeDecodeError    Unicode 解码时的错误<br>UnicodeEncodeError    Unicode 编码时错误<br>UnicodeTranslateError    Unicode 转换时错误<br>Warning    警告的基类<br>DeprecationWarning    关于被弃用的特征的警告<br>FutureWarning    关于构造将来语义会有改变的警告<br>OverflowWarning    旧的关于自动提升为长整型(long)的警告<br>PendingDeprecationWarning    关于特性将会被废弃的警告<br>RuntimeWarning    可疑的运行时行为(runtime behavior)的警告<br>SyntaxWarning    可疑的语法的警告<br>UserWarning    用户代码生成的警告</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;python-常见的异常类型&quot;&gt;&lt;a href=&quot;#python-常见的异常类型&quot; class=&quot;headerlink&quot; title=&quot;python 常见的异常类型&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://www.cnblogs.com/zln1021/p/6
      
    
    </summary>
    
    
      <category term="python" scheme="http://yoursite.com/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>python装饰器</title>
    <link href="http://yoursite.com/2019/02/18/python%E8%A3%85%E9%A5%B0%E5%99%A8/"/>
    <id>http://yoursite.com/2019/02/18/python装饰器/</id>
    <published>2019-02-18T07:00:46.000Z</published>
    <updated>2019-02-18T07:02:00.549Z</updated>
    
    <content type="html"><![CDATA[<h1 id="python-装饰器"><a href="#python-装饰器" class="headerlink" title="python 装饰器"></a><a href="https://www.cnblogs.com/lianyingteng/p/7743876.html" target="_blank" rel="noopener">python 装饰器</a></h1><p>　　以前你有没有这样一段经历：很久之前你写过一个函数，现在你突然有了个想法就是你想看看，以前那个函数在你数据集上的运行时间是多少，这时候你可以修改之前代码为它加上计时的功能，但是这样的话是不是还要大体读读你之前的这个的代码，稍微搞清楚一点它的逻辑，才敢给它添加新的东西。这样是不是很繁琐，要是你之前写的代码足够乱足够长，再去读它是不是很抓狂…。实际工作中，我们常常会遇到这样的场景，可能你的需求还不只是这么简单。那么有没有一种可以不对源码做任何修改，并且可以很好的实现你所有需求的手段呢？答案当然是有，这就是今天我们要介绍的python装饰器。有了装饰器，你除了不用担心前面提到的问题，并且还可以很好的处理接下来要做的事：那就是现在你又有了一个新的需求，比如为另一个函数添加计时功能，这时就非常简单了，把要装饰的函数丢给装饰器就好了，它会自动给你添加完功能并返回给你。是不是很神奇？下面我们将一层层剥开它的神秘面纱。</p><h2 id="1-闭包函数"><a href="#1-闭包函数" class="headerlink" title="1. 闭包函数"></a>1. 闭包函数</h2><p>　　在看装饰器之前，我们先来搞清楚什么是闭包函数。python是一种面向对象的编程语言，在python中一切皆对象，这样就使得变量所拥有的属性，函数也同样拥有。这样我们就可以理解在函数内创建一个函数的行为是完全合法的。这种函数被叫做内嵌函数，这种函数只可以在外部函数的作用域内被正常调用，在外部函数的作用域之外调用会报错，例如：</p><p>　　　　　　 <img src="https://images2017.cnblogs.com/blog/1251096/201710/1251096-20171028145152195-1360676939.png" alt="img"></p><p>而如果内部函数里引用了外部函数里定义的对象（甚至是外层之外，但不是全局变量），那么此时内部函数就被称为<strong>闭包函数</strong>。闭包函数所引用的外部定义的变量被叫做<strong>自由变量</strong>。闭包从语法上看非常简单，但是却有强大的作用。<strong>闭包可以将其自己的代码和作用域以及外部函数的作用结合在一起</strong>。下面给出一个简单的闭包的例子：</p><p><a href="javascript:void(0" target="_blank" rel="noopener"><img src="http://common.cnblogs.com/images/copycode.gif" alt="复制代码"></a>;)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">def count():</span><br><span class="line">    a = 1</span><br><span class="line">    b = 1</span><br><span class="line">    def sum():</span><br><span class="line">        c = 1</span><br><span class="line">        return a + c  # a - 自由变量</span><br><span class="line">    return sum</span><br></pre></td></tr></table></figure><p><a href="javascript:void(0" target="_blank" rel="noopener"><img src="http://common.cnblogs.com/images/copycode.gif" alt="复制代码"></a>;)</p><p> <strong>总结</strong>：什么函数可以被称为闭包函数呢？主要是满足两点：函数内部定义的函数；引用了外部变量但非全局变量。</p><h2 id="2-python装饰器"><a href="#2-python装饰器" class="headerlink" title="2. python装饰器"></a>2. python装饰器</h2><p>　　有了闭包函数的概念，我们再去理解装饰器会相对容易一些。<strong>python装饰器本质上就是一个函数，它可以让其他函数在不需要做任何代码变动的前提下增加额外的功能，装饰器的返回值也是一个函数对象（函数的指针）</strong>。装饰器函数的外部函数传入我要装饰的函数名字，返回经过修饰后函数的名字；内层函数（闭包）负责修饰被修饰函数。从上面这段描述中我们需要记住装饰器的几点属性，以便后面能更好的理解：</p><p>　　　　实质： 是一个函数</p><p>　　　　参数：是你要装饰的函数名（并<strong>非函数调用</strong>）</p><p>　　　　返回：是装饰完的函数名（也<strong>非函数调用</strong>）</p><p>　　　　作用：为已经存在的对象添加额外的功能</p><p>　　　　特点：不需要对对象做任何的代码上的变动</p><p>python装饰器有很多经典的应用场景，比如：插入日志、性能测试、事务处理、权限校验等。装饰器是解决这类问题的绝佳设计。并且从引入中的列子中我们也可以归纳出：<strong>装饰器最大的作用就是对于我们已经写好的程序，我们可以抽离出一些雷同的代码组建多个特定功能的装饰器，这样我们就可以针对不同的需求去使用特定的装饰器，这时因为源码去除了大量泛化的内容而使得源码具有更加清晰的逻辑</strong>。</p><h3 id="2-1-函数装饰器"><a href="#2-1-函数装饰器" class="headerlink" title="2.1  函数装饰器"></a>2.1  函数装饰器</h3><h4 id="函数的函数装饰器"><a href="#函数的函数装饰器" class="headerlink" title="函数的函数装饰器"></a>函数的函数装饰器</h4><p>我们还是以为函数添加计时功能为例，讲述函数装饰器。</p><p><a href="javascript:void(0" target="_blank" rel="noopener"><img src="http://common.cnblogs.com/images/copycode.gif" alt="复制代码"></a>;)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">import time</span><br><span class="line"></span><br><span class="line">def decorator(func):</span><br><span class="line">    def wrapper(*args, **kwargs):</span><br><span class="line">        start_time = time.time()</span><br><span class="line">        func()</span><br><span class="line">        end_time = time.time()</span><br><span class="line">        print(end_time - start_time)</span><br><span class="line"></span><br><span class="line">    return wrapper</span><br><span class="line"></span><br><span class="line">@decorator </span><br><span class="line">def func():</span><br><span class="line">    time.sleep(0.8)</span><br><span class="line"></span><br><span class="line">func() # 函数调用</span><br><span class="line"># 输出：0.800644397735595</span><br></pre></td></tr></table></figure><p><a href="javascript:void(0" target="_blank" rel="noopener"><img src="http://common.cnblogs.com/images/copycode.gif" alt="复制代码"></a>;)</p><p>在上面代码中 func是我要装饰器的函数，我想用装饰器显示func函数运行的时间。@decorator这个语法相当于 执行 func = decorator(func)，为func函数装饰并返回。在来看一下我们的装饰器函数 - decorator，该函数的传入参数是func （被装饰函数），返回参数是内层函数。这里的内层函数-wrapper，其实就相当于闭包函数，它起到装饰给定函数的作用，wrapper参数为<em>args, **kwargs。</em>args表示的参数以列表的形式传入；**kwargs表示的参数以字典的形式传入：</p><p>　　　　　　　　<img src="https://images2017.cnblogs.com/blog/1251096/201710/1251096-20171028155445320-839180786.png" alt="img"></p><p>从图中我们可以看到：凡是以key=value形式的参数均存在kwargs中，剩下的所有参数都以列表的形式存于args中。这里要注意的是：为了不破坏原函数的逻辑，我们要保证内层函数wrapper和被装饰函数func的传入参数和返回值类型必须保持一致。</p><h4 id="类方法的函数装饰器"><a href="#类方法的函数装饰器" class="headerlink" title="类方法的函数装饰器"></a>类方法的函数装饰器</h4><p>　　类方法的函数装饰器和函数的函数装饰器类似。</p><p><a href="javascript:void(0" target="_blank" rel="noopener"><img src="http://common.cnblogs.com/images/copycode.gif" alt="复制代码"></a>;)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">import time</span><br><span class="line"></span><br><span class="line">def decorator(func):</span><br><span class="line">    def wrapper(me_instance):</span><br><span class="line">        start_time = time.time()</span><br><span class="line">        func(me_instance)</span><br><span class="line">        end_time = time.time()</span><br><span class="line">        print(end_time - start_time)</span><br><span class="line">    return wrapper</span><br><span class="line"></span><br><span class="line">class Method(object):</span><br><span class="line"></span><br><span class="line">    @decorator </span><br><span class="line">    def func(self):</span><br><span class="line">        time.sleep(0.8)</span><br><span class="line"></span><br><span class="line">p1 = Method()</span><br><span class="line">p1.func() # 函数调用</span><br></pre></td></tr></table></figure><p><a href="javascript:void(0" target="_blank" rel="noopener"><img src="http://common.cnblogs.com/images/copycode.gif" alt="复制代码"></a>;)</p><p>对于类方法来说，都会有一个默认的参数self，它实际表示的是类的一个实例，所以在装饰器的内部函数wrapper也要传入一个参数 - me_instance就表示将类的实例p1传给wrapper，其他的用法都和函数装饰器相同。</p><h3 id="2-2-类装饰器"><a href="#2-2-类装饰器" class="headerlink" title="2.2 类装饰器"></a>2.2 类装饰器</h3><p>　　前面我们提到的都是让 函数作为装饰器去装饰其他的函数或者方法，那么可不可以让 一个类发挥装饰器的作用呢？答案肯定是可以的，一切皆对象嚒，函数和类本质没有什么不一样。类的装饰器是什么样子的呢？</p><p><a href="javascript:void(0" target="_blank" rel="noopener"><img src="http://common.cnblogs.com/images/copycode.gif" alt="复制代码"></a>;)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">class Decorator(object):</span><br><span class="line">    def __init__(self, f):</span><br><span class="line">        self.f = f</span><br><span class="line">    def __call__(self):</span><br><span class="line">        print(&quot;decorator start&quot;)</span><br><span class="line">        self.f()</span><br><span class="line">        print(&quot;decorator end&quot;)</span><br><span class="line"></span><br><span class="line">@Decorator</span><br><span class="line">def func():</span><br><span class="line">    print(&quot;func&quot;)</span><br><span class="line"></span><br><span class="line">func()</span><br></pre></td></tr></table></figure><p><a href="javascript:void(0" target="_blank" rel="noopener"><img src="http://common.cnblogs.com/images/copycode.gif" alt="复制代码"></a>;)</p><p>这里有注意的是：<strong><strong>call</strong>()是一个特殊方法，它可将**</strong>一个类实例变成一个可调用对象**:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">p = Decorator(func) # p是类Decorator的一个实例</span><br><span class="line">p() # 实现了__call__()方法后，p可以被调用</span><br></pre></td></tr></table></figure><p>要使用类装饰器必须实现类中的<strong>call</strong>()方法，就相当于将实例变成了一个方法。</p><h3 id="2-3-装饰器链"><a href="#2-3-装饰器链" class="headerlink" title="2.3  装饰器链"></a>2.3  装饰器链</h3><p>　　一个python函数也可以被多个装饰器修饰，要是有多个装饰器时，这些装饰器的执行顺序是怎么样的呢？</p><p>　　　　　　　　<img src="https://images2017.cnblogs.com/blog/1251096/201710/1251096-20171028170526992-2025082647.png" alt="img"></p><p>可见，多个装饰器的执行顺序：是<strong>从近到远</strong>依次执行。</p><h3 id="2-4-python装饰器库-functools"><a href="#2-4-python装饰器库-functools" class="headerlink" title="2.4  python装饰器库 - functools"></a>2.4  python装饰器库 - functools</h3><p><a href="javascript:void(0" target="_blank" rel="noopener"><img src="http://common.cnblogs.com/images/copycode.gif" alt="复制代码"></a>;)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">def decorator(func):</span><br><span class="line">    def inner_function():</span><br><span class="line">        pass</span><br><span class="line">    return inner_function</span><br><span class="line"></span><br><span class="line">@decorator</span><br><span class="line">def func():</span><br><span class="line">    pass</span><br><span class="line"></span><br><span class="line">print(func.__name__)</span><br><span class="line"></span><br><span class="line"># 输出： inner_function</span><br></pre></td></tr></table></figure><p><a href="javascript:void(0" target="_blank" rel="noopener"><img src="http://common.cnblogs.com/images/copycode.gif" alt="复制代码"></a>;)</p><p> 上述代码最后执行的结果不是 func，而是 inner_function！这表示被装饰函数自身的信息丢失了！怎么才能避免这种问题的发生呢？</p><p>可以借助functools.wraps()函数：</p><p><a href="javascript:void(0" target="_blank" rel="noopener"><img src="http://common.cnblogs.com/images/copycode.gif" alt="复制代码"></a>;)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">from functools import wraps</span><br><span class="line">def decorator(func):</span><br><span class="line">    @wraps(func) </span><br><span class="line">    def inner_function():</span><br><span class="line">        pass</span><br><span class="line">    return inner_function</span><br><span class="line"></span><br><span class="line">@decorator</span><br><span class="line">def func():</span><br><span class="line">    pass</span><br><span class="line"></span><br><span class="line">print(func.__name__)</span><br><span class="line"></span><br><span class="line">#输出： func</span><br></pre></td></tr></table></figure><p><a href="javascript:void(0" target="_blank" rel="noopener"><img src="http://common.cnblogs.com/images/copycode.gif" alt="复制代码"></a>;)</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;python-装饰器&quot;&gt;&lt;a href=&quot;#python-装饰器&quot; class=&quot;headerlink&quot; title=&quot;python 装饰器&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://www.cnblogs.com/lianyingteng/p/7743876.
      
    
    </summary>
    
    
      <category term="python" scheme="http://yoursite.com/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>mysql命令大全</title>
    <link href="http://yoursite.com/2019/02/18/mysql%E5%91%BD%E4%BB%A4%E5%A4%A7%E5%85%A8/"/>
    <id>http://yoursite.com/2019/02/18/mysql命令大全/</id>
    <published>2019-02-18T06:56:09.000Z</published>
    <updated>2019-02-18T06:59:39.818Z</updated>
    
    <content type="html"><![CDATA[<h1 id="安装命令"><a href="#安装命令" class="headerlink" title="安装命令"></a>安装命令</h1><p>mysqld –defaults-file=C:\my.ini –initialize –console   初始文件和root密码<br>mysqld –console  开启服务<br>ALTER USER “root”@“localhost”IDENTIFIED BY “trclyy20010320”;  改名字<br>\q 退出<br>mysqld  –install MySQL80  –defaults-file=”C:\my.ini”  注册window服务<br>net start mysql  开启数据库</p><p>mysql -u root -ptrc  我的密码</p><h1 id="操作指令"><a href="#操作指令" class="headerlink" title="操作指令"></a>操作指令</h1><h3 id="1、MySQL常用命令"><a href="#1、MySQL常用命令" class="headerlink" title="1、MySQL常用命令"></a>1、MySQL常用命令</h3><p>create database name; 创建数据库</p><p>use databasename; 选择数据库</p><p>drop database name 直接删除数据库，不提醒</p><p>show tables; 显示表</p><p>describe tablename; 表的详细描述</p><p>select 中加上distinct去除重复字段</p><p>mysqladmin drop databasename 删除数据库前，有提示。</p><p>显示当前mysql版本和当前日期</p><p>select version(),current_date;</p><h3 id="2、修改mysql中root的密码："><a href="#2、修改mysql中root的密码：" class="headerlink" title="2、修改mysql中root的密码："></a>2、修改mysql中root的密码：</h3><p>shell&gt;mysql -u root -p</p><p>mysql&gt; update user set password=password(”xueok654123″) where user=’root’;</p><p>mysql&gt; flush privileges //刷新数据库</p><p>mysql&gt;use dbname； 打开数据库：</p><p>mysql&gt;show databases; 显示所有数据库</p><p>mysql&gt;show tables; 显示数据库mysql中所有的表：先use mysql；然后</p><p>mysql&gt;describe user; 显示表mysql数据库中user表的列信息）；</p><h3 id="3、grant"><a href="#3、grant" class="headerlink" title="3、grant"></a>3、grant</h3><p>创建一个可以从任何地方连接服务器的一个完全的超级用户，但是必须使用一个口令something做这个</p><p>mysql&gt; grant all privileges on <em>.</em> to user@localhost identified by ’something’ with</p><p>增加新用户</p><p>格式：grant select on 数据库.* to 用户名@登录主机 identified by “密码”</p><p>GRANT ALL PRIVILEGES ON <em>.</em> TO monty@localhost IDENTIFIED BY ’something’ WITH GRANT OPTION;</p><p>GRANT ALL PRIVILEGES ON <em>.</em> TO monty@”%” IDENTIFIED BY ’something’ WITH GRANT OPTION;</p><p>删除授权：</p><p>mysql&gt; revoke all privileges on <em>.</em> from root@”%”;</p><p>mysql&gt; delete from user where user=”root” and host=”%”;</p><p>mysql&gt; flush privileges;</p><p>创建一个用户custom在特定客户端it363.com登录，可访问特定数据库fangchandb</p><p>mysql &gt;grant select, insert, update, delete, create,drop on fangchandb.* to custom@ it363.com identified by ‘ passwd’</p><p>重命名表:</p><p>mysql &gt; alter table t1 rename t2;</p><h3 id="4、mysqldump"><a href="#4、mysqldump" class="headerlink" title="4、mysqldump"></a>4、mysqldump</h3><p>备份数据库</p><p>shell&gt; mysqldump -h host -u root -p dbname &gt;dbname_backup.sql</p><p>恢复数据库</p><p>shell&gt; mysqladmin -h myhost -u root -p create dbname</p><p>shell&gt; mysqldump -h host -u root -p dbname &lt; dbname_backup.sql</p><p>如果只想卸出建表指令，则命令如下：</p><p>shell&gt; mysqladmin -u root -p -d databasename &gt; a.sql</p><p>如果只想卸出插入数据的sql命令，而不需要建表命令，则命令如下：</p><p>shell&gt; mysqladmin -u root -p -t databasename &gt; a.sql</p><p>那么如果我只想要数据，而不想要什么sql命令时，应该如何操作呢？</p><p>　　 mysqldump -T./ phptest driver</p><p>其中，只有指定了-T参数才可以卸出纯文本文件，表示卸出数据的目录，./表示当前目录，即与mysqldump同一目录。如果不指定driver 表，则将卸出整个数据库的数据。每个表会生成两个文件，一个为.sql文件，包含建表执行。另一个为.txt文件，只包含数据，且没有sql指令。</p><h1 id="数据库常用基本命令-增删改查-、排序"><a href="#数据库常用基本命令-增删改查-、排序" class="headerlink" title="数据库常用基本命令_增删改查 、排序"></a>数据库常用基本命令_增删改查 、排序</h1><h2 id="数据库常用基本命令："><a href="#数据库常用基本命令：" class="headerlink" title="数据库常用基本命令："></a>数据库常用基本命令：</h2><p>show  databases； #查看数据库</p><p>use + 数据库名称； #进入数据库</p><p>show tables；        #查看对应数据库中的表</p><p>select  <em> from info； #查看info表中的数据， </em> 代表所有数据</p><p>select 字段 from 表； #查看指定的数据，从表中查看</p><h2 id="创建数据库"><a href="#创建数据库" class="headerlink" title="创建数据库"></a>创建数据库</h2><p>create database school ;    #创建school数据库</p><h2 id="创建表：一定要进入到数据库中"><a href="#创建表：一定要进入到数据库中" class="headerlink" title="创建表：一定要进入到数据库中"></a>创建表：一定要进入到数据库中</h2><p>举例：</p><p>create table info (id int not null primary key auto_increment,name char (10) not null,score decimal(5,2),hobby int (2)) ;</p><p>#创建一个名为info的数据表，表的属性（id 类型为int 不能为空null 为主键 自增列，name char（字符串长度为10）不为null空值，成绩 最大5位数字其中两位小数，hobby 类型为int（2字节））;</p><p>PS详解：</p><p>创建表（表的属性）</p><p>not null：不为空值</p><p>primary key：主键</p><p>auto_increment: 自增列</p><p>char：定长字符串类型</p><p>说明:M为最大可存储字节数 汉子占两个字节，通过指定m，来限制存储的最大字符数长度，char(20)和varchar(20)将最多只能存储20个字符，超过的字符将会被截掉。m必须小于该类型允许的最大字符数。</p><p>decimal(5,2)：定点精度和小数位数。【最大5位数字，其中两位小数】</p><p>5是(有效位数：可储存的最大十进位数总数，小数点左右两侧都包括在内。有效位数必须是 1 至最大有效位数 38 之间的值。）</p><p>2是 (小数位数：小数点右侧所能储存的最大十进位数。小数位数必须是从 0 到 4 的值。只有在指定了有效位数时，才能指定小数位数。预设小数位数是 0；因此，0 &lt;= 1 &lt;= 4。最大储存体大小会随著有效位数而不同。)</p><h2 id="常用基本命令"><a href="#常用基本命令" class="headerlink" title="常用基本命令"></a>常用基本命令</h2><p>insert into info(id,name,score,hobby) values(1,’zhangsan’,95,1);     #表后面插入数据</p><p>语法 ：insert into 表名(列,列,列) values(填入的数据,‘填入的数据’, 填入的数据);</p><p>select * from info where id=2;                          #条件筛选，where代表的是条件</p><p>update info set score=75 where id=6;           #修改表中的信息 ，set代表的是列，where代表的是条件</p><p>delete from info where name=’test’;   #删除条件为name=‘test’的行</p><p>alter table test01 rename info01;             #修改表名</p><p>alter table info change name username varchar(10) unique key;     #修改信息名，并设置约束</p><p>insert into info(id,name,score) values(6,’test’,null);                #插入数据</p><p>insert into hob (sid,hobname) values (2,’聊天’),(3,’运动’)，(4,’游戏’);      #连续添加</p><p>Select * from info where id=6;             #条件筛选</p><p>delete from info where name=’test’;          #删除条件为name=’test’的那一行的全部信息。</p><p>select * from info where 1=1 order by score(asc升序)（desc降序）;                    #排序（升序/降序）</p><p>desc info;                   #查看表结构</p><p>select info.name,info.score,hob.hobname from info inner join hob where info.hobby=hob.id;</p><p>select username from info where hobby=(select sid from hob where hobname=’游泳’);         #多表查询</p><p>select a.name,a.score,b.hobname from info a inner join hob b where a.hobby=b.id;         #别名查询</p><p>create table infos select a.name,a.score,b.hobname from info a inner join hob b where a.hobby=b.id;           #新建表infos内容为多表查询结果</p><p>drop database infos;                  #删除infos表</p><h2 id="排序："><a href="#排序：" class="headerlink" title="排序："></a>排序：</h2><p>升序 order by asc</p><p>select * from info where 1=1 order by score asc;  # where 1=1 order by  score 默认是asc升序。</p><p>降序order by desc</p><p>select * from info where 1=1 order by score desc;</p><p>===========查询============</p><p>desc info ;  查看info表结构</p><p>select  #查询</p><p>多表相连查询</p><p>select * from info inner join hob where info.hobby=hob.id;</p><p>#表示查询info表和hob表，inner join是固定语法。</p><p>#多表查询，查看info的name列和红包列</p><p>select info.name,info.score,hob.hobname from info inner join hob where info.hobby</p><p>#多表查询结果创建为新的表格 名为infos</p><p>create tables infos select info.name,info.score,hob.hobname from info inner join hob where info.hobby</p><p>#创建别名查询</p><p>select a.name,a.score,b.hobname from info a inner join hob b where a.hobby=b.id;</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;安装命令&quot;&gt;&lt;a href=&quot;#安装命令&quot; class=&quot;headerlink&quot; title=&quot;安装命令&quot;&gt;&lt;/a&gt;安装命令&lt;/h1&gt;&lt;p&gt;mysqld –defaults-file=C:\my.ini –initialize –console   初始文件和ro
      
    
    </summary>
    
    
      <category term="mysql" scheme="http://yoursite.com/tags/mysql/"/>
    
  </entry>
  
  <entry>
    <title>python常用的数据库之_mysql基础篇</title>
    <link href="http://yoursite.com/2019/02/18/python%E5%B8%B8%E7%94%A8%E7%9A%84%E6%95%B0%E6%8D%AE%E5%BA%93%E4%B9%8B%E4%B8%80mysql%E5%9F%BA%E7%A1%80%E7%AF%87/"/>
    <id>http://yoursite.com/2019/02/18/python常用的数据库之一mysql基础篇/</id>
    <published>2019-02-18T06:46:16.000Z</published>
    <updated>2019-02-18T06:57:09.943Z</updated>
    
    <content type="html"><![CDATA[<h1 id="一-、数据表的设计"><a href="#一-、数据表的设计" class="headerlink" title="一 、数据表的设计"></a>一 、数据表的设计</h1><p>1.原理：在表中为了更加准确的存储数据，保证数据的正确有效，可以在创建表的时候，为表添加一些强制性的验证，包括数据字段的类型、约束。</p><p>1） 字段类型<br>​    在mysql中包含的数据类型很多，这里主要列出来常用的几种        </p><p>数字：int,decimal(小数的)；<br>例如decimal(5,2)的意思是，最大5位数，其中小数2位，1.2和2.33都行，但10000.21就不行，超出位数了        </p><p>字符串：char ,varchar,text<br>text存储比较多的字符串，比如商品的描述信息 char存储的是固定的字符串数据 varchar存储的是可变的数据 存储的是字符<br>char(8)存储的数据不满8个字符会在右侧自动补上空格字符–&gt;”abcd “</p><p>使用场景<br>存手机号码固定的就可以使用char(11)<br>varchar(8)存储数据不满8个字符，不会自动空格字符–&gt;“abcd”<br>例如:存姓名用varchar(8)<br>日期：datetime,date,time 1987-07-24<br>布尔：bit(比如性别，数据是否删除)</p><p>bit(8)八个二进制位<br>存储性别的时候：<br>存储0或者1开销少<br>如果存储male和female开销大<br>两个状态存储的时间建议使用存储0和1方式<br>2） 约束–主键、非空、惟一，默认值，外键，自动增长</p><p>约束就是限制的条件<br>主键primary key；不能重复，唯一标识，物理的存储方式，速度快<br>非空not null；比如要姓名不能为空，当保存为null的时候就会报错。<br>惟一unique；这个值是唯一的。有重复的了会报错（比如身份证）<br>默认default；如果不写就会有个默认值，这种叫默认,只有类型。<br>外键foreign key</p><h2 id="二-、数据库的安装"><a href="#二-、数据库的安装" class="headerlink" title="二 、数据库的安装"></a>二 、数据库的安装</h2><p>安装MySQL服务端和客户端</p><blockquote><p>1.检查mysql安装情况</p></blockquote><p>ps -ajx|grep mysql 查看进程方式查看</p><p>Mysql -uroot -p你的密码 进入mysql代表安装成功<br>sudo service mysql start 开启服务<br>sudo service mysql stop 停止服务<br>Sudo service mysql restart 重启服务</p><p>2&gt;1、 进入数据库<br>mysql –u用户名 –p你的密码<br>2、 查看所有的数据库<br>show databases<br>3、使用mysql数据库<br>use mysql<br>4、查看mysql库中所有的表<br>show tables<br>5、在user 这个表里面查看用户和用户权限字段<br>select  user,host from user;<br>6、为数据库创建新用户并且赋予权限允许外部链接<br>grant all privileges on <em>.</em> to 用户名@”%” identified by “用户名密码” with grant option;<br>7、 删除原来初始创建的root用户<br>delete from user where user=’root’ and host = ‘localhost’;<br>8、刷新数据库特权<br>flush privileges;<br>9、打开配置文件，将bind_address修改为0.0.0.0<br>sudo  vi /etc/mysql/mysql.conf.d/mysqld.conf<br>10.重启mysql服务，使用windows下客户端进行连接</p><h3 id="3-gt-数据库命令行操作"><a href="#3-gt-数据库命令行操作" class="headerlink" title="3&gt;数据库命令行操作"></a>3&gt;数据库命令行操作</h3><p>1.查看所有数据库<br>show databases;<br>2.切换数据库<br>use [数据库名];<br>3.创建数据库<br>create database [数据库名] ;<br>4.删除数据库<br>drop database [数据库名];<br>5.对表的操作<br>查看所有表<br>show tables;<br>6.创建表<br>create table [表名]（字段1 类型1 约束1，字段2 类型2 约束2）;<br>7.删除表<br>drop table [表名]<br>8.修改表名字<br>rename table [表名] to [新名]</p><p>对字段的操作<br>9.查询字段(表结构)<br>desc [表名]<br>10.增加表的字段<br>alter table [表明]add [字段名 类型 约束]<br>11.删除字段<br>alter table [表名]drop[字段名]<br>12.修改字段<br>alter table [表名] change [字段名] [新字段名 类型 约束]<br>① 、alter table students change id id int;<br>②、alter table students drop primary key;</p><p>对数据的操作<br>13.增加数据<br>插入一个全字段<br>insert into students values(0,’xxx’,31,1)<br>插入多个全字段<br>insert into students values(0,’liudehua’,24,0),(0,’yangmi’,31,0)<br>插入一个部分字段<br>insert into students(id,name) values(0,’zhaoliying’)<br>插入多个部分字段<br>insert into students(id,name) values(0,’liushishi’),(0,’linzhiling’)<br>14.删除某一条<br>delete from students where id=1;<br>15.清空<br>delete from students;<br>16.修改数据<br>update student set name=’xxx’ where name=’liudehua’<br>17.查找所有数据<br>select * from students<br>18.数据库备份和恢复<br>备份： sudo mysqldump –u数据库名 –p数据库密码 备份文件夹名&gt; ~/Desktop/文件夹名back.sql<br>恢复：进入mysql先要创建一个新的数据库，注意字符集<br>然后退出mysql</p><p>sudo mysql –u数据库名 –p数据库密码 &lt; ~/Desktop/备份文件夹名back.sql</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;一-、数据表的设计&quot;&gt;&lt;a href=&quot;#一-、数据表的设计&quot; class=&quot;headerlink&quot; title=&quot;一 、数据表的设计&quot;&gt;&lt;/a&gt;一 、数据表的设计&lt;/h1&gt;&lt;p&gt;1.原理：在表中为了更加准确的存储数据，保证数据的正确有效，可以在创建表的时候，为表
      
    
    </summary>
    
    
      <category term="mysql" scheme="http://yoursite.com/tags/mysql/"/>
    
  </entry>
  
  <entry>
    <title>python3数据库分类和比较（入门）</title>
    <link href="http://yoursite.com/2019/02/18/python3%E6%95%B0%E6%8D%AE%E5%BA%93%E5%88%86%E7%B1%BB%E5%92%8C%E6%AF%94%E8%BE%83%EF%BC%88%E5%85%A5%E9%97%A8%EF%BC%89/"/>
    <id>http://yoursite.com/2019/02/18/python3数据库分类和比较（入门）/</id>
    <published>2019-02-18T06:38:33.000Z</published>
    <updated>2019-02-18T06:39:22.561Z</updated>
    
    <content type="html"><![CDATA[<p>目录：<br>一、关系型数据库<br>（一）常用关系型数据库：<br>二、非关系型数据库<br>（一）常用非关系型数据库：<br>（二）分类：<br>文档型<br>key-value型<br>列式数据库<br>图形数据库<br>一、关系型数据库<br>（一）常用关系型数据库：<br>MySQL、SQL-Server、SQLite、MariaDB、ORACLE、PostgreSQL、…<br>二、非关系型数据库<br>（一）常用非关系型数据库：<br>CouchDB、MongoDB、 Redis、Voldemort、Oracle、Cassandra、HBase、Riak、Neo4j、InfoGrid、Infinite Graph、 …<br>（二）分类：<br>文档型<br>举例    CouchDB、MongoDB<br>典型应用场景    Web应用（与Key-Value类似，Value是结构化的，不同的是数据库能够了解Value的内容）<br>数据模型    Key-Value为对应的键值对，Value为结构化数据<br>强项    数据结构要求不严格，表结构可变，不需要预先定于表结构<br>弱项    查询性能不高，而且缺乏统一的查询语法<br>key-value型<br>举例    Redis、Voldemort、Oracle Berkeley DB<br>典型应用场景    内容缓存，主要用于处理大量数据的高访问负载，也用于一些日志系统等<br>数据模型    Key指向Value的键值对，通常用hash table来实现<br>强项    查询速度快<br>弱项    数据无结构化，通常只被当作字符串或者二进制数据<br>列式数据库<br>举例    Cassandra、HBase、Riak<br>典型应用场景    分布式的文件系统<br>数据模型    以列簇式存储，将同一列数据存在一起<br>强项    查询速度快，可扩展性强，更容易进行分布式扩展<br>弱项    功能相对局限<br>图形数据库<br>举例    Neo4j、InfoGrid、Infinite Graph<br>典型应用场景    专注于构建关系图谱，如社交网络，推荐系统等<br>数据模型    图结构<br>强项    利用图结构相关算法。如最短路径寻址、N度关系查找等</p><h2 id="弱项-很多时候需要对整个图做计算才能得出需要的信息，而且这种结构不太好做分布式的集群方案"><a href="#弱项-很多时候需要对整个图做计算才能得出需要的信息，而且这种结构不太好做分布式的集群方案" class="headerlink" title="弱项    很多时候需要对整个图做计算才能得出需要的信息，而且这种结构不太好做分布式的集群方案"></a>弱项    很多时候需要对整个图做计算才能得出需要的信息，而且这种结构不太好做分布式的集群方案</h2>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;目录：&lt;br&gt;一、关系型数据库&lt;br&gt;（一）常用关系型数据库：&lt;br&gt;二、非关系型数据库&lt;br&gt;（一）常用非关系型数据库：&lt;br&gt;（二）分类：&lt;br&gt;文档型&lt;br&gt;key-value型&lt;br&gt;列式数据库&lt;br&gt;图形数据库&lt;br&gt;一、关系型数据库&lt;br&gt;（一）常用关系型数据库
      
    
    </summary>
    
    
      <category term="数据库" scheme="http://yoursite.com/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
  </entry>
  
  <entry>
    <title>请求包含哪几个部分（请求行、请求头、请求体）</title>
    <link href="http://yoursite.com/2019/02/18/%E8%AF%B7%E6%B1%82%E5%8C%85%E5%90%AB%E5%93%AA%E5%87%A0%E4%B8%AA%E9%83%A8%E5%88%86%EF%BC%88%E8%AF%B7%E6%B1%82%E8%A1%8C%E3%80%81%E8%AF%B7%E6%B1%82%E5%A4%B4%E3%80%81%E8%AF%B7%E6%B1%82%E4%BD%93%EF%BC%89/"/>
    <id>http://yoursite.com/2019/02/18/请求包含哪几个部分（请求行、请求头、请求体）/</id>
    <published>2019-02-18T06:35:12.000Z</published>
    <updated>2019-02-18T06:37:52.468Z</updated>
    
    <content type="html"><![CDATA[<h1 id="http-请求包含哪几个部分（请求行、请求头、请求体）"><a href="#http-请求包含哪几个部分（请求行、请求头、请求体）" class="headerlink" title="http 请求包含哪几个部分（请求行、请求头、请求体）"></a>http 请求包含哪几个部分（请求行、请求头、请求体）</h1><p>http协议报文</p><p>​    1.请求报文(请求行/请求头/请求数据/空行)</p><p>​        请求行</p><p>​            求方法字段、URL字段和HTTP协议版本</p><p>​            例如：GET /index.html HTTP/1.1</p><p>​                get方法将数据拼接在url后面，传递参数受限</p><p>​            请求方法：</p><p>​                GET、POST、HEAD、PUT、DELETE、OPTIONS、TRACE、CONNECT</p><p>​        请求头(key value形式)</p><p>​            User-Agent：产生请求的浏览器类型。</p><p>​            Accept：客户端可识别的内容类型列表。</p><p>​            Host：主机地址</p><p>​        请求数据</p><p>​            post方法中，会把数据以key value形式发送请求</p><p>​        空行</p><p>​            发送回车符和换行符，通知服务器以下不再有请求头</p><p>​    2.响应报文(状态行、消息报头、响应正文)</p><p>​        状态行</p><p>​        消息报头</p><p>​        响应正文</p><p>例如请求数据：</p><p><img src="https://common.cnblogs.com/images/copycode.gif" alt="img"></p><p>1 GET/sample.jspHTTP/1.1</p><p>2 Accept:image/gif.image/jpeg,<em>/</em></p><p>3 Accept-Language:zh-cn</p><p>4 Connection:Keep-Alive</p><p>5 Host:localhost</p><p>6 User-Agent:Mozila/4.0(compatible;MSIE5.01;Window NT5.0)</p><p>7 Accept-Encoding:gzip,deflate</p><p>8</p><p>9 username=jinqiao&amp;password=1234</p><p><img src="https://common.cnblogs.com/images/copycode.gif" alt="img"></p><p>第一行为http请求行，包含方法，URI 和http版本</p><p>2-7为请求头，包含浏览器，主机，接受的编码方式和压缩方式</p><p>第8行表示一个空行 表示请求头结束 这个空行是必须的</p><p>第9行是数据体，比如是需要查询的信息。</p><p>http响应体由三部分组成：</p><p>http响应由三个部分组成分别是状态行，响应头，响应正文。</p><p>状态行是由：HTTP-Version+Status-Code+Reason-Phrase</p><p>比如：HTTP/1.1 200 ok</p><p>分别表示http版本 + 状态码 + 状态代码的文本描述</p><p>状态码：</p><table><thead><tr><th>1xx</th><th>指示信息–表示请求已接收，继续处理</th></tr></thead><tbody><tr><td>2xx</td><td>成功–表示请求已被成功接收、理解、接受</td></tr><tr><td>3xx</td><td>重定向–要完成请求必须进行更进一步的操作。</td></tr><tr><td>4xx</td><td>客户端错误–请求有语法错误或请求无法实现。</td></tr><tr><td>5xx</td><td>服务器端错误–服务器未能实现合法的请求。</td></tr></tbody></table><p>响应头：包含服务器类型，日期，长度，内容类型等</p><p>Server:Apache Tomcat/5.0.12</p><p>Date:Mon,6Oct2003 13:13:33 GMT</p><p>Content-Type:text/html</p><p>Last-Moified:Mon,6 Oct 2003 13:23:42 GMT</p><p>Content-Length:112</p><p> 响应正文响应正文就是服务器返回的HTML页面或者json数据</p><h1 id="一次完整的HTTP请求过程"><a href="#一次完整的HTTP请求过程" class="headerlink" title="一次完整的HTTP请求过程"></a><a href="https://www.cnblogs.com/engeng/articles/5959335.html" target="_blank" rel="noopener">一次完整的HTTP请求过程</a></h1><p>当我们在浏览器的地址栏输入 <a href="http://www.linux178.com" target="_blank" rel="noopener">www.linux178.com</a> ，然后回车，回车这一瞬间到看到页面到底发生了什么呢？</p><p>以下过程仅是个人理解：</p><p>域名解析 –&gt; 发起TCP的3次握手 –&gt; 建立TCP连接后发起http请求 –&gt; 服务器响应http请求，浏览器得到html代码 –&gt; 浏览器解析html代码，并请求html代码中的资源（如js、css、图片等） –&gt; 浏览器对页面进行渲染呈现给用户</p><p>关于HTTP协议可以参考以下：</p><p>HTTP协议漫谈  <a href="http://kb.cnblogs.com/page/140611/" target="_blank" rel="noopener">http://kb.cnblogs.com/page/140611/</a></p><p>HTTP协议概览  <a href="http://www.cnblogs.com/vamei/archive/2013/05/11/3069788.html" target="_blank" rel="noopener">http://www.cnblogs.com/vamei/archive/2013/05/11/3069788.html</a></p><p>了解HTTP Headers的方方面面  <a href="http://kb.cnblogs.com/page/55442/" target="_blank" rel="noopener">http://kb.cnblogs.com/page/55442/</a></p><p>以下就是上面过程的一一分析，我们就以Chrome浏览器为例：</p><p>1.域名解析</p><p>首先Chrome浏览器会解析 <a href="http://www.linux178.com" target="_blank" rel="noopener">www.linux178.com</a> 这个域名（准确的叫法应该是主机名）对应的IP地址。怎么解析到对应的IP地址？</p><p>① Chrome浏览器 会首先搜索浏览器自身的DNS缓存（缓存时间比较短，大概只有1分钟，且只能容纳1000条缓存），看自身的缓存中是否有<a href="http://www.linux178.com" target="_blank" rel="noopener">www.linux178.com</a> 对应的条目，而且没有过期，如果有且没有过期则解析到此结束。</p><p>​    注：我们怎么查看Chrome自身的缓存？可以使用 chrome://net-internals/#dns 来进行查看</p><p>② 如果浏览器自身的缓存里面没有找到对应的条目，那么Chrome会搜索操作系统自身的DNS缓存,如果找到且没有过期则停止搜索解析到此结束.</p><p>​     注：怎么查看操作系统自身的DNS缓存，以Windows系统为例，可以在命令行下使用 ipconfig /displaydns 来进行查看  </p><p>③ 如果在Windows系统的DNS缓存也没有找到，那么尝试读取hosts文件（位于C:\Windows\System32\drivers\etc），看看这里面有没有该域名对应的IP地址，如果有则解析成功。</p><p>④ 如果在hosts文件中也没有找到对应的条目，浏览器就会发起一个DNS的系统调用，就会向本地配置的首选DNS服务器（一般是电信运营商提供的，也可以使用像Google提供的DNS服务器）发起域名解析请求（通过的是UDP协议向DNS的53端口发起请求，这个请求是递归的请求，也就是运营商的DNS服务器必须得提供给我们该域名的IP地址），运营商的DNS服务器首先查找自身的缓存，找到对应的条目，且没有过期，则解析成功。如果没有找到对应的条目，则有运营商的DNS代我们的浏览器发起迭代DNS解析请求，它首先是会找根域的DNS的IP地址（这个DNS服务器都内置13台根域的DNS的IP地址），找打根域的DNS地址，就会向其发起请求（请问<a href="http://www.linux178.com这个域名的IP地址是多少啊？），根域发现这是一个顶级域com域的一个域名，于是就告诉运营商的DNS我不知道这个域名的IP地址，但是我知道com域的IP地址，你去找它去，于是运营商的DNS就得到了com域的IP地址，又向com域的IP地址发起了请求（请问www.linux178.com这个域名的IP地址是多少?）,com域这台服务器告诉运营商的DNS我不知道www.linux178.com这个域名的IP地址，但是我知道linux178.com这个域的DNS地址，你去找它去，于是运营商的DNS又向linux178.com这个域名的DNS地址（这个一般就是由域名注册商提供的，像万网，新网等）发起请求（请问www.linux178.com这个域名的IP地址是多少？），这个时候linux178.com域的DNS服务器一查，诶，果真在我这里，于是就把找到的结果发送给运营商的DNS服务器，这个时候运营商的DNS服务器就拿到了www.linux178.com这个域名对应的IP地址，并返回给Windows系统内核，内核又把结果返回给浏览器，终于浏览器拿到了www.linux178.com" target="_blank" rel="noopener">www.linux178.com这个域名的IP地址是多少啊？），根域发现这是一个顶级域com域的一个域名，于是就告诉运营商的DNS我不知道这个域名的IP地址，但是我知道com域的IP地址，你去找它去，于是运营商的DNS就得到了com域的IP地址，又向com域的IP地址发起了请求（请问www.linux178.com这个域名的IP地址是多少?）,com域这台服务器告诉运营商的DNS我不知道www.linux178.com这个域名的IP地址，但是我知道linux178.com这个域的DNS地址，你去找它去，于是运营商的DNS又向linux178.com这个域名的DNS地址（这个一般就是由域名注册商提供的，像万网，新网等）发起请求（请问www.linux178.com这个域名的IP地址是多少？），这个时候linux178.com域的DNS服务器一查，诶，果真在我这里，于是就把找到的结果发送给运营商的DNS服务器，这个时候运营商的DNS服务器就拿到了www.linux178.com这个域名对应的IP地址，并返回给Windows系统内核，内核又把结果返回给浏览器，终于浏览器拿到了www.linux178.com</a>  对应的IP地址，该进行一步的动作了。</p><p>注：一般情况下是不会进行以下步骤的</p><p>如果经过以上的4个步骤，还没有解析成功，那么会进行如下步骤（以下是针对Windows操作系统）：</p><p>⑤ 操作系统就会查找NetBIOS name Cache（NetBIOS名称缓存，就存在客户端电脑中的），那这个缓存有什么东西呢？凡是最近一段时间内和我成功通讯的计算机的计算机名和Ip地址，就都会存在这个缓存里面。什么情况下该步能解析成功呢？就是该名称正好是几分钟前和我成功通信过，那么这一步就可以成功解析。</p><p>⑥ 如果第⑤步也没有成功，那会查询WINS 服务器（是NETBIOS名称和IP地址对应的服务器）</p><p>⑦ 如果第⑥步也没有查询成功，那么客户端就要进行广播查找</p><p>⑧ 如果第⑦步也没有成功，那么客户端就读取LMHOSTS文件（和HOSTS文件同一个目录下，写法也一样）</p><p>如果第八步还没有解析成功，那么就宣告这次解析失败，那就无法跟目标计算机进行通信。只要这八步中有一步可以解析成功，那就可以成功和目标计算机进行通信。</p><p>看下图抓包截图：</p><p>Linux虚拟机测试，使用命令 wget <a href="http://www.linux178.com" target="_blank" rel="noopener">www.linux178.com</a> 来请求，发现直接使用chrome浏览器请求时，干扰请求比较多，所以就使用wget命令来请求，不过使用wget命令只能把index.html请求回来，并不会对index.html中包含的静态资源（js、css等文件）进行请求。</p><p><img src="http://s3.51cto.com/wyfs02/M00/11/7C/wKioL1LSWzzxRParAAKbC85UJtE371.jpg" alt="wKioL1LSWzzxRParAAKbC85UJtE371.jpg"></p><p>抓包分析：</p><p>① 号包，这个是那台虚拟机在广播，要获取192.168.100.254（也就是网关）的MAC地址，因为局域网的通信靠的是MAC地址，它为什么需要跟网关进行通信是因为我们的DNS服务器IP是外围IP，要出去必须要依靠网关帮我们出去才行。</p><p>② 号包，这个是网关收到了虚拟机的广播之后，回应给虚拟机的回应，告诉虚拟机自己的MAC地址，于是客户端找到了路由出口。</p><p>③ 号包，这个包是wget命令向系统配置的DNS服务器提出域名解析请求（准确的说应该是wget发起了一个DNS解析的系统调用），请求的域名<a href="http://www.linux178.com,期望得到的是IP6的地址（AAAA代表的是IPv6地址）" target="_blank" rel="noopener">www.linux178.com,期望得到的是IP6的地址（AAAA代表的是IPv6地址）</a></p><p>④ 号包，这个DNS服务器给系统的响应，很显然目前使用IPv6的还是极少数，所以得不到AAAA记录的</p><p>⑤ 号包，这个还是请求解析IPv6地址，但是<a href="http://www.linux178.com.leo.com这个主机名是不存在的，所以得到结果就是no" target="_blank" rel="noopener">www.linux178.com.leo.com这个主机名是不存在的，所以得到结果就是no</a> such name</p><p>⑥ 号包，这个才是请求的域名对应的IPv4地址（A记录）</p><p>⑦ 号包，DNS服务器不管是从缓存里面，还是进行迭代查询最终得到了域名的IP地址，响应给了系统，系统再给了wget命令，wget于是得到了<a href="http://www.linux178.com的IP地址，这里也可以看出客户端和本地的DNS服务器是递归的查询（也就是服务器必须给客户端一个结果）这就可以开始下一步了，进行TCP的三次握手。" target="_blank" rel="noopener">www.linux178.com的IP地址，这里也可以看出客户端和本地的DNS服务器是递归的查询（也就是服务器必须给客户端一个结果）这就可以开始下一步了，进行TCP的三次握手。</a></p><p>2.发起TCP的3次握手</p><p>拿到域名对应的IP地址之后，User-Agent（一般是指浏览器）会以一个随机端口（1024 &lt; 端口 &lt; 65535）向服务器的WEB程序（常用的有httpd,nginx等）80端口发起TCP的连接请求。这个连接请求（原始的http请求经过TCP/IP4层模型的层层封包）到达服务器端后（这中间通过各种路由设备，局域网内除外），进入到网卡，然后是进入到内核的TCP/IP协议栈（用于识别该连接请求，解封包，一层一层的剥开），还有可能要经过Netfilter防火墙（属于内核的模块）的过滤，最终到达WEB程序（本文就以Nginx为例），最终建立了TCP/IP的连接。</p><p>如下图：</p><p><img src="http://s3.51cto.com/wyfs02/M01/11/7C/wKioL1LSW6rjI1nhAAE63Uv8ZRY731.jpg" alt="wKioL1LSW6rjI1nhAAE63Uv8ZRY731.jpg"></p><p>1） Client首先发送一个连接试探，ACK=0 表示确认号无效，SYN = 1 表示这是一个连接请求或连接接受报文，同时表示这个数据报不能携带数据，seq = x 表示Client自己的初始序号（seq = 0 就代表这是第0号包），这时候Client进入syn_sent状态，表示客户端等待服务器的回复</p><p>2） Server监听到连接请求报文后，如同意建立连接，则向Client发送确认。TCP报文首部中的SYN 和 ACK都置1 ，ack = x + 1表示期望收到对方下一个报文段的第一个数据字节序号是x+1，同时表明x为止的所有数据都已正确收到（ack=1其实是ack=0+1,也就是期望客户端的第1个包），seq = y 表示Server 自己的初始序号（seq=0就代表这是服务器这边发出的第0号包）。这时服务器进入syn_rcvd，表示服务器已经收到Client的连接请求，等待client的确认。</p><p>3） Client收到确认后还需再次发送确认，同时携带要发送给Server的数据。ACK 置1 表示确认号ack= y + 1 有效（代表期望收到服务器的第1个包），Client自己的序号seq= x + 1（表示这就是我的第1个包，相对于第0个包来说的），一旦收到Client的确认之后，这个TCP连接就进入Established状态，就可以发起http请求了。</p><p>看抓包截图：</p><p><img src="http://s3.51cto.com/wyfs02/M00/11/7D/wKiom1LSW9-BWZw6AAD7FV3OfS4963.jpg" alt="wKiom1LSW9-BWZw6AAD7FV3OfS4963.jpg"></p><p>⑨ 号包 这个就是对应上面的步骤 1）</p><p>⑩ 号包 这个对应的上面的步骤 2）</p><p>号包 这个对应的上面的步骤 3）</p><p>TCP 为什么需要3次握手？</p><p>举个例子：</p><p>假设一个老外在故宫里面迷路了，看到了小明，于是就有下面的对话：</p><p>老外： Excuse me，Can you Speak English?</p><p>小明： yes 。</p><p>老外： OK,I want …</p><p>在问路之前，老外先问小明是否会说英语，小明回答是的，这时老外才开始问路</p><p>2个计算机通信是靠协议（目前流行的TCP/IP协议）来实现,如果2个计算机使用的协议不一样，那是不能进行通信的，所以这个3次握手就相当于试探一下对方是否遵循TCP/IP协议，协商完成后就可以进行通信了，当然这样理解不是那么准确。</p><p>为什么HTTP协议要基于TCP来实现？</p><p>目前在Internet中所有的传输都是通过TCP/IP进行的，HTTP协议作为TCP/IP模型中应用层的协议也不例外，TCP是一个端到端的可靠的面向连接的协议，所以HTTP基于传输层TCP协议不用担心数据的传输的各种问题。</p><p>3.建立TCP连接后发起http请求</p><p>进过TCP3次握手之后，浏览器发起了http的请求（看第包），使用的http的方法 GET 方法，请求的URL是 / ,协议是HTTP/1.0</p><p><img src="http://s3.51cto.com/wyfs02/M00/11/7C/wKioL1LSXDmgmVT_AAFUErYF2ys832.jpg" alt="wKioL1LSXDmgmVT_AAFUErYF2ys832.jpg"></p><p>下面是第12号包的详细内容：</p><p><img src="http://s3.51cto.com/wyfs02/M02/11/7D/wKiom1LSXHiCgHkBAAKtTT2l-Ac152.jpg" alt="wKiom1LSXHiCgHkBAAKtTT2l-Ac152.jpg"></p><p>以上的报文是HTTP请求报文。</p><p>那么HTTP请求报文和响应报文会是什么格式呢？</p><p>起始行：如 GET / HTTP/1.0 （请求的方法  请求的URL 请求所使用的协议）</p><p>头部信息：User-Agent  Host等成对出现的值</p><p>主体</p><p>不管是请求报文还是响应报文都会遵循以上的格式。</p><p>那么起始行中的请求方法有哪些种呢？</p><p>  GET: 完整请求一个资源 （常用）</p><p>  HEAD: 仅请求响应首部</p><p>  POST：提交表单  （常用）</p><p>  PUT: (webdav) 上传文件（但是浏览器不支持该方法）</p><p>  DELETE：(webdav) 删除</p><p>  OPTIONS：返回请求的资源所支持的方法的方法</p><p>  TRACE: 追求一个资源请求中间所经过的代理（该方法不能由浏览器发出）</p><p>那什么是URL、URI、URN？</p><p>URI  Uniform Resource Identifier 统一资源标识符</p><p>URL  Uniform Resource Locator 统一资源定位符</p><p>​    格式如下：  scheme://[username:password@]HOST:port/path/to/source</p><p>​                <a href="http://www.magedu.com/downloads/nginx-1.5.tar.gz" target="_blank" rel="noopener">http://www.magedu.com/downloads/nginx-1.5.tar.gz</a></p><p>URN  Uniform Resource Name 统一资源名称</p><p>URL和URN 都属于 URI</p><p>为了方便就把URL和URI暂时都通指一个东西</p><p>请求的协议有哪些种？</p><p>有以下几种：</p><p>http/0.9: stateless</p><p>http/1.0: MIME, keep-alive (保持连接), 缓存</p><p>http/1.1: 更多的请求方法，更精细的缓存控制，持久连接(persistent connection) 比较常用</p><p>下面是Chrome发起的http请求报文头部信息</p><p><img src="http://s3.51cto.com/wyfs02/M01/11/7C/wKioL1LSXMqCjyIQAAESKm-mkV8876.jpg" alt="wKioL1LSXMqCjyIQAAESKm-mkV8876.jpg"></p><p>其中</p><p>Accept  就是告诉服务器端，我接受那些MIME类型</p><p>Accept-Encoding  这个看起来是接受那些压缩方式的文件</p><p>Accept-Lanague   告诉服务器能够发送哪些语言</p><p>Connection       告诉服务器支持keep-alive特性</p><p>Cookie           每次请求时都会携带上Cookie以方便服务器端识别是否是同一个客户端</p><p>Host             用来标识请求服务器上的那个虚拟主机，比如Nginx里面可以定义很多个虚拟主机</p><p>​                那这里就是用来标识要访问那个虚拟主机。</p><p>User-Agent       用户代理，一般情况是浏览器，也有其他类型，如：wget curl 搜索引擎的蜘蛛等    </p><p>条件请求首部：</p><p>If-Modified-Since 是浏览器向服务器端询问某个资源文件如果自从什么时间修改过，那么重新发给我，这样就保证服务器端资源</p><p>​            文件更新时，浏览器再次去请求，而不是使用缓存中的文件</p><p>安全请求首部：</p><p>Authorization: 客户端提供给服务器的认证信息；</p><p>什么是MIME？</p><p>MIME（Multipurpose Internet Mail Extesions 多用途互联网邮件扩展）是一个互联网标准，它扩展了电子邮件标准，使其能够支持非ASCII字符、二进制格式附件等多种格式的邮件消息，这个标准被定义在RFC 2045、RFC 2046、RFC 2047、RFC 2048、RFC 2049等RFC中。 由RFC 822转变而来的RFC 2822，规定电子邮件标准并不允许在邮件消息中使用7位ASCII字符集以外的字符。正因如此，一些非英语字符消息和二进制文件，图像，声音等非文字消息都不能在电子邮件中传输。MIME规定了用于表示各种各样的数据类型的符号化方法。 此外，在万维网中使用的HTTP协议中也使用了MIME的框架，标准被扩展为互联网媒体类型。</p><p>MIME 遵循以下格式：major/minor 主类型/次类型 例如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">`image``/jpg``image``/gif``text``/html``video``/quicktime``appliation``/x-httpd-php`</span><br></pre></td></tr></table></figure><p>4.服务器端响应http请求，浏览器得到html代码</p><p>看下图 第12号包是http请求包，第32包是http响应包</p><p>服务器端WEB程序接收到http请求以后，就开始处理该请求，处理之后就返回给浏览器html文件。</p><p><img src="http://s3.51cto.com/wyfs02/M00/11/7D/wKiom1LSXVeQETJrAAaV9VlbbBo896.jpg" alt="wKiom1LSXVeQETJrAAaV9VlbbBo896.jpg"></p><p>第32号包 是服务器返回给客户端http响应包（200 ok 响应的MIME类型是text/html），代表这一次客户端发起的http请求已成功响应。200 代表是的 响应成功的状态码，还有其他的状态码如下：</p><p>1xx: 信息性状态码</p><p>​    100, 101</p><p>2xx: 成功状态码</p><p>​    200：OK</p><p>3xx: 重定向状态码</p><p>​    301: 永久重定向, Location响应首部的值仍为当前URL，因此为隐藏重定向;</p><p>​    302: 临时重定向，显式重定向, Location响应首部的值为新的URL</p><p>​    304：Not Modified  未修改，比如本地缓存的资源文件和服务器上比较时，发现并没有修改，服务器返回一个304状态码，</p><p>​                        告诉浏览器，你不用请求该资源，直接使用本地的资源即可。</p><p>4xx: 客户端错误状态码</p><p>​    404: Not Found  请求的URL资源并不存在</p><p>5xx: 服务器端错误状态码</p><p>​    500: Internal Server Error  服务器内部错误</p><p>​    502: Bad Gateway  前面代理服务器联系不到后端的服务器时出现</p><p>​    504：Gateway Timeout  这个是代理能联系到后端的服务器，但是后端的服务器在规定的时间内没有给代理服务器响应</p><p>用Chrome浏览器看到的响应头信息：</p><p><img src="http://s3.51cto.com/wyfs02/M02/11/7C/wKioL1LSXgCDWDvyAADfe7wzmKk795.jpg" alt="wKioL1LSXgCDWDvyAADfe7wzmKk795.jpg"></p><p>Connection            使用keep-alive特性</p><p>Content-Encoding      使用gzip方式对资源压缩</p><p>Content-type          MIME类型为html类型，字符集是 UTF-8</p><p>Date                  响应的日期</p><p>Server                使用的WEB服务器</p><p>Transfer-Encoding:chunked   分块传输编码 是http中的一种数据传输机制，允许HTTP由网页服务器发送给客户端应用（通常是网页浏览器）的数据可以分成多个部分，分块传输编码只在HTTP协议1.1版本（HTTP/1.1）中提供</p><p>Vary  这个可以参考（<a href="http://blog.csdn.NET/tenfyguo/article/details/5939000）" target="_blank" rel="noopener">http://blog.csdn.NET/tenfyguo/article/details/5939000）</a></p><p>X-Pingback  参考（<a href="http://blog.sina.com.cn/s/blog_bb80041c0101fmfz.html）" target="_blank" rel="noopener">http://blog.sina.com.cn/s/blog_bb80041c0101fmfz.html）</a></p><p>那到底服务器端接收到http请求后是怎么样生成html文件？</p><p>假设服务器端使用nginx+PHP(fastcgi)架构提供服务</p><p>① nginx读取配置文件</p><p>我们在浏览器的地址栏里面输入的是 <a href="http://www.linux178.com" target="_blank" rel="noopener">http://www.linux178.com</a> （http://可以不用输入，浏览器会自动帮我们添加），其实完整的应该是<a href="http://www.linux178.com./" target="_blank" rel="noopener">http://www.linux178.com./</a> 后面还有个点（这个点代表就是根域，一般情况下我们不用输入，也不显示）,后面的/也是不用添加，浏览器会自动帮我们添加（且看第3部那个图里面的URL），那么实际请求的URL是<a href="http://www.linux178.com/，那么好了Nginx在收到" target="_blank" rel="noopener">http://www.linux178.com/，那么好了Nginx在收到</a> 浏览器 GET / 请求时，会读取http请求里面的头部信息，根据Host来匹配 自己的所有的虚拟主机的配置文件的server_name,看看有没有匹配的，有匹配那么就读取该虚拟主机的配置，发现如下配置：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">`root ``/web/echo`</span><br></pre></td></tr></table></figure><p>通过这个就知道所有网页文件的就在这个目录下 这个目录就是/ 当我们<a href="http://www.linux178.com/时就是访问这个目录下面的文件，例如访问http://www.linux178.com/index.html,那么代表/web/echo下面有个文件叫index.html" target="_blank" rel="noopener">http://www.linux178.com/时就是访问这个目录下面的文件，例如访问http://www.linux178.com/index.html,那么代表/web/echo下面有个文件叫index.html</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">`index index.html index.htm index.php`</span><br></pre></td></tr></table></figure><p>通过这个就能得知网站的首页文件是那个文件，也就是我们在入<a href="http://www.linux178.com/" target="_blank" rel="noopener">http://www.linux178.com/</a> ，nginx就会自动帮我们把index.html（假设首页是index.php 当然是会尝试的去找到该文件，如果没有找到该文件就依次往下找，如果这3个文件都没有找到，那么就抛出一个404错误）加到后面，那么添加之后的URL是/index.php,然后根据后面的配置进行处理</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">`location ~ .*\.php(\/.*)*$ &#123;``   ``root ``/web/echo``;``   ``fastcgi_pass   127.0.0.1:9000;``   ``fastcgi_index  index.php;``   ``astcgi_param  SCRIPT_FILENAME  $document_root$fastcgi_script_name;``   ``include        fastcgi_params;``&#125;`</span><br></pre></td></tr></table></figure><p>这一段配置指明凡是请求的URL中匹配（这里是启用了正则表达式进行匹配） *.php后缀的（后面跟的参数）都交给后端的fastcgi进程进行处理。</p><p>② 把php文件交给fastcgi进程去处理</p><p>于是nginx把/index.php这个URL交给了后端的fastcgi进程处理，等待fastcgi处理完成后（结合数据库查询出数据，填充模板生成html文件）返回给nginx一个index.html文档，Nginx再把这个index.html返回给浏览器，于是乎浏览器就拿到了首页的html代码，同时nginx写一条访问日志到日志文件中去。</p><p>注1：nginx是怎么找index.php文件的？</p><p>当nginx发现需要/web/echo/index.php文件时，就会向内核发起IO系统调用(因为要跟硬件打交道，这里的硬件是指硬盘，通常需要靠内核来操作，而内核提供的这些功能是通过系统调用来实现的)，告诉内核，我需要这个文件,内核从/开始找到web目录，再在web目录下找到echo目录，最后在echo目录下找到index.php文件，于是把这个index.php从硬盘上读取到内核自身的内存空间，然后再把这个文件复制到nginx进程所在的内存空间，于是乎nginx就得到了自己想要的文件了。</p><p>注2：寻找文件在文件系统层面是怎么操作的？</p><p>比如nginx需要得到/web/echo/index.php这个文件</p><p>每个分区（像ext3 ext3等文件系统，block块是文件存储的最小单元 默认是4096字节）都是包含元数据区和数据区，每一个文件在元数据区都有元数据条目（一般是128字节大小），每一个条目都有一个编号，我们称之为inode（index node 索引节点），这个inode里面包含 文件类型、权限、连接次数、属主和数组的ID、时间戳、这个文件占据了那些磁盘块也就是块的编号（block，每个文件可以占用多个block,并且block不一定是连续的，每个block是有编号的），如下图所示：</p><p><img src="http://s3.51cto.com/wyfs02/M01/11/7D/wKiom1LSXwWRzx75AACjRCdIYcI778.jpg" alt="wKiom1LSXwWRzx75AACjRCdIYcI778.jpg"></p><p>还有一个要点：目录其实也普通是文件，也需要占用磁盘块，目录不是一个容器。你看默认创建的目录就是4096字节，也就说只需要占用一个磁盘块，但这是不确定的。所以要找到目录也是需要到元数据区里面找到对应的条目，只有找到对应的inode就可找到目录所占用的磁盘块。</p><p>那到底目录里面存放着什么，难道不是文件或者其他目录吗？</p><p>其实目录存着这么一张表（姑且这么理解），里面放着 目录或者文件的名称和对应的inode号（暂时称之为映射表）,如下图：</p><p><img src="http://s3.51cto.com/wyfs02/M02/11/7D/wKiom1LSX3KATYWYAAAx2GkMEO4103.jpg" alt="wKiom1LSX3KATYWYAAAx2GkMEO4103.jpg"></p><p>假设</p><p>/           在数据区占据 1、2号block ，/其实也是一个目录 里面有3个目录  web 111</p><p>web         占据 5号block  是目录 里面有2个目录 echo data</p><p>echo        占据 11号 block  是目录  里面有1个文件 index.php</p><p>index.php   占据 15 16号 block  是文件</p><p>其在文件系统中分布如下图所示</p><p><img src="http://s3.51cto.com/wyfs02/M01/11/7C/wKioL1LSX6OizObEAAHJJkuxCa0943.jpg" alt="wKioL1LSX6OizObEAAHJJkuxCa0943.jpg"></p><p>那么内核究竟是怎么找到index.php这个文件的呢？</p><p>内核拿到nginx的IO系统调用要获取/web/echo/index.php这个文件请求之后</p><p>① 内核读取元数据区 / 的inode，从inode里面读取/所对应的数据块的编号，然后在数据区找到其对应的块（1 2号块），读取1号块上的映射表找到web这个名称在元数据区对应的inode号</p><p>② 内核读取web对应的inode（3号），从中得知web在数据区对应的块是5号块，于是到数据区找到5号块，从中读取映射表，知道echo对应的inode是5号，于是到元数据区找到5号inode</p><p>③ 内核读取5号inode，得到echo在数据区对应的是11号块，于是到数据区读取11号块得到映射表，得到index.php对应的inode是9号</p><p>④ 内核到元数据区读取9号inode，得到index.php对应的是15和16号数据块，于是就到数据区域找到15 16号块，读取其中的内容，得到index.php的完整内容</p><p>\5. 浏览器解析html代码，并请求html代码中的资源</p><p>浏览器拿到index.html文件后，就开始解析其中的html代码，遇到js/css/image等静态资源时，就向服务器端去请求下载（会使用多线程下载，每个浏览器的线程数不一样），这个时候就用上keep-alive特性了，建立一次HTTP连接，可以请求多个资源，下载资源的顺序就是按照代码里的顺序，但是由于每个资源大小不一样，而浏览器又多线程请求请求资源，所以从下图看出，这里显示的顺序并不一定是代码里面的顺序。</p><p>浏览器在请求静态资源时（在未过期的情况下），向服务器端发起一个http请求（询问自从上一次修改时间到现在有没有对资源进行修改），如果服务器端返回304状态码（告诉浏览器服务器端没有修改），那么浏览器会直接读取本地的该资源的缓存文件。</p><p><img src="http://s3.51cto.com/wyfs02/M00/11/7D/wKiom1LSX_PT06f3AAF_5iS18UA331.jpg" alt="wKiom1LSX_PT06f3AAF_5iS18UA331.jpg"></p><p>详细的浏览器工作原理请看：<a href="http://kb.cnblogs.com/page/129756/" target="_blank" rel="noopener">http://kb.cnblogs.com/page/129756/</a></p><p>6.浏览器对页面进行渲染呈现给用户</p><p>最后，浏览器利用自己内部的工作机制，把请求到的静态资源和html代码进行渲染，渲染之后呈现给用户。</p><p>自此一次完整的HTTP事务宣告完成.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;http-请求包含哪几个部分（请求行、请求头、请求体）&quot;&gt;&lt;a href=&quot;#http-请求包含哪几个部分（请求行、请求头、请求体）&quot; class=&quot;headerlink&quot; title=&quot;http 请求包含哪几个部分（请求行、请求头、请求体）&quot;&gt;&lt;/a&gt;http 
      
    
    </summary>
    
    
      <category term="http" scheme="http://yoursite.com/tags/http/"/>
    
  </entry>
  
  <entry>
    <title>JSON的三种解析方式</title>
    <link href="http://yoursite.com/2019/02/18/JSON%E7%9A%84%E4%B8%89%E7%A7%8D%E8%A7%A3%E6%9E%90%E6%96%B9%E5%BC%8F/"/>
    <id>http://yoursite.com/2019/02/18/JSON的三种解析方式/</id>
    <published>2019-02-18T05:32:59.000Z</published>
    <updated>2019-02-18T05:33:36.931Z</updated>
    
    <content type="html"><![CDATA[<h1 id="一、什么是JSON？"><a href="#一、什么是JSON？" class="headerlink" title="一、什么是JSON？"></a>一、什么是JSON？</h1><p>JSON是一种取代XML的数据结构,和xml相比,它更小巧但描述能力却不差,由于它的小巧所以网络传输数据将减少更多流量从而加快速度。</p><p>JSON就是一串字符串 只不过元素会使用特定的符号标注。</p><p>{} 双括号表示对象</p><p>[] 中括号表示数组</p><p>“” 双引号内是属性或值</p><p>: 冒号表示后者是前者的值(这个值可以是字符串、数字、也可以是另一个数组或对象)</p><p>所以 {“name”: “Michael”} 可以理解为是一个包含name为Michael的对象</p><p>而[{“name”: “Michael”},{“name”: “Jerry”}]就表示包含两个对象的数组</p><p>当然了,你也可以使用{“name”:[“Michael”,”Jerry”]}来简化上面一部,这是一个拥有一个name数组的对象</p><h1 id="二、JSON解析之传统的JSON解析"><a href="#二、JSON解析之传统的JSON解析" class="headerlink" title="二、JSON解析之传统的JSON解析"></a>二、JSON解析之传统的JSON解析</h1><h2 id="1、生成json字符串"><a href="#1、生成json字符串" class="headerlink" title="1、生成json字符串"></a>1、生成json字符串</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">public static String createJsonString(String key, Object value) &#123;</span><br><span class="line">        JSONObject jsonObject = new JSONObject();</span><br><span class="line">        jsonObject.put(key, value);</span><br><span class="line">        return jsonObject.toString();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2、解析JSON字符串"><a href="#2、解析JSON字符串" class="headerlink" title="2、解析JSON字符串"></a>2、解析JSON字符串</h2><p>分为以下三种情况，一个<a href="http://www.2cto.com/kf/ware/Java/" target="_blank" rel="noopener">Java</a>Bean，一个List数组，一个嵌套Map的List数组：</p><p><a href="javascript:void(0" target="_blank" rel="noopener"><img src="https://common.cnblogs.com/images/copycode.gif" alt="复制代码"></a>;)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br></pre></td><td class="code"><pre><span class="line">import java.util.ArrayList;</span><br><span class="line">import java.util.HashMap;</span><br><span class="line">import java.util.Iterator;</span><br><span class="line">import java.util.List;</span><br><span class="line">import java.util.Map;</span><br><span class="line"></span><br><span class="line">import org.json.JSONArray;</span><br><span class="line">import org.json.JSONObject;</span><br><span class="line"></span><br><span class="line">import com.android.myjson.domain.Person;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * 完成对json数据的解析</span><br><span class="line"> * </span><br><span class="line"> */</span><br><span class="line">public class JsonTools &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    public static Person getPerson(String key, String jsonString) &#123;</span><br><span class="line">        Person person = new Person();</span><br><span class="line">        try &#123;</span><br><span class="line">            JSONObject jsonObject = new JSONObject(jsonString);</span><br><span class="line">            JSONObject personObject = jsonObject.getJSONObject(&quot;person&quot;);</span><br><span class="line">            person.setId(personObject.getInt(&quot;id&quot;));</span><br><span class="line">            person.setName(personObject.getString(&quot;name&quot;));</span><br><span class="line">            person.setAddress(personObject.getString(&quot;address&quot;));</span><br><span class="line">        &#125; catch (Exception e) &#123;</span><br><span class="line">            // TODO: handle exception</span><br><span class="line">        &#125;</span><br><span class="line">        return person;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public static List getPersons(String key, String jsonString) &#123;</span><br><span class="line">        List list = new ArrayList();</span><br><span class="line">        try &#123;</span><br><span class="line">            JSONObject jsonObject = new JSONObject(jsonString);</span><br><span class="line">            // 返回json的数组</span><br><span class="line">            JSONArray jsonArray = jsonObject.getJSONArray(key);</span><br><span class="line">            for (int i = 0; i &lt; jsonArray.length(); i++) &#123;</span><br><span class="line">                JSONObject jsonObject2 = jsonArray.getJSONObject(i);</span><br><span class="line">                Person person = new Person();</span><br><span class="line">                person.setId(jsonObject2.getInt(&quot;id&quot;));</span><br><span class="line">                person.setName(jsonObject2.getString(&quot;name&quot;));</span><br><span class="line">                person.setAddress(jsonObject2.getString(&quot;address&quot;));</span><br><span class="line">                list.add(person);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; catch (Exception e) &#123;</span><br><span class="line">            // TODO: handle exception</span><br><span class="line">        &#125;</span><br><span class="line">        return list;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public static List getList(String key, String jsonString) &#123;</span><br><span class="line">        List list = new ArrayList();</span><br><span class="line">        try &#123;</span><br><span class="line">            JSONObject jsonObject = new JSONObject(jsonString);</span><br><span class="line">            JSONArray jsonArray = jsonObject.getJSONArray(key);</span><br><span class="line">            for (int i = 0; i &lt; jsonArray.length(); i++) &#123;</span><br><span class="line">                String msg = jsonArray.getString(i);</span><br><span class="line">                list.add(msg);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; catch (Exception e) &#123;</span><br><span class="line">            // TODO: handle exception</span><br><span class="line">        &#125;</span><br><span class="line">        return list;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public static List&gt; listKeyMaps(String key,</span><br><span class="line">            String jsonString) &#123;</span><br><span class="line">        List&gt; list = new ArrayList&gt;();</span><br><span class="line">        try &#123;</span><br><span class="line">            JSONObject jsonObject = new JSONObject(jsonString);</span><br><span class="line">            JSONArray jsonArray = jsonObject.getJSONArray(key);</span><br><span class="line">            for (int i = 0; i &lt; jsonArray.length(); i++) &#123;</span><br><span class="line">                JSONObject jsonObject2 = jsonArray.getJSONObject(i);</span><br><span class="line">                Map map = new HashMap();</span><br><span class="line">                Iterator iterator = jsonObject2.keys();</span><br><span class="line">                while (iterator.hasNext()) &#123;</span><br><span class="line">                    String json_key = iterator.next();</span><br><span class="line">                    Object json_value = jsonObject2.get(json_key);</span><br><span class="line">                    if (json_value == null) &#123;</span><br><span class="line">                        json_value = &quot;&quot;;</span><br><span class="line">                    &#125;</span><br><span class="line">                    map.put(json_key, json_value);</span><br><span class="line">                &#125;</span><br><span class="line">                list.add(map);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; catch (Exception e) &#123;</span><br><span class="line">            // TODO: handle exception</span><br><span class="line">        &#125;</span><br><span class="line">        return list;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a href="javascript:void(0" target="_blank" rel="noopener"><img src="https://common.cnblogs.com/images/copycode.gif" alt="复制代码"></a>;)</p><h1 id="三、JSON解析之GSON"><a href="#三、JSON解析之GSON" class="headerlink" title="三、JSON解析之GSON"></a>三、JSON解析之GSON</h1><h2 id="1、生成JSON字符串"><a href="#1、生成JSON字符串" class="headerlink" title="1、生成JSON字符串"></a>1、生成JSON字符串</h2><p><a href="javascript:void(0" target="_blank" rel="noopener"><img src="https://common.cnblogs.com/images/copycode.gif" alt="复制代码"></a>;)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br></pre></td><td class="code"><pre><span class="line">import com.google.gson.Gson;</span><br><span class="line"></span><br><span class="line">public class JsonUtils &#123;</span><br><span class="line"></span><br><span class="line">    public static String createJsonObject(Object obj) &#123;</span><br><span class="line">        Gson gson = new Gson();</span><br><span class="line">        String str = gson.toJson(obj);</span><br><span class="line">        return str;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">二、解析JSON</span><br><span class="line"></span><br><span class="line">import java.util.ArrayList;</span><br><span class="line">import java.util.List;</span><br><span class="line">import java.util.Map;</span><br><span class="line"></span><br><span class="line">import com.google.gson.Gson;</span><br><span class="line">import com.google.gson.reflect.TypeToken;</span><br><span class="line"></span><br><span class="line">;</span><br><span class="line">public class GsonTools &#123;</span><br><span class="line"></span><br><span class="line">    public GsonTools() &#123;</span><br><span class="line">        // TODO Auto-generated constructor stub</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * @param </span><br><span class="line">     * @param jsonString</span><br><span class="line">     * @param cls</span><br><span class="line">     * @return</span><br><span class="line">     */</span><br><span class="line">    public static  T getPerson(String jsonString, Class cls) &#123;</span><br><span class="line">        T t = null;</span><br><span class="line">        try &#123;</span><br><span class="line">            Gson gson = new Gson();</span><br><span class="line">            t = gson.fromJson(jsonString, cls);</span><br><span class="line">        &#125; catch (Exception e) &#123;</span><br><span class="line">            // TODO: handle exception</span><br><span class="line">        &#125;</span><br><span class="line">        return t;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 使用Gson进行解析 List</span><br><span class="line">     * </span><br><span class="line">     * @param </span><br><span class="line">     * @param jsonString</span><br><span class="line">     * @param cls</span><br><span class="line">     * @return</span><br><span class="line">     */</span><br><span class="line">    public static  List getPersons(String jsonString, Class cls) &#123;</span><br><span class="line">        List list = new ArrayList();</span><br><span class="line">        try &#123;</span><br><span class="line">            Gson gson = new Gson();</span><br><span class="line">            list = gson.fromJson(jsonString, new TypeToken&gt;() &#123;</span><br><span class="line">            &#125;.getType());</span><br><span class="line">        &#125; catch (Exception e) &#123;</span><br><span class="line">        &#125;</span><br><span class="line">        return list;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * @param jsonString</span><br><span class="line">     * @return</span><br><span class="line">     */</span><br><span class="line">    public static List getList(String jsonString) &#123;</span><br><span class="line">        List list = new ArrayList();</span><br><span class="line">        try &#123;</span><br><span class="line">            Gson gson = new Gson();</span><br><span class="line">            list = gson.fromJson(jsonString, new TypeToken&gt;() &#123;</span><br><span class="line">            &#125;.getType());</span><br><span class="line">        &#125; catch (Exception e) &#123;</span><br><span class="line">            // TODO: handle exception</span><br><span class="line">        &#125;</span><br><span class="line">        return list;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public static List&gt; listKeyMaps(String jsonString) &#123;</span><br><span class="line">        List&gt; list = new ArrayList&gt;();</span><br><span class="line">        try &#123;</span><br><span class="line">            Gson gson = new Gson();</span><br><span class="line">            list = gson.fromJson(jsonString,</span><br><span class="line">                    new TypeToken&gt;&gt;() &#123;</span><br><span class="line">                    &#125;.getType());</span><br><span class="line">        &#125; catch (Exception e) &#123;</span><br><span class="line">            // TODO: handle exception</span><br><span class="line">        &#125;</span><br><span class="line">        return list;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a href="javascript:void(0" target="_blank" rel="noopener"><img src="https://common.cnblogs.com/images/copycode.gif" alt="复制代码"></a>;)</p><h1 id="三、JSON解析之FastJSON"><a href="#三、JSON解析之FastJSON" class="headerlink" title="三、JSON解析之FastJSON"></a>三、JSON解析之FastJSON</h1><p><a href="javascript:void(0" target="_blank" rel="noopener"><img src="https://common.cnblogs.com/images/copycode.gif" alt="复制代码"></a>;)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line">import java.util.ArrayList;</span><br><span class="line">import java.util.List;</span><br><span class="line">import java.util.Map;</span><br><span class="line"></span><br><span class="line">import com.alibaba.fastjson.JSON;</span><br><span class="line">import com.alibaba.fastjson.TypeReference;</span><br><span class="line"></span><br><span class="line">public class JsonTool &#123;</span><br><span class="line"></span><br><span class="line">    public static  T getPerson(String jsonstring, Class cls) &#123;</span><br><span class="line">        T t = null;</span><br><span class="line">        try &#123;</span><br><span class="line">            t = JSON.parseObject(jsonstring, cls);</span><br><span class="line">        &#125; catch (Exception e) &#123;</span><br><span class="line">            // TODO: handle exception</span><br><span class="line">        &#125;</span><br><span class="line">        return t;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public static  List getPersonList(String jsonstring, Class cls) &#123;</span><br><span class="line">        List list = new ArrayList();</span><br><span class="line">        try &#123;</span><br><span class="line">            list = JSON.parseArray(jsonstring, cls);</span><br><span class="line">        &#125; catch (Exception e) &#123;</span><br><span class="line">            // TODO: handle exception</span><br><span class="line">        &#125;</span><br><span class="line">        return list;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public static  List&gt; getPersonListMap1(</span><br><span class="line">            String jsonstring) &#123;</span><br><span class="line">        List&gt; list = new ArrayList&gt;();</span><br><span class="line">        try &#123;</span><br><span class="line">            list = JSON.parseObject(jsonstring,</span><br><span class="line">                    new TypeReference&gt;&gt;() &#123;</span><br><span class="line">                    &#125;.getType());</span><br><span class="line"></span><br><span class="line">        &#125; catch (Exception e) &#123;</span><br><span class="line">            // TODO: handle exception</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        return list;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a href="javascript:void(0" target="_blank" rel="noopener"><img src="https://common.cnblogs.com/images/copycode.gif" alt="复制代码"></a>;)</p><h1 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h1><p>JSON对于移动设备来说，尤其对于网络环境较差和流量限制的情况下，相对于XML格式的数据传输会更节省流量，传输效率更高。在这三种解析方式中FastJson是效率最高的，推荐使用。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;一、什么是JSON？&quot;&gt;&lt;a href=&quot;#一、什么是JSON？&quot; class=&quot;headerlink&quot; title=&quot;一、什么是JSON？&quot;&gt;&lt;/a&gt;一、什么是JSON？&lt;/h1&gt;&lt;p&gt;JSON是一种取代XML的数据结构,和xml相比,它更小巧但描述能力却不差,
      
    
    </summary>
    
    
      <category term="json" scheme="http://yoursite.com/tags/json/"/>
    
  </entry>
  
  <entry>
    <title>提高数据库查询速度的方法</title>
    <link href="http://yoursite.com/2019/02/18/%E6%8F%90%E9%AB%98%E6%95%B0%E6%8D%AE%E5%BA%93%E6%9F%A5%E8%AF%A2%E9%80%9F%E5%BA%A6%E7%9A%84%E6%96%B9%E6%B3%95/"/>
    <id>http://yoursite.com/2019/02/18/提高数据库查询速度的方法/</id>
    <published>2019-02-18T05:28:04.000Z</published>
    <updated>2019-02-18T05:29:21.547Z</updated>
    
    <content type="html"><![CDATA[<p>处理百万级以上的数据提高查询速度的方法：</p><p> 1.应尽量避免在 where 子句中使用!=或&lt;&gt;操作符，否则将引擎放弃使用索引而进行全表扫描。</p><p> 2.对查询进行优化，应尽量避免全表扫描，首先应考虑在 where 及 order by 涉及的列上建立索引。</p><p> 3.应尽量避免在 where 子句中对字段进行 null 值判断，否则将导致引擎放弃使用索引而进行全表扫描，如：</p><p>​     select id from t where num is null</p><p>​     可以在num上设置默认值0，确保表中num列没有null值，然后这样查询：</p><p>​     select id from t where num=0</p><p> 4.应尽量避免在 where 子句中使用 or 来连接条件，否则将导致引擎放弃使用索引而进行全表扫描，如：</p><p>​     select id from t where num=10 or num=20</p><p>​     可以这样查询：</p><p>​     select id from t where num=10</p><p>​     union all</p><p>​     select id from t where num=20</p><p> 5.下面的查询也将导致全表扫描：(不能前置百分号)</p><p>​     select id from t where name like ‘%abc%’</p><p>​    若要提高效率，可以考虑全文检索。</p><p> 6.in 和 not in 也要慎用，否则会导致全表扫描，如：</p><p>​     select id from t where num in(1,2,3)</p><p>​     对于连续的数值，能用 between 就不要用 in 了：</p><p>​     select id from t where num between 1 and 3</p><p>  8.应尽量避免在 where 子句中对字段进行表达式操作，这将导致引擎放弃使用索引而进行全表扫描。如：</p><p>​     select id from t where num/2=100</p><p>​     应改为:</p><p>​     select id from t where num=100*2</p><p> 9.应尽量避免在where子句中对字段进行函数操作，这将导致引擎放弃使用索引而进行全表扫描。如：</p><p>​     select id from t where substring(name,1,3)=’abc’–name以abc开头的id</p><p>​     select id from t where datediff(day,createdate,’2005-11-30′)=0–’2005-11-30′生成的id</p><p>​     应改为:</p><p>​     select id from t where name like ‘abc%’</p><p>​     select id from t where createdate&gt;=’2005-11-30′ and createdate&lt;’2005-12-1′</p><p> 10.不要在 where 子句中的“=”左边进行函数、算术运算或其他表达式运算，否则系统将可能无法正确使用索引。</p><p> 11.在使用索引字段作为条件时，如果该索引是复合索引，那么必须使用到该索引中的第一个字段作为条件时才能保证系统使用该索引，否则该索引将不会被使 用，并且应尽可能的让字段顺序与索引顺序相一致。</p><p> 12.不要写一些没有意义的查询，如需要生成一个空表结构：</p><p>​     select col1,col2 into #t from t where 1=0</p><p>​     这类代码不会返回任何结果集，但是会消耗系统资源的，应改成这样：</p><p>​     create table #t(…)</p><p> 13.很多时候用 exists 代替 in 是一个好的选择：</p><p>​     select num from a where num in(select num from b)</p><p>​     用下面的语句替换：</p><p>​     select num from a where exists(select 1 from b where num=a.num)</p><p> 14.并不是所有索引对查询都有效，SQL是根据表中数据来进行查询优化的，当索引列有大量数据重复时，SQL查询可能不会去利用索引，如一表中有字段 sex，male、female几乎各一半，那么即使在sex上建了索引也对查询效率起不了作用。</p><p> 15.索引并不是越多越好，索引固然可以提高相应的 select 的效率，但同时也降低了 insert 及 update 的效率，因为 insert 或 update 时有可能会重建索引，所以怎样建索引需要慎重考虑，视具体情况而定。一个表的索引数最好不要超过6个，若太多则应考虑一些不常使用到的列上建的索引是否有 必要。</p><p> 16.应尽可能的避免更新 clustered 索引数据列，因为 clustered 索引数据列的顺序就是表记录的物理存储顺序，一旦该列值改变将导致整个表记录的顺序的调整，会耗费相当大的资源。若应用系统需要频繁更新 clustered 索引数据列，那么需要考虑是否应将该索引建为 clustered 索引。</p><p> 17.尽量使用数字型字段，若只含数值信息的字段尽量不要设计为字符型，这会降低查询和连接的性能，并会增加存储开销。这是因为引擎在处理查询和连接时会 逐个比较字符串中每一个字符，而对于数字型而言只需要比较一次就够了。</p><p> 18.尽可能的使用 varchar/nvarchar 代替 char/nchar ，因为首先变长字段存储空间小，可以节省存储空间，其次对于查询来说，在一个相对较小的字段内搜索效率显然要高些。</p><p> 19.任何地方都不要使用 select <em> from t ，用具体的字段列表代替“</em>”，不要返回用不到的任何字段。</p><p> 20.尽量使用表变量来代替临时表。如果表变量包含大量数据，请注意索引非常有限（只有主键索引）。</p><p> 21.避免频繁创建和删除临时表，以减少系统表资源的消耗。</p><p> 22.临时表并不是不可使用，适当地使用它们可以使某些例程更有效，例如，当需要重复引用大型表或常用表中的某个数据集时。但是，对于一次性事件，最好使 用导出表。</p><p> 23.在新建临时表时，如果一次性插入数据量很大，那么可以使用 select into 代替 create table，避免造成大量 log ，以提高速度；如果数据量不大，为了缓和系统表的资源，应先create table，然后insert。</p><p> 24.如果使用到了临时表，在存储过程的最后务必将所有的临时表显式删除，先 truncate table ，然后 drop table ，这样可以避免系统表的较长时间锁定。</p><p> 25.尽量避免使用游标，因为游标的效率较差，如果游标操作的数据超过1万行，那么就应该考虑改写。</p><p> 26.使用基于游标的方法或临时表方法之前，应先寻找基于集的解决方案来解决问题，基于集的方法通常更有效。</p><p> 27.与临时表一样，游标并不是不可使用。对小型数据集使用 FAST_FORWARD 游标通常要优于其他逐行处理方法，尤其是在必须引用几个表才能获得所需的数据时。在结果集中包括“合计”的例程通常要比使用游标执行的速度快。如果开发时 间允许，基于游标的方法和基于集的方法都可以尝试一下，看哪一种方法的效果更好。</p><p> 28.在所有的存储过程和触发器的开始处设置 SET NOCOUNT ON ，在结束时设置 SET NOCOUNT OFF 。无需在执行存储过程和触发器的每个语句后向客户端发送 DONE_IN_PROC 消息。</p><p> 29.尽量避免向客户端返回大数据量，若数据量过大，应该考虑相应需求是否合理。</p><p> 30.尽量避免大事务操作，提高系统并发能力。</p><p>查询速度慢的原因：</p><p>1、没有索引或者没有用到索引(这是查询慢最常见的问题，是程序设计的缺陷) </p><p>2、I/O吞吐量小，形成了瓶颈效应。 </p><p>3、没有创建计算列导致查询不优化。 </p><p>4、内存不足 </p><p>5、网络速度慢 </p><p>6、查询出的数据量过大（可以采用多次查询，其他的方法降低数据量） </p><p>7、锁或者死锁(这也是查询慢最常见的问题，是程序设计的缺陷) </p><p>8、sp_lock,sp_who,活动的用户查看,原因是读写竞争资源。</p><p>9、返回了不必要的行和列 </p><p>10、查询语句不好，没有优化 </p><p>可以通过如下方法来优化查询 </p><p>1、把数据、日志、索引放到不同的I/O设备上，增加读取速度，以前可以将Tempdb应放在RAID0上，SQL2000不在支持。数据量（尺寸）越大，提高I/O越重要. </p><p>2、纵向、横向分割表，减少表的尺寸(sp_spaceuse) </p><p>3、升级硬件 </p><p>4、根据查询条件,建立索引,优化索引、优化访问方式，限制结果集的数据量。注意填充因子要适当（最好是使用默认值0）。索引应该尽量小，使用字节数小的列建索引好（参照索引的创建）,不要对有限的几个值的字段建单一索引如性别字段 </p><p>5、提高网速; </p><p>6、扩大服务器的内存,Windows   2000和SQL   server   2000能支持4-8G的内存。配置虚拟内存：虚拟内存大小应基于计算机上并发运行的服务进行配置。运行   Microsoft   SQL   Server?   2000   时，可考虑将虚拟内存大小设置为计算机中安装的物理内存的   1.5   倍。如果另外安装了全文检索功能，并打算运行   Microsoft   搜索服务以便执行全文索引和查询，可考虑：将虚拟内存大小配置为至少是计算机中安装的物理内存的   3   倍。将   SQL   Server   max   server   memory   服务器配置选项配置为物理内存的   1.5   倍（虚拟内存大小设置的一半）。 </p><p>7、增加服务器CPU个数;但是必须明白并行处理串行处理更需要资源例如内存。使用并行还是串行程是MsSQL自动评估选择的。单个任务分解成多个 任务，就可以在处理器上运行。例如耽搁查询的排序、连接、扫描和GROUP   BY字句同时执行，SQL   SERVER根据系统的负载情况决定最优的并行等级，复杂的需要消耗大量的CPU的查询最适合并行处理。但是更新操作UPDATE,INSERT， DELETE还不能并行处理。 </p><p>8、如果是使用like进行查询的话，简单的使用index是不行的，但是全文索引，耗空间。   like   ‘a%’   使用索引   like   ‘%a’   不使用索引用   like   ‘%a%’   查询时，查询耗时和字段值总长度成正比,所以不能用CHAR类型，而是VARCHAR。对于字段的值很长的建全文索引。 </p><p>9、DB   Server   和APPLication   Server   分离；OLTP和OLAP分离 </p><p>10、分布式分区视图可用于实现数据库服务器联合体。联合体是一组分开管理的服务器，但它们相互协作分担系统的处理负荷。这种通过分区数据形成数据 库服务器联合体的机制能够扩大一组服务器，以支持大型的多层   Web   站点的处理需要。有关更多信息，参见设计联合数据库服务器。（参照SQL帮助文件’分区视图’） </p><p>​    a、在实现分区视图之前，必须先水平分区表  </p><p>​    b、在创建成员表后，在每个成员服务器上定义一个分布式分区视图，并且每个视图具有相同的名称。这样，引用分布式分区视图名的查询可以在任何一个成员服务 器上运行。系统操作如同每个成员服务器上都有一个原始表的复本一样，但其实每个服务器上只有一个成员表和一个分布式分区视图。数据的位置对应用程序是透明 的。 </p><p>11、重建索引   DBCC   REINDEX   ,DBCC   INDEXDEFRAG,收缩数据和日志   DBCC   SHRINKDB,DBCC   SHRINKFILE.   设置自动收缩日志.对于大的数据库不要设置数据库自动增长，它会降低服务器的性能。   在T-sql的写法上有很大的讲究，下面列出常见的要点：首先，DBMS处理查询计划的过程是这样的： </p><p>​    1、   查询语句的词法、语法检查          </p><p>​    2、   将语句提交给DBMS的查询优化器  </p><p>​    3、   优化器做代数优化和存取路径的优化  </p><p>​    4、   由预编译模块生成查询规划  </p><p>​    5、   然后在合适的时间提交给系统处理执行  </p><p>​    6、   最后将执行结果返回给用户其次，看一下SQL   SERVER的数据存放的结构：一个页面的大小为8K(8060)字节，8个页面为一个盘区，按照B树存放。 </p><p>12、Commit和rollback的区别   Rollback:回滚所有的事物。   Commit:提交当前的事物.   没有必要在动态SQL里写事物，如果要写请写在外面如：   begin   tran   exec(@s)   commit   trans   或者将动态SQL   写成函数或者存储过程。 </p><p>13、在查询Select语句中用Where字句限制返回的行数,避免表扫描,如果返回不必要的数据，浪费了服务器的I/O资源，加重了网络的负担降低性能。如果表很大，在表扫描的期间将表锁住，禁止其他的联接访问表,后果严重。 </p><p>14、SQL的注释申明对执行没有任何影响 </p><p>15、尽可能不使用游标，它占用大量的资源。如果需要row-by-row地执行，尽量采用非光标技术,如：在客户端循环，用临时表，Table变 量，用子查询，用Case语句等等。游标可以按照它所支持的提取选项进行分类：   只进   必须按照从第一行到最后一行的顺序提取行。FETCH   NEXT   是唯一允许的提取操作,也是默认方式。可滚动性   可以在游标中任何地方随机提取任意行。游标的技术在SQL2000下变得功能很强大，他的目的是支持循环。 </p><p>有四个并发选项  </p><p>READ_ONLY：不允许通过游标定位更新(Update)，且在组成结果集的行中没有锁。  </p><p>OPTIMISTIC   WITH   valueS:乐观并发控制是事务控制理论的一个标准部分。乐观并发控制用于这样的情形，即在打开游标及更新行的间隔中，只有很小的机会让第二个用户更新 某一行。当某个游标以此选项打开时，没有锁控制其中的行，这将有助于最大化其处理能力。如果用户试图修改某一行，则此行的当前值会与最后一次提取此行时获 取的值进行比较。如果任何值发生改变，则服务器就会知道其他人已更新了此行，并会返回一个错误。如果值是一样的，服务器就执行修改。   选择这个并发选项OPTIMISTIC   WITH   ROW   VERSIONING:此乐观并发控制选项基于行版本控制。使用行版本控制，其中的表必须具有某种版本标识符，服务器可用它来确定该行在读入游标后是否有 所更改。 </p><p>在   SQL   Server   中，这个性能由   timestamp   数据类型提供，它是一个二进制数字，表示数据库中更改的相对顺序。每个数据库都有一个全局当前时间戳值：@@DBTS。每次以任何方式更改带有   timestamp   列的行时，SQL   Server   先在时间戳列中存储当前的   @@DBTS   值，然后增加   @@DBTS   的值。如果某   个表具有   timestamp   列，则时间戳会被记到行级。服务器就可以比较某行的当前时间戳值和上次提取时所存储的时间戳值，从而确定该行是否已更新。服务器不必比较所有列的值，只需 比较   timestamp   列即可。如果应用程序对没有   timestamp   列的表要求基于行版本控制的乐观并发，则游标默认为基于数值的乐观并发控制。  </p><p>SCROLL   LOCKS   这个选项实现悲观并发控制。在悲观并发控制中，在把数据库的行读入游标结果集时，应用程序将试图锁定数据库行。在使用服务器游标时，将行读入游标时会在其 上放置一个更新锁。如果在事务内打开游标，则该事务更新锁将一直保持到事务被提交或回滚；当提取下一行时，将除去游标锁。如果在事务外打开游标，则提取下 一行时，锁就被丢弃。因此，每当用户需要完全的悲观并发控制时，游标都应在事务内打开。更新锁将阻止任何其它任务获取更新锁或排它锁，从而阻止其它任务更 新该行。 </p><p>然而，更新锁并不阻止共享锁，所以它不会阻止其它任务读取行，除非第二个任务也在要求带更新锁的读取。滚动锁根据在游标定义的   SELECT   语句中指定的锁提示，这些游标并发选项可以生成滚动锁。滚动锁在提取时在每行上获取，并保持到下次提取或者游标关闭，以先发生者为准。下次提取时，服务器 为新提取中的行获取滚动锁，并释放上次提取中行的滚动锁。滚动锁独立于事务锁，并可以保持到一个提交或回滚操作之后。如果提交时关闭游标的选项为关， 则   COMMIT   语句并不关闭任何打开的游标，而且滚动锁被保留到提交之后，以维护对所提取数据的隔离。所获取滚动锁的类型取决于游标并发选项和游标   SELECT   语句中的锁提示。  </p><p>锁提示   只读   乐观数值   乐观行版本控制   锁定无提示   未锁定   未锁定   未锁定   更新   NOLOCK   未锁定   未锁定   未锁定   未锁定   HOLDLOCK   共享   共享   共享   更新   UPDLOCK   错误   更新   更新   更新   TABLOCKX   错误   未锁定   未锁定   更新其它   未锁定   未锁定   未锁定   更新   *指定   NOLOCK   提示将使指定了该提示的表在游标内是只读的。 </p><p>16、用Profiler来跟踪查询，得到查询所需的时间，找出SQL的问题所在;用索引优化器优化索引 </p><p>17、注意UNion和UNion   all   的区别。UNION   all好 </p><p>18、注意使用DISTINCT，在没有必要时不要用，它同UNION一样会使查询变慢。重复的记录在查询里是没有问题的 </p><p>19、查询时不要返回不需要的行、列 </p><p>20、用sp_configure   ‘query   governor   cost   limit’或者SET   QUERY_GOVERNOR_COST_LIMIT来限制查询消耗的资源。当评估查询消耗的资源超出限制时，服务器自动取消查询,在查询之前就扼杀掉。 SET   LOCKTIME设置锁的时间 </p><p>21、用select   top   100   /   10   Percent   来限制用户返回的行数或者SET   ROWCOUNT来限制操作的行 </p><p>22、在SQL2000以前，一般不要用如下的字句 “IS   NULL”,   “ &lt;&gt; “,   “!=”,   “!&gt; “,   “! &lt;”,   “NOT”,   “NOT   EXISTS”,   “NOT   IN”,   “NOT   LIKE”,   and   “LIKE   ‘%500’”，因为他们不走索引全是表扫描。</p><p>也不要在WHere字句中的列名加函数，如 Convert，substring等,如果必须用函数的时候，创建计算列再创建索引来替代.还可以变通写法：WHERE   SUBSTRING(firstname,1,1)   =   ‘m’改为WHERE   firstname   like   ‘m%’（索引扫描），一定要将函数和列名分开。并且索引不能建得太多和太大。</p><p>NOT   IN会多次扫描表，使用EXISTS、NOT   EXISTS   ，IN   ,   LEFT   OUTER   JOIN   来替代，特别是左连接,而Exists比IN更快，最慢的是NOT操作.如果列的值含有空，以前它的索引不起作用，现在2000的优化器能够处理了。相同 的是IS   NULL，“NOT”,   “NOT   EXISTS”,   “NOT   IN”能优化她，而” &lt;&gt; ”等还是不能优化，用不到索引。 </p><p>23、使用Query   Analyzer，查看SQL语句的查询计划和评估分析是否是优化的SQL。一般的20%的代码占据了80%的资源，我们优化的重点是这些慢的地方。 </p><p>24、如果使用了IN或者OR等时发现查询没有走索引，使用显示申明指定索引：   SELECT   *   FROM   PersonMember   (INDEX   =   IX_Title)   WHERE   processid   IN   (‘男’，‘女’) </p><p>25、将需要查询的结果预先计算好放在表中，查询的时候再SELECT。这在SQL7.0以前是最重要的手段。例如医院的住院费计算。 </p><p>26、MIN()   和   MAX()能使用到合适的索引 </p><p>27、数据库有一个原则是代码离数据越近越好，所以优先选择Default,依次为Rules,Triggers,   Constraint（约束如外健主健CheckUNIQUE……,数据类型的最大长度等等都是约束）,Procedure.这样不仅维护工作小，编写程 序质量高，并且执行的速度快。 </p><p>28、如果要插入大的二进制值到Image列，使用存储过程，千万不要用内嵌INsert来插入(不知JAVA是否)。因为这样应用程序首先将二进 制值转换成字符串（尺寸是它的两倍），服务器受到字符后又将他转换成二进制值.存储过程就没有这些动作:   方法：Create   procedure   p_insert   as   insert   into   table(Fimage)   values   (@image),   在前台调用这个存储过程传入二进制参数，这样处理速度明显改善。 </p><p>29、Between在某些时候比IN速度更快,Between能够更快地根据索引找到范围。用查询优化器可见到差别。   select   <em>   from   chineseresume   where   title   in   (‘男’,’女’)   Select   </em>   from   chineseresume   where   between   ‘男’   and   ‘女’   是一样的。由于in会在比较多次，所以有时会慢些。 </p><p>30、在必要是对全局或者局部临时表创建索引，有时能够提高速度，但不是一定会这样，因为索引也耗费大量的资源。他的创建同是实际表一样。 </p><p>31、不要建没有作用的事物例如产生报表时，浪费资源。只有在必要使用事物时使用它。 </p><p>32、用OR的字句可以分解成多个查询，并且通过UNION   连接多个查询。他们的速度只同是否使用索引有关,如果查询需要用到联合索引，用UNION   all执行的效率更高.多个OR的字句没有用到索引，改写成UNION的形式再试图与索引匹配。一个关键的问题是否用到索引。 </p><p>33、尽量少用视图，它的效率低。对视图操作比直接对表操作慢,可以用stored   procedure来代替她。特别的是不要用视图嵌套,嵌套视图增加了寻找原始资料的难度。我们看视图的本质：它是存放在服务器上的被优化好了的已经产生 了查询规划的SQL。对单个表检索数据时，不要使用指向多个表的视图，直接从表检索或者仅仅包含这个表的视图上读，否则增加了不必要的开销,查询受到干 扰.为了加快视图的查询，MsSQL增加了视图索引的功能。 </p><p>34、没有必要时不要用DISTINCT和ORDER   BY，这些动作可以改在客户端执行。它们增加了额外的开销。这同UNION   和UNION   ALL一样的道理。   SELECT   top   20   ad.companyname,comid,position,ad.referenceid,worklocation,   convert(varchar(10),ad.postDate,120)   as   postDate1,workyear,degreedescription   FROM   jobcn_query.dbo.COMPANYAD_query   ad   where   referenceID   in(‘JCNAD00329667’,’JCNAD132168’,’JCNAD00337748’,’JCNAD00338345’,’JCNAD00333138’,’JCNAD00303570’,   ‘JCNAD00303569’,’JCNAD00303568’,’JCNAD00306698’,’JCNAD00231935’,’JCNAD00231933’,’JCNAD00254567’,   ‘JCNAD00254585’,’JCNAD00254608’,’JCNAD00254607’,’JCNAD00258524’,’JCNAD00332133’,’JCNAD00268618’,   ‘JCNAD00279196’,’JCNAD00268613’)   order   by   postdate   desc </p><p>35、在IN后面值的列表中，将出现最频繁的值放在最前面，出现得最少的放在最后面，减少判断的次数 </p><p>36、当用SELECT   INTO时，它会锁住系统表(sysobjects，sysindexes等等)，阻塞其他的连接的存取。创建临时表时用显示申明语句，而不是 select   INTO.   drop   table   t_lxh   begin   tran   select   <em>   into   t_lxh   from   chineseresume   where   name   =   ‘XYZ’   –commit   在另一个连接中SELECT   </em>   from   sysobjects可以看到   SELECT   INTO   会锁住系统表，Create   table   也会锁系统表(不管是临时表还是系统表)。所以千万不要在事物内使用它！！！这样的话如果是经常要用的临时表请使用实表，或者临时表变量。 </p><p>37、一般在GROUP   BY   个HAVING字句之前就能剔除多余的行，所以尽量不要用它们来做剔除行的工作。他们的执行顺序应该如下最优：select   的Where字句选择所有合适的行，Group   By用来分组个统计行，Having字句用来剔除多余的分组。这样Group   By   个Having的开销小，查询快.对于大的数据行进行分组和Having十分消耗资源。如果Group   BY的目的不包括计算，只是分组，那么用Distinct更快 </p><p>38、一次更新多条记录比分多次更新每次一条快,就是说批处理好 </p><p>39、少用临时表，尽量用结果集和Table类性的变量来代替它,Table   类型的变量比临时表好 </p><p>40、在SQL2000下，计算字段是可以索引的，需要满足的条件如下： </p><p>  a、计算字段的表达是确定的  </p><p>  b、不能用在TEXT,Ntext，Image数据类型  </p><p>  c、必须配制如下选项   ANSI_NULLS   =   ON,   ANSI_PADDINGS   =   ON,   ……. </p><p>41、尽量将数据的处理工作放在服务器上，减少网络的开销，如使用存储过程。存储过程是编译好、优化过、并且被组织到一个执行规划里、且存储在数据 库中的 SQL语句，是控制流语言的集合，速度当然快。反复执行的动态SQL,可以使用临时存储过程，该过程（临时表）被放在Tempdb中。以前由于SQL   SERVER对复杂的数学计算不支持，所以不得不将这个工作放在其他的层上而增加网络的开销。SQL2000支持UDFs,现在支持复杂的数学计算，函数 的返回值不要太大，这样的开销很大。用户自定义函数象光标一样执行的消耗大量的资源，如果返回大的结果采用存储过程 </p><p>42、不要在一句话里再三的使用相同的函数，浪费资源,将结果放在变量里再调用更快 </p><p>43、SELECT   COUNT(*)的效率教低，尽量变通他的写法，而EXISTS快.同时请注意区别：   select   count(Field   of   null)   from   Table   和   select   count(Field   of   NOT   null)   from   Table   的返回值是不同的。 </p><p>44、当服务器的内存够多时，配制线程数量   =   最大连接数+5，这样能发挥最大的效率；否则使用   配制线程数量 &lt;最大连接数启用SQL   SERVER的线程池来解决,如果还是数量   =   最大连接数+5，严重的损害服务器的性能。 </p><p>45、按照一定的次序来访问你的表。如果你先锁住表A，再锁住表B，那么在所有的存储过程中都要按照这个顺序来锁定它们。如果你（不经意的）某个存储过程中先锁定表B，再锁定表A，这可能就会导致一个死锁。如果锁定顺序没有被预先详细的设计好，死锁很难被发现 </p><p>46、通过SQL   Server   Performance   Monitor监视相应硬件的负载   Memory:   Page   Faults   /   sec计数器如果该值偶尔走高，表明当时有线程竞争内存。如果持续很高，则内存可能是瓶颈。   Process: </p><p>​    1、%   DPC   Time   指在范例间隔期间处理器用在缓延程序调用(DPC)接收和提供服务的百分比。(DPC   正在运行的为比标准间隔优先权低的间隔)。   由于   DPC   是以特权模式执行的，DPC   时间的百分比为特权时间   百分比的一部分。这些时间单独计算并且不属于间隔计算总数的一部   分。这个总数显示了作为实例时间百分比的平均忙时。 </p><p>​    2、%Processor   Time计数器　如果该参数值持续超过95%，表明瓶颈是CPU。可以考虑增加一个处理器或换一个更快的处理器。  </p><p>​    3、%   Privileged   Time   指非闲置处理器时间用于特权模式的百分比。(特权模式是为操作系统组件和操纵硬件驱动程序而设计的一种处理模式。它允许直接访问硬件和所有内存。另一种模 式为用户模式，它是一种为应用程序、环境分系统和整数分系统设计的一种有限处理模式。操作系统将应用程序线程转换成特权模式以访问操作系统服务)。   特权时间的   %   包括为间断和   DPC   提供服务的时间。特权时间比率高可能是由于失败设备产生的大数量的间隔而引起的。这个计数器将平均忙时作为样本时间的一部分显示。 </p><p>​    4、%   User   Time表示耗费CPU的数据库操作，如排序，执行aggregate   functions等。如果该值很高，可考虑增加索引，尽量使用简单的表联接，水平分割大表格等方法来降低该值。   Physical   Disk:   Curretn   Disk   Queue   Length计数器该值应不超过磁盘数的1.5~2倍。要提高性能，可增加磁盘。   SQLServer:Cache   Hit   Ratio计数器该值越高越好。如果持续低于80%，应考虑增加内存。   注意该参数值是从SQL   Server启动后，就一直累加记数，所以运行经过一段时间后，该值将不能反映系统当前值。 </p><p>47、分析select   emp_name   form   employee   where   salary   &gt;   3000   在此语句中若salary是Float类型的，则优化器对其进行优化为Convert(float,3000)，因为3000是个整数，我们应在编程时使 用3000.0而不要等运行时让DBMS进行转化。同样字符和整型数据的转换。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;处理百万级以上的数据提高查询速度的方法：&lt;/p&gt;
&lt;p&gt; 1.应尽量避免在 where 子句中使用!=或&amp;lt;&amp;gt;操作符，否则将引擎放弃使用索引而进行全表扫描。&lt;/p&gt;
&lt;p&gt; 2.对查询进行优化，应尽量避免全表扫描，首先应考虑在 where 及 order by 涉
      
    
    </summary>
    
    
      <category term="数据库" scheme="http://yoursite.com/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
  </entry>
  
  <entry>
    <title>数据库索引和mysql数据库索引类型和原理</title>
    <link href="http://yoursite.com/2019/02/18/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B4%A2%E5%BC%95%E5%92%8Cmysql%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B4%A2%E5%BC%95%E7%B1%BB%E5%9E%8B%E5%92%8C%E5%8E%9F%E7%90%86/"/>
    <id>http://yoursite.com/2019/02/18/数据库索引和mysql数据库索引类型和原理/</id>
    <published>2019-02-18T05:24:34.000Z</published>
    <updated>2019-02-18T06:33:42.810Z</updated>
    
    <content type="html"><![CDATA[<h1 id="什么是数据库索引"><a href="#什么是数据库索引" class="headerlink" title="什么是数据库索引"></a>什么是数据库索引</h1><p><a href="https://baike.baidu.com/item/%E7%B4%A2%E5%BC%95/5716853" target="_blank" rel="noopener">索引</a>是对<a href="https://baike.baidu.com/item/%E6%95%B0%E6%8D%AE%E5%BA%93/103728" target="_blank" rel="noopener">数据库</a>表中一列或多列的值进行排序的一种结构，使用索引可快速访问数据库表中的特定信息。如果想按特定职员的姓来查找他或她，则与在表中搜索所有的行相比，索引有助于更快地获取信息。</p><p>索引的一个主要目的就是加快检索表中数据，亦即能协助信息搜索者尽快的找到符合限制条件的记录ID的辅助数据结构。</p><h1 id="Mysql几种索引类型的区别及适用情况"><a href="#Mysql几种索引类型的区别及适用情况" class="headerlink" title="Mysql几种索引类型的区别及适用情况"></a><a href="https://www.cnblogs.com/yuan-shuai/p/3225417.html" target="_blank" rel="noopener">Mysql几种索引类型的区别及适用情况</a></h1><p>如大家所知道的，Mysql目前主要有以下几种索引类型：FULLTEXT，HASH，BTREE，RTREE。</p><p>那么，这几种索引有什么功能和性能上的不同呢？</p><p><strong>FULLTEXT</strong></p><p>即为全文索引，目前只有MyISAM引擎支持。其可以在CREATE TABLE ，ALTER TABLE ，CREATE INDEX 使用，不过目前只有 CHAR、VARCHAR ，TEXT 列上可以创建全文索引。值得一提的是，在数据量较大时候，现将数据放入一个没有全局索引的表中，然后再用CREATE INDEX创建FULLTEXT索引，要比先为一张表建立FULLTEXT然后再将数据写入的速度快很多。</p><p>全文索引并不是和MyISAM一起诞生的，它的出现是为了解决WHERE name LIKE “%word%”这类针对文本的模糊查询效率较低的问题。在没有全文索引之前，这样一个查询语句是要进行遍历数据表操作的，可见，在数据量较大时是极其的耗时的，如果没有异步IO处理，进程将被挟持，很浪费时间，当然这里不对异步IO作进一步讲解，想了解的童鞋，自行谷哥。</p><p>全文索引的使用方法并不复杂：</p><p>创建ALTER TABLE table ADD INDEX <code>FULLINDEX</code> USING FULLTEXT(<code>cname1</code>[,cname2…]);</p><p>使用SELECT * FROM table WHERE MATCH(cname1[,cname2…]) AGAINST (‘word’ MODE );</p><p>其中， MODE为搜寻方式（IN BOOLEAN MODE ，IN NATURAL LANGUAGE MODE ，IN NATURAL LANGUAGE MODE WITH QUERY EXPANSION / WITH QUERY EXPANSION）。</p><p>关于这三种搜寻方式，愚安在这里也不多做交代，简单地说，就是，布尔模式，允许word里含一些特殊字符用于标记一些具体的要求，如+表示一定要有，-表示一定没有，*表示通用匹配符，是不是想起了正则，类似吧；自然语言模式，就是简单的单词匹配；含表达式的自然语言模式，就是先用自然语言模式处理，对返回的结果，再进行表达式匹配。</p><p>对搜索引擎稍微有点了解的同学，肯定知道分词这个概念，FULLTEXT索引也是按照分词原理建立索引的。西文中，大部分为字母文字，分词可以很方便的按照空格进行分割。但很明显，中文不能按照这种方式进行分词。那又怎么办呢？这个向大家介绍一个Mysql的中文分词插件<strong>Mysqlcft</strong>，有了它，就可以对中文进行分词，想了解的同学请移步<a href="http://code.google.com/p/mysqlcft/" target="_blank" rel="noopener">Mysqlcft</a>，当然还有其他的分词插件可以使用。</p><p><strong>HASH</strong></p><p><strong>Hash</strong>这个词，可以说，自打我们开始码的那一天起，就开始不停地见到和使用到了。其实，hash就是一种（key=&gt;value）形式的键值对，如数学中的函数映射，允许多个key对应相同的value，但不允许一个key对应多个value。正是由于这个特性，hash很适合做索引，为某一列或几列建立hash索引，就会利用这一列或几列的值通过一定的算法计算出一个hash值，对应一行或几行数据（这里在概念上和函数映射有区别，不要混淆）。在java语言中，每个类都有自己的hashcode()方法，没有显示定义的都继承自object类，该方法使得每一个对象都是唯一的，在进行对象间equal比较，和序列化传输中起到了很重要的作用。hash的生成方法有很多种，足可以保证hash码的唯一性，例如在MongoDB中，每一个document都有系统为其生成的唯一的objectID（包含时间戳，主机散列值，进程PID，和自增ID）也是一种hash的表现。额，我好像扯远了-_-!</p><p>由于hash索引可以一次定位，不需要像树形索引那样逐层查找,因此具有极高的效率。那为什么还需要其他的树形索引呢？</p><p>在这里愚安就不自己总结了。引用下园子里其他大神的文章：来自 14的路 的<a href="http://www.cnblogs.com/vicenteforever/articles/1789613.html" target="_blank" rel="noopener">MySQL的btree索引和hash索引的区别</a></p><p>（1）Hash 索引仅仅能满足”=”,”IN”和”&lt;=&gt;”查询，不能使用范围查询。<br>由于 Hash 索引比较的是进行 Hash 运算之后的 Hash 值，所以它只能用于等值的过滤，不能用于基于范围的过滤，因为经过相应的 Hash 算法处理之后的 Hash 值的大小关系，并不能保证和Hash运算前完全一样。<br>（2）Hash 索引无法被用来避免数据的排序操作。<br>由于 Hash 索引中存放的是经过 Hash 计算之后的 Hash 值，而且Hash值的大小关系并不一定和 Hash 运算前的键值完全一样，所以数据库无法利用索引的数据来避免任何排序运算；<br>（3）Hash 索引不能利用部分索引键查询。<br>对于组合索引，Hash 索引在计算 Hash 值的时候是组合索引键合并后再一起计算 Hash 值，而不是单独计算 Hash 值，所以通过组合索引的前面一个或几个索引键进行查询的时候，Hash 索引也无法被利用。<br>（4）Hash 索引在任何时候都不能避免表扫描。<br>前面已经知道，Hash 索引是将索引键通过 Hash 运算之后，将 Hash运算结果的 Hash 值和所对应的行指针信息存放于一个 Hash 表中，由于不同索引键存在相同 Hash 值，所以即使取满足某个 Hash 键值的数据的记录条数，也无法从 Hash 索引中直接完成查询，还是要通过访问表中的实际数据进行相应的比较，并得到相应的结果。<br>（5）Hash 索引遇到大量Hash值相等的情况后性能并不一定就会比B-Tree索引高。<br>对于选择性比较低的索引键，如果创建 Hash 索引，那么将会存在大量记录指针信息存于同一个 Hash 值相关联。这样要定位某一条记录时就会非常麻烦，会浪费多次表数据的访问，而造成整体性能低下。</p><p>愚安我稍作补充，讲一下HASH索引的过程，顺便解释下上面的第4,5条：</p><p>当我们为某一列或某几列建立hash索引时（目前就只有MEMORY引擎显式地支持这种索引），会在硬盘上生成类似如下的文件：</p><table><thead><tr><th>hash值</th><th>存储地址</th></tr></thead><tbody><tr><td>1db54bc745a1</td><td>77#45b5</td></tr><tr><td>4bca452157d4</td><td>76#4556,77#45cc…</td></tr></tbody></table><p>…</p><p>hash值即为通过特定算法由指定列数据计算出来，磁盘地址即为所在数据行存储在硬盘上的地址（也有可能是其他存储地址，其实MEMORY会将hash表导入内存）。</p><p>这样，当我们进行WHERE age = 18 时，会将18通过相同的算法计算出一个hash值==&gt;在hash表中找到对应的储存地址==&gt;根据存储地址取得数据。</p><p>所以，每次查询时都要遍历hash表，直到找到对应的hash值，如（4），数据量大了之后，hash表也会变得庞大起来，性能下降，遍历耗时增加，如（5）。</p><p><strong>BTREE</strong></p><p>BTREE索引就是一种将索引值按一定的算法，存入一个树形的数据结构中，相信学过数据结构的童鞋都对当初学习二叉树这种数据结构的经历记忆犹新，反正愚安我当时为了软考可是被这玩意儿好好地折腾了一番，不过那次考试好像没怎么考这个。如二叉树一样，每次查询都是从树的入口root开始，依次遍历node，获取leaf。</p><p>BTREE在MyISAM里的形式和Innodb稍有不同</p><p>在 Innodb里，有两种形态：一是primary key形态，其leaf node里存放的是数据，而且不仅存放了索引键的数据，还存放了其他字段的数据。二是secondary index，其leaf node和普通的BTREE差不多，只是还存放了指向主键的信息.</p><p>而在MyISAM里，主键和其他的并没有太大区别。不过和Innodb不太一样的地方是在MyISAM里，leaf node里存放的不是主键的信息，而是指向数据文件里的对应数据行的信息.</p><p><strong>RTREE</strong></p><p>RTREE在mysql很少使用，仅支持geometry数据类型，支持该类型的存储引擎只有MyISAM、BDb、InnoDb、NDb、Archive几种。</p><p>相对于BTREE，RTREE的优势在于范围查找.</p><p><strong>各种索引的使用情况</strong></p><p>（1）对于BTREE这种Mysql默认的索引类型，具有普遍的适用性</p><p>（2）由于FULLTEXT对中文支持不是很好，在没有插件的情况下，最好不要使用。其实，一些小的博客应用，只需要在数据采集时，为其建立关键字列表，通过关键字索引，也是一个不错的方法，至少愚安我是经常这么做的。</p><p>（3）对于一些搜索引擎级别的应用来说，FULLTEXT同样不是一个好的处理方法，Mysql的全文索引建立的文件还是比较大的，而且效率不是很高，即便是使用了中文分词插件，对中文分词支持也只是一般。真要碰到这种问题，Apache的Lucene或许是你的选择。</p><p>（4）正是因为hash表在处理较小数据量时具有无可比拟的素的优势，所以hash索引很适合做缓存（内存数据库）。如mysql数据库的内存版本Memsql，使用量很广泛的缓存工具Mencached，NoSql数据库redis等，都使用了hash索引这种形式。当然，不想学习这些东西的话Mysql的MEMORY引擎也是可以满足这种需求的。</p><p>（5）至于RTREE，愚安我至今还没有使用过，它具体怎么样，我就不知道了。有RTREE使用经历的同学，到时可以交流下！</p><h1 id="mysql数据库索引的类型和原理"><a href="#mysql数据库索引的类型和原理" class="headerlink" title="mysql数据库索引的类型和原理"></a>mysql数据库索引的类型和原理</h1><h2 id="索引初识："><a href="#索引初识：" class="headerlink" title="索引初识："></a>索引初识：</h2><p>最普通的情况，是为出现在where子句的字段建一个索引。为方便讲述，我们先建立一个如下的表。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE mytable (</span><br><span class="line">　id serial primary key,</span><br><span class="line">　category_id int not null default 0,</span><br><span class="line">　user_id int not null default 0,</span><br><span class="line">　adddate int not null default 0</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>很简单吧，不过对于要说明这个问题，已经足够了。如果你在查询时常用类似以下的语句：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT * FROM mytable WHERE category_id=1;</span><br></pre></td></tr></table></figure><p>  最直接的应对之道，是为category_id建立一个简单的索引：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">CREATE INDEX mytable_categoryid ON mytable (category_id);</span><br></pre></td></tr></table></figure><p>  OK，搞定？先别高兴，如果你有不止一个选择条件呢？例如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT * FROM mytable WHERE category_id=1 AND user_id=2;</span><br></pre></td></tr></table></figure><p>  你的第一反应可能是，再给user_id建立一个索引。不好，这不是一个最佳的方法。你可以建立多重的索引。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">CREATE INDEX mytable_categoryid_userid ON mytable (category_id,user_id);</span><br></pre></td></tr></table></figure><p>  注意到我在命名时的习惯了吗？我使用”表名<em>字段1名</em>字段2名”的方式。你很快就会知道我为什么这样做了。</p><p>  现在你已经为适当的字段建立了索引，不过，还是有点不放心吧，你可能会问，数据库会真正用到这些索引吗？测试一下就OK，对于大多数的数据库来说，这是很容易的，只要使用EXPLAIN命令：</p><p><a href="javascript:void(0" target="_blank" rel="noopener"><img src="https://common.cnblogs.com/images/copycode.gif" alt="复制代码"></a>;)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">EXPLAIN</span><br><span class="line"></span><br><span class="line">　SELECT * FROM mytable </span><br><span class="line">　　WHERE category_id=1 AND user_id=2;</span><br><span class="line"></span><br><span class="line">This is what Postgres 7.1 returns (exactly as I expected) </span><br><span class="line"></span><br><span class="line">　NOTICE: QUERY PLAN:</span><br><span class="line"></span><br><span class="line">Index Scan using mytable_categoryid_userid on </span><br><span class="line">  mytable (cost=0.00..2.02 rows=1 width=16)</span><br><span class="line"></span><br><span class="line">EXPLAIN</span><br></pre></td></tr></table></figure><p><a href="javascript:void(0" target="_blank" rel="noopener"><img src="https://common.cnblogs.com/images/copycode.gif" alt="复制代码"></a>;)</p><p>  以上是postgres的数据，可以看到该数据库在查询的时候使用了一个索引（一个好开始），而且它使用的是我创建的第二个索引。看到我上面命名的好处了吧，你马上知道它使用适当的索引了。</p><p>  接着，来个稍微复杂一点的，如果有个ORDER BY字句呢？不管你信不信，大多数的数据库在使用order by的时候，都将会从索引中受益。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT * FROM mytable WHERE category_id=1 AND user_id=2 ORDER BY adddate DESC;</span><br></pre></td></tr></table></figure><p>  有点迷惑了吧？很简单，就象为where字句中的字段建立一个索引一样，也为ORDER BY的字句中的字段建立一个索引：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">CREATE INDEX mytable_categoryid_userid_adddate ON mytable (category_id,user_id,adddate);</span><br></pre></td></tr></table></figure><p>注意: “mytable_categoryid_userid_adddate” 将会被截短为<br>“mytable_categoryid_userid_addda”</p><p><a href="javascript:void(0" target="_blank" rel="noopener"><img src="https://common.cnblogs.com/images/copycode.gif" alt="复制代码"></a>;)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">CREATE</span><br><span class="line"></span><br><span class="line">  EXPLAIN SELECT * FROM mytable</span><br><span class="line">　　WHERE category_id=1 AND user_id=2</span><br><span class="line">　　　ORDER BY adddate DESC;</span><br><span class="line"></span><br><span class="line">　NOTICE: QUERY PLAN:</span><br><span class="line"></span><br><span class="line">　Sort (cost=2.03..2.03 rows=1 width=16)</span><br><span class="line">　　-&gt; Index Scan using mytable_categoryid_userid_addda </span><br><span class="line">　　　　on mytable (cost=0.00..2.02 rows=1 width=16)</span><br><span class="line"></span><br><span class="line">EXPLAIN</span><br></pre></td></tr></table></figure><p><a href="javascript:void(0" target="_blank" rel="noopener"><img src="https://common.cnblogs.com/images/copycode.gif" alt="复制代码"></a>;)</p><p>  看看EXPLAIN的输出，好象有点恐怖啊，数据库多做了一个我们没有要求的排序，这下知道性能如何受损了吧，看来我们对于数据库的自身运作是有点过于乐观了，那么，给数据库多一点提示吧。</p><p>  为了跳过排序这一步，我们并不需要其它另外的索引，只要将查询语句稍微改一下。这里用的是postgres，我们将给该数据库一个额外的提示–在ORDER BY语句中，加入where语句中的字段。这只是一个技术上的处理，并不是必须的，因为实际上在另外两个字段上，并不会有任何的排序操作，不过如果加入，postgres将会知道哪些是它应该做的。</p><p><a href="javascript:void(0" target="_blank" rel="noopener"><img src="https://common.cnblogs.com/images/copycode.gif" alt="复制代码"></a>;)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">EXPLAIN SELECT * FROM mytable </span><br><span class="line">  WHERE category_id=1 AND user_id=2</span><br><span class="line">　　ORDER BY category_id DESC,user_id DESC,adddate DESC;</span><br><span class="line"></span><br><span class="line">NOTICE: QUERY PLAN:</span><br><span class="line"></span><br><span class="line">Index Scan Backward using </span><br><span class="line">　mytable_categoryid_userid_addda on mytable </span><br><span class="line">　  (cost=0.00..2.02 rows=1 width=16)</span><br><span class="line"></span><br><span class="line">EXPLAIN</span><br></pre></td></tr></table></figure><p><a href="javascript:void(0" target="_blank" rel="noopener"><img src="https://common.cnblogs.com/images/copycode.gif" alt="复制代码"></a>;)</p><p>  现在使用我们料想的索引了，而且它还挺聪明，知道可以从索引后面开始读，从而避免了任何的排序。</p><p>  以上说得细了一点，不过如果你的数据库非常巨大，并且每日的页面请求达上百万算，我想你会获益良多的。不过，如果你要做更为复杂的查询呢，例如将多张表结合起来查询，特别是where限制字句中的字段是来自不止一个表格时，应该怎样处理呢？我通常都尽量避免这种做法，因为这样数据库要将各个表中的东西都结合起来，然后再排除那些不合适的行，搞不好开销会很大。</p><p>  如果不能避免，你应该查看每张要结合起来的表，并且使用以上的策略来建立索引，然后再用EXPLAIN命令验证一下是否使用了你料想中的索引。如果是的话，就OK。不是的话，你可能要建立临时的表来将他们结合在一起，并且使用适当的索引。</p><p>  要注意的是，建立太多的索引将会影响更新和插入的速度，因为它需要同样更新每个索引文件。对于一个经常需要更新和插入的表格，就没有必要为一个很少使用的where字句单独建立索引了，对于比较小的表，排序的开销不会很大，也没有必要建立另外的索引。</p><p>  以上介绍的只是一些十分基本的东西，其实里面的学问也不少，单凭EXPLAIN我们是不能判定该方法是否就是最优化的，每个数据库都有自己的一些优化器，虽然可能还不太完善，但是它们都会在查询时对比过哪种方式较快，在某些情况下，建立索引的话也未必会快，</p><p>例如索引放在一个不连续的存储空间时，这会增加读磁盘的负担，因此，哪个是最优，应该通过实际的使用环境来检验。</p><p>  在刚开始的时候，如果表不大，没有必要作索引，我的意见是在需要的时候才作索引，也可用一些命令来优化表，例如MySQL可用”OPTIMIZE TABLE”。</p><p>  综上所述，在如何为数据库建立恰当的索引方面，你应该有一些基本的概念了。</p><p>-————————————————————–</p><p>关于MySQL索引的好处，如果正确合理设计并且使用索引的MySQL是一辆兰博基尼的话，那么没有设计和使用索引的MySQL就是一个人力三轮车。对于没有索引的表，单表查询可能几十万数据就是瓶颈，而通常大型网站单日就可能会产生几十万甚至几百万的数据，没有索引查询会变的非常缓慢。还是以WordPress来说，其多个数据表都会对经常被查询的字段添加索引，比如wp_comments表中针对5个字段设计了BTREE索引。</p><h2 id="一个简单的对比测试"><a href="#一个简单的对比测试" class="headerlink" title="一个简单的对比测试"></a>一个简单的对比测试</h2><p>以我去年测试的数据作为一个简单示例，20多条数据源随机生成200万条数据，平均每条数据源都重复大概10万次，表结构比较简单，仅包含一个自增ID，一个char类型，一个text类型和一个int类型，单表2G大小，使用MyIASM引擎。开始测试未添加任何索引。</p><p>执行下面的SQL语句：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT id,FROM_UNIXTIME(time) FROM article WHERE a.title=&apos;测试标题&apos;；</span><br></pre></td></tr></table></figure><p>查询需要的时间非常恐怖的，如果加上联合查询和其他一些约束条件，数据库会疯狂的消耗内存，并且会影响前端程序的执行。这时给title字段添加一个BTREE索引：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ALTER TABLE article ADD INDEX index_article_title ON title(200);</span><br></pre></td></tr></table></figure><p>再次执行上述查询语句，其对比非常明显：</p><h2 id="MySQL索引的概念"><a href="#MySQL索引的概念" class="headerlink" title="MySQL索引的概念"></a>MySQL索引的概念</h2><p>索引是一种特殊的文件(InnoDB数据表上的索引是表空间的一个组成部分)，它们包含着对数据表里所有记录的引用指针。更通俗的说，数据库索引好比是一本书前面的目录，能加快数据库的查询速度。上述SQL语句，在没有索引的情况下，数据库会遍历全部200条数据后选择符合条件的；而有了相应的索引之后，数据库会直接在索引中查找符合条件的选项。如果我们把SQL语句换成“SELECT * FROM article WHERE id=2000000”，那么你是希望数据库按照顺序读取完200万行数据以后给你结果还是直接在索引中定位呢？上面的两个图片鲜明的用时对比已经给出了答案（注：一般数据库默认都会为主键生成索引）。</p><p>索引分为聚簇索引和非聚簇索引两种，聚簇索引是按照数据存放的物理位置为顺序的，而非聚簇索引就不一样了；聚簇索引能提高多行检索的速度，而非聚簇索引对于单行的检索很快。</p><h2 id="MySQL索引的类型"><a href="#MySQL索引的类型" class="headerlink" title="MySQL索引的类型"></a>MySQL索引的类型</h2><p><strong>1. 普通索引</strong></p><p>这是最基本的索引，它没有任何限制，比如上文中为title字段创建的索引就是一个普通索引，MyIASM中默认的BTREE类型的索引，也是我们大多数情况下用到的索引。</p><p><a href="javascript:void(0" target="_blank" rel="noopener"><img src="https://common.cnblogs.com/images/copycode.gif" alt="复制代码"></a>;)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">–直接创建索引</span><br><span class="line">CREATE INDEX index_name ON table(column(length))</span><br><span class="line">–修改表结构的方式添加索引</span><br><span class="line">ALTER TABLE table_name ADD INDEX index_name ON (column(length))</span><br><span class="line">–创建表的时候同时创建索引</span><br><span class="line">CREATE TABLE `table` (</span><br><span class="line">`id` int(11) NOT NULL AUTO_INCREMENT ,</span><br><span class="line">`title` char(255) CHARACTER SET utf8 COLLATE utf8_general_ci NOT NULL ,</span><br><span class="line">`content` text CHARACTER SET utf8 COLLATE utf8_general_ci NULL ,</span><br><span class="line">`time` int(10) NULL DEFAULT NULL ,</span><br><span class="line">PRIMARY KEY (`id`),</span><br><span class="line">INDEX index_name (title(length))</span><br><span class="line">)</span><br><span class="line">–删除索引</span><br><span class="line">DROP INDEX index_name ON table</span><br></pre></td></tr></table></figure><p><a href="javascript:void(0" target="_blank" rel="noopener"><img src="https://common.cnblogs.com/images/copycode.gif" alt="复制代码"></a>;)</p><p><strong>2. 唯一索引</strong></p><p>与普通索引类似，不同的就是：索引列的值必须唯一，但允许有空值（注意和主键不同）。如果是组合索引，则列值的组合必须唯一，创建方法和普通索引类似。</p><p><a href="javascript:void(0" target="_blank" rel="noopener"><img src="https://common.cnblogs.com/images/copycode.gif" alt="复制代码"></a>;)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">–创建唯一索引</span><br><span class="line">CREATE UNIQUE INDEX indexName ON table(column(length))</span><br><span class="line">–修改表结构</span><br><span class="line">ALTER TABLE table_name ADD UNIQUE indexName ON (column(length))</span><br><span class="line">–创建表的时候直接指定</span><br><span class="line">CREATE TABLE `table` (</span><br><span class="line">`id` int(11) NOT NULL AUTO_INCREMENT ,</span><br><span class="line">`title` char(255) CHARACTER SET utf8 COLLATE utf8_general_ci NOT NULL ,</span><br><span class="line">`content` text CHARACTER SET utf8 COLLATE utf8_general_ci NULL ,</span><br><span class="line">`time` int(10) NULL DEFAULT NULL ,</span><br><span class="line">PRIMARY KEY (`id`),</span><br><span class="line">UNIQUE indexName (title(length))</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p><a href="javascript:void(0" target="_blank" rel="noopener"><img src="https://common.cnblogs.com/images/copycode.gif" alt="复制代码"></a>;)</p><p><strong>3. 全文索引（FULLTEXT）</strong></p><p>MySQL从3.23.23版开始支持全文索引和全文检索，FULLTEXT索引仅可用于 MyISAM 表；他们可以从CHAR、VARCHAR或TEXT列中作为CREATE TABLE语句的一部分被创建，或是随后使用ALTER TABLE 或CREATE INDEX被添加。////对于较大的数据集，将你的资料输入一个没有FULLTEXT索引的表中，然后创建索引，其速度比把资料输入现有FULLTEXT索引的速度更为快。不过切记对于大容量的数据表，生成全文索引是一个非常消耗时间非常消耗硬盘空间的做法。</p><p><a href="javascript:void(0" target="_blank" rel="noopener"><img src="https://common.cnblogs.com/images/copycode.gif" alt="复制代码"></a>;)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">–创建表的适合添加全文索引</span><br><span class="line">CREATE TABLE `table` (</span><br><span class="line">`id` int(11) NOT NULL AUTO_INCREMENT ,</span><br><span class="line">`title` char(255) CHARACTER SET utf8 COLLATE utf8_general_ci NOT NULL ,</span><br><span class="line">`content` text CHARACTER SET utf8 COLLATE utf8_general_ci NULL ,</span><br><span class="line">`time` int(10) NULL DEFAULT NULL ,</span><br><span class="line">PRIMARY KEY (`id`),</span><br><span class="line">FULLTEXT (content)</span><br><span class="line">);</span><br><span class="line">–修改表结构添加全文索引</span><br><span class="line">ALTER TABLE article ADD FULLTEXT index_content(content)</span><br><span class="line">–直接创建索引</span><br><span class="line">CREATE FULLTEXT INDEX index_content ON article(content)</span><br></pre></td></tr></table></figure><p><a href="javascript:void(0" target="_blank" rel="noopener"><img src="https://common.cnblogs.com/images/copycode.gif" alt="复制代码"></a>;)</p><p><strong>4. 单列索引、多列索引</strong></p><p>多个单列索引与单个多列索引的查询效果不同，因为执行查询时，MySQL只能使用一个索引，会从多个索引中选择一个限制最为严格的索引。</p><p><strong>5. 组合索引（最左前缀）</strong></p><p>平时用的SQL查询语句一般都有比较多的限制条件，所以为了进一步榨取MySQL的效率，就要考虑建立组合索引。例如上表中针对title和time建立一个组合索引：ALTER TABLE article ADD INDEX index_titme_time (title(50),time(10))。建立这样的组合索引，其实是相当于分别建立了下面两组组合索引：</p><p>–title,time</p><p>–title</p><p>为什么没有time这样的组合索引呢？这是因为MySQL组合索引“最左前缀”的结果。简单的理解就是只从最左面的开始组合。并不是只要包含这两列的查询都会用到该组合索引，如下面的几个SQL所示：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">–使用到上面的索引</span><br><span class="line">SELECT * FROM article WHREE title=&apos;测试&apos; AND time=1234567890;</span><br><span class="line">SELECT * FROM article WHREE utitle=&apos;测试&apos;;</span><br><span class="line">–不使用上面的索引</span><br><span class="line">SELECT * FROM article WHREE time=1234567890;</span><br></pre></td></tr></table></figure><h2 id="MySQL索引的优化"><a href="#MySQL索引的优化" class="headerlink" title="MySQL索引的优化"></a>MySQL索引的优化</h2><p>上面都在说使用索引的好处，但过多的使用索引将会造成滥用。因此索引也会有它的缺点：虽然索引大大提高了查询速度，同时却会降低更新表的速度，如对表进行INSERT、UPDATE和DELETE。因为更新表时，MySQL不仅要保存数据，还要保存一下索引文件。建立索引会占用磁盘空间的索引文件。一般情况这个问题不太严重，但如果你在一个大表上创建了多种组合索引，索引文件的会膨胀很快。索引只是提高效率的一个因素，如果你的MySQL有大数据量的表，就需要花时间研究建立最优秀的索引，或优化查询语句。下面是一些总结以及收藏的MySQL索引的注意事项和优化方法。</p><p><strong>1. 何时使用聚集索引或非聚集索引？</strong></p><table><thead><tr><th>动作描述</th><th>使用聚集索引</th><th>使用非聚集索引</th></tr></thead><tbody><tr><td>列经常被分组排序</td><td>使用</td><td>使用</td></tr><tr><td>返回某范围内的数据</td><td>使用</td><td>不使用</td></tr><tr><td>一个或极少不同值</td><td>不使用</td><td>不使用</td></tr><tr><td>小数目的不同值</td><td>使用</td><td>不使用</td></tr><tr><td>大数目的不同值</td><td>不使用</td><td>使用</td></tr><tr><td>频繁更新的列</td><td>不使用</td><td>使用</td></tr><tr><td>外键列</td><td>使用</td><td>使用</td></tr><tr><td>主键列</td><td>使用</td><td>使用</td></tr><tr><td>频繁修改索引列</td><td>不使用</td><td>使用</td></tr></tbody></table><p>事实上，我们可以通过前面聚集索引和非聚集索引的定义的例子来理解上表。如：返回某范围内的数据一项。比如您的某个表有一个时间列，恰好您把聚合索引建立在了该列，这时您查询2004年1月1日至2004年10月1日之间的全部数据时，这个速度就将是很快的，因为您的这本字典正文是按日期进行排序的，聚类索引只需要找到要检索的所有数据中的开头和结尾数据即可；而不像非聚集索引，必须先查到目录中查到每一项数据对应的页码，然后再根据页码查到具体内容。其实这个具体用法我还不是很理解，只能等待后期的项目开发中慢慢学学了。</p><p><strong>2. 索引不会包含有NULL值的列</strong></p><p>只要列中包含有NULL值都将不会被包含在索引中，复合索引中只要有一列含有NULL值，那么这一列对于此复合索引就是无效的。所以我们在数据库设计时不要让字段的默认值为NULL。</p><p><strong>3. 使用短索引</strong></p><p>对串列进行索引，如果可能应该指定一个前缀长度。例如，如果有一个CHAR(255)的列，如果在前10个或20个字符内，多数值是惟一的，那么就不要对整个列进行索引。短索引不仅可以提高查询速度而且可以节省磁盘空间和I/O操作。</p><p><strong>4. 索引列排序</strong></p><p>MySQL查询只使用一个索引，因此如果where子句中已经使用了索引的话，那么order by中的列是不会使用索引的。因此数据库默认排序可以符合要求的情况下不要使用排序操作；尽量不要包含多个列的排序，如果需要最好给这些列创建复合索引。</p><p><strong>5. like语句操作</strong></p><p>一般情况下不鼓励使用like操作，如果非使用不可，如何使用也是一个问题。like “%aaa%” 不会使用索引而like “aaa%”可以使用索引。</p><p><strong>6. 不要在列上进行运算</strong></p><p>例如：select <em> from users where YEAR(adddate)&lt;2007，将在每个行上进行运算，这将导致索引失效而进行全表扫描，因此我们可以改成：select </em> from users where adddate&lt;’2007-01-01′。关于这一点可以围观：<a href="http://www.zendstudio.net/archives/single-quotes-or-no-single-quotes-in-sql-query" target="_blank" rel="noopener">一个单引号引发的MYSQL性能损失。</a></p><p>最后总结一下，MySQL只对一下操作符才使用索引：&lt;,&lt;=,=,&gt;,&gt;=,between,in,以及某些时候的like(不以通配符%或_开头的情形)。而理论上每张表里面最多可创建16个索引，不过除非是数据量真的很多，否则过多的使用索引也不是那么好玩的，比如我刚才针对text类型的字段创建索引的时候，系统差点就卡死了。</p><p>-———————————————————————</p><h2 id="建立索引的优缺点"><a href="#建立索引的优缺点" class="headerlink" title="建立索引的优缺点:"></a>建立索引的优缺点:</h2><p><strong>为什么要创建索引呢？</strong></p><p>​        这是因为，创建索引可以大大提高系统的性能。<br>​        第一、通过创建唯一性索引，可以保证数据库表中每一行数据的唯一性。<br>​        第二、可以大大加快 数据的检索速度，这也是创建索引的最主要的原因。<br>​        第三、可以加速表和表之间的连接，特别是在实现数据的参考完整性方面特别有意义。<br>​        第四、在使用分组和排序子句进行数据检索时，同样可以显著减少查询中分组和排序的时间。<br>​        第五、通过使用索引，可以在查询的过程中，使用优化隐藏器，提高系统的性能。</p><p>​        也许会有人要问：增加索引有如此多的优点，为什么不对表中的每一个列创建一个索引呢？这种想法固然有其合理性，然而也有其片面性。虽然，索引有许多优点， 但是，为表中的每一个列都增加索引，是非常不明智的。</p><p>​       这是因为，增加索引也有许多不利的一个方面:</p><p>​        第一、创建索引和维护索引要耗费时间，这种时间随着数据量的增加而增加。 </p><p>​        第二、索引需要占物理空间，除了数据表占数据空间之外，每一个索引还要占一定的物理空间。如果要建立聚簇索引，那么需要的空间就会更大。 </p><p>​        第三、当对表中的数据进行增加、删除和修改的时候，索引也要动态的维护，这样就降低了数据的维护速度。</p><p><strong>什么样的字段适合创建索引:</strong></p><p> 索引是建立在数据库表中的某些列的上面。因此，在创建索引的时候，应该仔细考虑在哪些列上可以创建索引，在哪些列上不能创建索引。</p><p>​       一般来说，应该在这些列上创建索引，例如：</p><p>​       第一、在经常需要搜索的列上，可以加快搜索的速度； </p><p>​       第二、在作为主键的列上，强制该列的唯一性和组织表中数据的排列结构； </p><p>​       第三、在经常用在连接的列上，这些列主要是一些外键，可以加快连接的速度； </p><p>​       第四、在经常需要根据范围进行搜索的列上创建索引，因为索引已经排序，其指定的范围是连续的； </p><p>​       第五、在经常需要排序的列上创建索引，因为索引已经排序，这样查询可以利用索引的排序，加快排序查询时间； </p><p>​       第六、在经常使用在WHERE子句中的列上面创建索引，加快条件的判断速度。</p><p>​       建立索引，一般按照select的where条件来建立，比如： select的条件是where f1 and f2，那么如果我们在字段f1或字段f2上简历索引是没有用的，只有在字段f1和f2上同时建立索引才有用等。</p><p><strong>什么样的字段不适合创建索引:</strong></p><p>同样，对于有些列不应该创建索引。一般来说，不应该创建索引的的这些列具有下列特点：</p><p>　　第一，对于那些在查询中很少使用或者参考的列不应该创建索引。这是因为，既然这些列很少使用到，因此有索引或者无索引，</p><p>并不能提高查询速度。相反，由于增加了索引，反而降低了系统的维护速度和增大了空间需求。<br>​       第二，对于那些只有很少数据值的列也不应该增加索引。这是因为，由于这些列的取值很少，例如人事表的性别列，</p><p>在查询的结果中，结果集的数据行占了表中数据行的很大比 例，即需要在表中搜索的数据行的比例很大。</p><p>增加索引，并不能明显加快检索速度。<br>​       第三，对于那些定义为text, image和bit数据类型的列不应该增加索引。这是因为，这些列的数据量要么相当大，要么取值很少。<br>​       第四，当修改性能远远大于检索性能时，不应该创建索 引。这是因为，修改性能和检索性能是互相矛盾的。</p><p>当增加索引时，会提高检索性能，但是会降低修改性能。当减少索引时，会提高修改性能，降低检索性能。</p><p>因此，当修改性能远远大于检索性能时，不应该创建索引。</p><p><strong>创建索引的方法::</strong></p><p>1、创建索引，例如 create index &lt;索引的名字&gt; on table_name (列的列表);<br>​      2、修改表，例如 alter table table_name add index[索引的名字] (列的列表);<br>​      3、创建表的时候指定索引，例如create table table_name ( […], INDEX [索引的名字] (列的列表) );</p><p><strong>查看表中索引的方法:</strong></p><p>show index from table_name; 查看索引</p><p><strong>索引的类型及创建例子::</strong></p><p>1.PRIMARY KEY （主键索引）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">MySQL&gt; alter table table_name add primary key ( `column` )</span><br></pre></td></tr></table></figure><p>2.UNIQUE 或 UNIQUE KEY (唯一索引)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; alter table table_name add unique (`column`)</span><br></pre></td></tr></table></figure><p>3.FULLTEXT (全文索引)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; alter table table_name add fulltext (`column` )</span><br></pre></td></tr></table></figure><p>4.INDEX (普通索引)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; alter table table_name add index index_name ( `column` )</span><br></pre></td></tr></table></figure><p>5.多列索引 (聚簇索引)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; alter table `table_name` add index index_name ( `column1`, `column2`, `column3` )</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;什么是数据库索引&quot;&gt;&lt;a href=&quot;#什么是数据库索引&quot; class=&quot;headerlink&quot; title=&quot;什么是数据库索引&quot;&gt;&lt;/a&gt;什么是数据库索引&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;https://baike.baidu.com/item/%E7%B4%A
      
    
    </summary>
    
    
      <category term="数据库" scheme="http://yoursite.com/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
  </entry>
  
  <entry>
    <title>什么是前端框架与后端框架和常用的前后端框架</title>
    <link href="http://yoursite.com/2019/02/18/%E4%BB%80%E4%B9%88%E6%98%AF%E5%89%8D%E7%AB%AF%E6%A1%86%E6%9E%B6%E4%B8%8E%E5%90%8E%E7%AB%AF%E6%A1%86%E6%9E%B6%E5%92%8C%E5%B8%B8%E7%94%A8%E7%9A%84%E5%89%8D%E5%90%8E%E7%AB%AF%E6%A1%86%E6%9E%B6/"/>
    <id>http://yoursite.com/2019/02/18/什么是前端框架与后端框架和常用的前后端框架/</id>
    <published>2019-02-18T04:07:53.000Z</published>
    <updated>2019-02-18T04:10:35.319Z</updated>
    
    <content type="html"><![CDATA[<p><strong>什么是框架</strong></p><p>框架（Framework）是整个或部分系统的可重用设计，表现为一组抽象构件及构件实例间交互的方法;另一种定义认为，框架是可被应用开发者定制的应用骨架。前者是从应用方面而后者是从目的方面给出的定义。<br>可以说，一个框架是一个可复用的设计构件，它规定了应用的体系结构，阐明了整个设计、协作构件之间的依赖关系、责任分配和控制流程，表现为一组抽象类以及其实例之间协作的方法，它为构件复用提供了上下文(Context)关系。因此构件库的大规模重用也需要框架。<br>构件领域框架方法在很大程度上借鉴了硬件技术发展的成就，它是构件技术、软件体系结构研究和应用软件开发三者发展结合的产物。在很多情况下，框架通常以构件库的形式出现，但构件库只是框架的一个重要部分。框架的关键还在于框架内对象间的交互模式和控制流模式。<br>框架比构件可定制性强。在某种程度上，将构件和框架看成两个不同但彼此协作的技术或许更好。框架为构件提供重用的环境，为构件处理错误、交换数据及激活操作提供了标准的方法。<br>应用框架的概念也很简单。它并不是包含构件应用程序的小片程序，而是实现了某应用领域通用完备功能（除去特殊应用的部分）的底层服务。使用这种框架的编程人员可以在一个通用功能已经实现的基础上开始具体的系统开发。框架提供了所有应用期望的默认行为的类集合。具体的应用通过重写子类(该子类属于框架的默认行为)或组装对象来支持应用专用的行为。<br>应用框架强调的是软件的设计重用性和系统的可扩充性,以缩短大型应用软件系统的开发周期，提高开发质量。与传统的基于类库的面向对象重用技术比较，应用框架更注重于面向专业领域的软件重用。应用框架具有领域相关性，构件根据框架进行复合而生成可运行的系统。框架的粒度越大，其中包含的领域知识就更加完整。<br>框架，即framework。其实就是某种应用的半成品，就是一组组件，供你选用完成你自己的系统。简单说就是使用别人搭好的舞台，你来做表演。而且，框架一般是成熟的，不断升级的软件。 框架的概念最早起源于Smalltalk环境，其中最著名的框架是Smalltalk 80的用户界面框架MVC(Model-View-Controller)。随着用户界面框架Interviews 【Linton 89】和ET++ 【Weinand 89】 的开发和发布，框架研究越来越受到研究人员的重视。虽然框架研究最初起源于用户界面领域，但它还被成功地应用到其他领域中，如操作系统、火警系统 等。<a href="https://www.baidu.com/s?wd=Taligent%E5%85%AC%E5%8F%B8&amp;tn=24004469_oem_dg&amp;rsv_dl=gh_pl_sl_csd" target="_blank" rel="noopener">Taligent公司</a>于1992年成立后，框架研究受到了广泛的重视。该公司计划基于框架来开发一个完整的面向对象操作系统。另外，该公司还发布了一套支持快速应用开发的工具集CommonPoint，其中包括了上百个面向对象框架 【Andert 94,Cotter 95】。框架还没有统一的定义，其中Ralph Johnson所给出的定义基本上为大多数研究人员所接受：<br>一个框架是一个可复用设计，它是由一组抽象类及其实例间协作关系来表达的。<br>这个定义是从框架内涵的角度来定义框架的，当然也可以从框架用途的角度来给出框架的定义：<br>一个框架是在一个给定的问题领域内，一个应用程序的一部分设计与实现。<br>从以上两个定义可以看出，框架是对特定应用领域中的应用系统的部分设计和实现的整体结构。框架将应用系统划分为类和对象，定义类和对象的责任，类和对象如何互相协作，以及对象之间的控制线程。这些共有的设计因素由框架预先定义，应用开发人员只须关注于特定的应用系统特有部分。框架刻画了其应用领域所共有的设计决策，所以说框架着重于设计复用，尽管框架中可能包含用某种程序设计语言实现的具体类。<br>一个基于框架开发的应用系统包含一个或多个框架，与框架相关的构件类，以及与应用系统相关的功能扩展。与应用系统相关的扩展包括与应用系统相关的类和对象。应用系统可能仅仅复用了面向对象框架的一部分，或者说，它可能需要对框架进行一些适应性修改，以满足系统需求。<br>面向对象的框架作为一种可复用的软件，在基于框架的软件开发过程中会涉及到框架的开发和利用两个方面的工作。框架的开发阶段在于产生领域中可复用的设计。该阶段的主要结果是框架以及与框架相关的构件类。该阶段的一个重要活动是框架的演变和维护。象所有软件一样，框架也易于变化。产生变化的原因很多，如应用出错，业务领域变化，等等。<br>不论是哪一种技术，最终都是为业务发展而服务的。从业务的角度来讲。首先，框架的是为了企业的业务发展和战略规划而服务的，他服从于企业的愿景；其次，框架最重要的目标是提高企业的竞争能力，包括降低成本、提高质量、改善客户满意程度，控制进度等方面。最后，框架实现这一目标的方式是进行有效的知识积累。软件开发是一种知识活动，因此知识的聚集和积累是至关重要的。框架能够采用一种结构化的方式对某个特定的业务领域进行描述，也就是将这个领域相关的技术以代码、文档、模型等方式固化下来。</p><p><strong>为什么要用框架</strong></p><p>因为软件系统发展到今天已经很复杂了，特别是服务器端软件，涉及到的知识，内容，问题太多。在某些方面使用别人成熟的框架，就相当于让别人帮你完成一些基础工作，你只需要集中精力完成系统的业务逻辑设计。而且框架一般是成熟，稳健的，他可以处理系统很多细节问题，比如，事物处理，安全性，数据流控制等问题。还有框架一般都经过很多人使用，所以结构很好，所以扩展性也很好，而且它是不断升级的，你可以直接享受别人升级代码带来的好处。<br>框架一般处在低层应用平台（如J2EE）和高层业务逻辑之间的中间层。<br>软件为什么要分层？ 为了实现“高内聚、低耦合”。把问题划分开来各个解决，易于控制，易于延展，易于分配资源…总之好处很多啦：）。</p><p><strong>解决问题</strong></p><p>框架要解决的最重要的一个问题是技术整合的问题，在J2EE的框架中，有着<a href="https://www.baidu.com/s?wd=%E5%90%84%E7%A7%8D%E5%90%84%E6%A0%B7&amp;tn=24004469_oem_dg&amp;rsv_dl=gh_pl_sl_csd" target="_blank" rel="noopener">各种各样</a>的技术，不同的软件企业需要从J2EE中选择不同的技术，这就使得软件企业最终的应用依赖于这些技术，技术自身的复杂性和技术的风险性将会直接对应用造成冲击。而应用是软件企业的核心，是竞争力的关键所在，因此应该将应用自身的设计和具体的实现技术解耦。这样，软件企业的研发将集中在应用的设计上，而不是具体的技术实现，技术实现是应用的底层支撑，它不应该直接对应用产生影响。 要理解这一点，我们来举一些例子：<br>一个做视频流应用的软件企业，他为电广行业提供整体的解决方案。他的优势在于将各种各样的视频硬件、服务器、和管理结合起来，因此他扮演的是一个集成商的角色。因此他的核心价值在于使用软件技术将不同的硬件整合起来，并在硬件的整合层面上提供一个统一的管理平台。所以他的精力应该放在解决两个问题：<br>如何找到一种方法，将不同的硬件整合起来，注意，这里的整合并不是技术整合，而是一种思路上的整合。首先要考虑的绝对不是要使用什么技术，而是这些硬件需要提供哪些服务，需要以什么样的方式进行管理。因此，这时候做的事情实际上是对领域进行建模。例如，我们定义任何一种硬件都需要提供两种能力，一种是统一的管理接口，用于对所有硬件统一管理；另一种是服务接口，系统平台可以查询硬件所能够提供的服务，并调用这些服务。所以，设计的规范将会针对两种能力进行。<br>另一个问题是如何描述这个管理系统的规范。你需要描述各种管理活动，以及管理中所涉及的不同实体。因为管理系统是针对硬件的管理，所以它是构架在硬件整合平台之上的。<br>在完成业务层面的设计之后，我们再来看看具体的技术实现。光有规范和设计是不够的，我们还需要选择一个优秀的技术。由于是对不同硬件的整合，我们想到采用Java提供的JMX技术。JMX技术适合用来进行系统整合，它定义了一个通用的规范，并给出了远程管理端口的一些默认实现。JMX已经经过了实践的检验，不少的应用服务器都采用了以JMX为基础的结构，例如有名的JBoss。JMX已经是一个很好的开始了，但是我们还需要在JMX的基础上再做一些工作。</p><p><strong>网页设计中的框架概念</strong></p><p>框架是网页中经常使用的页面设计方式，框架的作用就是把网页在一个浏览器窗口下分割成几个不同的区 域，实现在一个浏览器窗口中显示多个HTML页面。使用框架可以非常方便的完成导航工作，让网站的结构更加清晰，而且各个框架之间决不存在干扰问题。利用框架最大的特点就是使网站的风格一致。通常把一个网站中页面相同的部分单独制作成一个页面，作为框架结构的一个子框架的内容给整个网站公用。<br>一个框架结构有两部分网页文件构成：<br>框架Frame：框架是浏览器窗口中的一个区域，它可以显示与浏览器窗口的其余部分中所显示内容无关的网页文件。<br>框架集Frameset：框架集也是一个网页文件，它将一个窗口通过行和列的方式分割成多个框架，框架的多少根据具体有多少网页来决定，每个框架中要显示的就是不同的网页文件。<br>所谓框架[4] 就是把网页分成几个框窗，同时取得多个 URL。用来划分框窗，每一框窗有一个，必须在范围中使用。如：　　</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;frameset cols=&quot;50%,*&quot;&gt;</span><br><span class="line">　　&lt;frame name=&quot;hello&quot; src=&quot;1.html&quot;&gt; &lt;frame name=&quot;hi&quot; src=&quot;2.html&quot;&gt;</span><br><span class="line">&lt;/frameset&gt;123</span><br></pre></td></tr></table></figure><p>此例中 把画面分成左右两相等部分，左面显示 1.html，右面显示 2.html<br><strong>程序设计中的框架概念</strong><br>程序设计中的框架包含DoitPHP(原Tommyframework)是一个基于BSD开源协议发布的轻量级PHP框架，还包含如thinkphp、codeigniter（简称CI）、yii framework、doophp、qeephp、等主流的程序设计框架，根据个人习惯和性能要求，其各也有不同的优缺点！<br>从<a href="https://www.baidu.com/s?wd=%E8%BD%AF%E4%BB%B6%E8%AE%BE%E8%AE%A1&amp;tn=24004469_oem_dg&amp;rsv_dl=gh_pl_sl_csd" target="_blank" rel="noopener">软件设计</a>角度，框架是一个可复用的软件架构解决方案，规定了应用的体系结构，阐明软件体系结构中各层次间及其层次内部各组件间的毅力关系，责任分配和控制流程，表现为一组接口，抽象类以及实例间协作的方法。</p><h1 id="前端框架"><a href="#前端框架" class="headerlink" title="前端框架"></a>前端框架</h1><p>Web前端框架就是为了节约开发成本和时间，一般开发一个项目都会用到前端框架（除非自己有前端开发团队），根据我经验找的几款web前端框架做出了分析。都是个人意见，仁者见仁智者见智。</p><p>QUICK UI</p><p>QUICK UI是一套完整的企业级web前端开发解决方案，由基础框架、UI组件库、皮肤包、示例工程和文档等组成。使用QUICKUI开发者可以极大地减少工作量，提高开发效率，快速构建功能强大、美观、兼容的web应用系统。</p><p>QUICK UI优势：</p><p>①功能最为强大</p><p>QUICKUI经历了7年的迭代更新，不断从客户的各种业务中对组件的需求进行归纳和抽离，从而打造新的组件和功能。现在最新的4.0版本框架包含了一百多种组件，一千多个应用场景示例。可以说在前端框架领域中，QUICKUI拥有功能最强大组件库。</p><p>②运行最为稳定</p><p>　　很多其他的第三方UI控件在简单场合使用OK，到了复杂的场景中就会出现很多问题，这种现象很常见，因为在组件设计时无法预料到所有的应用场合。而QUICKUI在7年间经历了数千个项目实际检验，在各种复杂场景都应用过，并根据客户的反馈不断完善和调整。目前的第四代可以说是最稳定、最完美的版本。</p><p>③丰富精美的界面皮肤</p><p>　　跟其他web前端框架仅仅是一套组件库不同，QUICKUI是一整套前端解决方案，拥有丰富的外观界面解决方案。采用现今流行的扁平化设计理念，推出了包括登录、响应式web、工作桌面、地图类、门户风格、大屏展示风格等等几百套制作精美、用户体验优秀的界面。这些界面是以QUICKUI皮肤包的形式发布，使用和更换都非常方便。</p><p>④事无巨细的开发文档</p><p>QUICKUI拥有16万字+的开发文档，框架和组件的每一个功能点都有详细的讲解和代码示例，用于开发过程中随时查阅。除了框架机制讲解和组件使用教程，文档还涉及web前端开发的很多知识。仔细阅读并结合框架使用的话，你很快就能成为web开发的高手。</p><p>⑤上手开发非常容易</p><p>QUICKUI采用组件化思想来构建组件，一个组件就是一两句html的标签，使用起来非常简单。将开发人员从繁琐的JS编码中解脱出来，很大程度减少前台编码的出错率；保留了HTML的布局方式，从而快速进行页面布局。对开发者前台技术要求也非常低，只需要了解html语法和一些简单的JS即可，从而把更多精力放在业务功能的实现上，极大地提高开发效率。</p><p>⑥浏览器兼容性非常好</p><p>QUICKUI4.0使用了很多HTML5，CSS3技术用于提高表现力和用户体验，这些新的特性在现代浏览器中会有很好的效果。但是，国内依然有大量的用户在使用IE7、IE8等旧时代的浏览器，为照顾这部分用户，框架采用了渐进式思想，确保低版本浏览器也能正常使用。所以，QUICKUI兼容IE7以上所有主流浏览器。</p><p>flex</p><p>Apache基金会今天发布了Flex4.8版本，这是Adobe将Flex捐献给Apache基金会后发布的第一个版本。</p><p>　　需要注意的是，Flex目前还在孵化阶段，还不是Apache的正式项目，Flex4.8也不是一个正式的Apache版本。</p><p>Apache称，该版本标志着Flex新时代的开始，Flex的未来将由社区来驱动，而不是由一个公司驱动。开发者可以通过贡献代码，来帮助改进Flex，如修复bug、增加功能等。</p><p>　　从Macromedia卖给Adobe，然后又捐给apache，不知道搞什么名堂。不过还好没有经过大幅重构，否则就真的是悲哀了！</p><p>extjs</p><p>ExtJS是一种主要用于创建前端用户界面，是一个基本与后台技术无关的前端ajax框架。</p><p>　　功能丰富，无人能出其右。</p><p>　　无论是界面之美，还是功能之强，ext的表格控件都高居榜首。</p><p>　　华丽的界面，灵活的功能，还有开发工具都是配套的，但有个最大的问题，用就得花钱！</p><p>easyui</p><p>easyui帮助你构建你的web应用更加容易。</p><p>　　它是一个基于jquery的插件，开发出来的一套轻量级的ui框架，非常小巧而且功能丰富。</p><p>　　但是她有一个最大的问题就是代码只能找到以前的开源的版本，到了1.2以后的版本源代码都是经过混淆的，如果遇到问题修改起来会非常麻烦！不过一个比较大的优势是开源免费，并且界面做的还说的过去！</p><p>jQueryUI</p><p>jQueryUI是一套jQuery的页面UI插件，包含很多种常用的页面空间，例如Tabs（如本站首页右上角部分）、拉帘效果（本站首页左上角）、对话框、拖放效果、日期选择、颜色选择、数据排序、窗体大小调整等等非常多的内容。　　功能非常全面，界面也挺漂亮的，可以整体使用，也可以分开使用其中的几个模块，免费开源！</p><p>MiniUI</p><p>　　又一个基于jquery的框架，开发的界面功能都很丰富。</p><p>jQueryMiniUI–快速开发WebUI。</p><p>　　它能缩短开发时间，减少代码量，使开发者更专注于业务和服务端，轻松实现界面开发，带来绝佳的用户体验。</p><p>　　使用MiniUI，开发者可以快速创建Ajax无刷新、B/S快速录入数据、CRUD、Master-Detail、菜单工具栏、弹出面板、布局导航、数据验证、分页表格、树、树形表格等典型WEB应用系统界面。</p><p>　　界面做的挺不错，功能也挺丰富，但是有两个比较大的问题，一个是收费，一个是没有源码，说白了，不开源！基于这个开发如果想对功能做扩展就需要找他们的团队进行升级！</p><p>DWZ</p><p>DWZ富客户端框架(jQueryRIAframework),是中国人自己开发的基于jQuery实现的AjaxRIA开源框架.</p><p>　　设计目标是简单实用,快速开发,降低ajax开发成本。</p><p>　　欢迎大家提出建议，我们将在下一版本中进一步调整和完善功能．共同推进国内整体ajax开发水平。</p><p>　　毕竟是国产的，支持一下，而且源码完全公开，可以选择一下！不过性能怎么样不敢确定！</p><p>YUI</p><p>Yahoo!UILibrary (YUI)是一个开放源代码的JavaScript函数库，为了能建立一个高互动的网页，它采用了AJAX,DHTML和DOM等程式码技术。它也包含了许多CSS资源。使用授权为 BSD许可证，基本上没怎么研究过！YUICompressor倒是挺出名的，这套UI库不知道应用的情况怎么样！</p><p>Sencha</p><p>Sencha是由ExtJS、jQTouch以及Raphael三个项目合并而成的一个新项目。</p><p>　　大公司的框架，并且是几样库的强强联合，值得推荐！</p><p>OperaMasks-UI</p><p>OperaMasks-UI是OperaMasks团队2011下半年打造的一款轻量级前端JS组件库，旨在提供一款学习曲线低、定制性灵活、样式统一，且多浏览器支持、覆盖企业业务场景的前端JavaScriptUI组件库。目前，该团队已将这一产品以LGPL开源协议开放给社区。</p><h1 id="后端框架"><a href="#后端框架" class="headerlink" title="后端框架"></a>后端框架</h1><p>web网站发展至今，特别是服务器端，涉及到的知识、内容，非常广泛。这对程序员的要求会越来越高。如果采用成熟，稳健的框架，那么一些基础的工作，比如，安全性，数据流控制等都可以让框架来处理，那么程序开发人员可以把精力放在具体的业务逻辑上面。使用框架的优点：</p><p>稳定性和可扩展性强<br>可以降低开发难度，提高开发效率。<br>在 Python 中常用的 Web 框架有:</p><pre><code>Flask 、Django、Tornad</code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;strong&gt;什么是框架&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;框架（Framework）是整个或部分系统的可重用设计，表现为一组抽象构件及构件实例间交互的方法;另一种定义认为，框架是可被应用开发者定制的应用骨架。前者是从应用方面而后者是从目的方面给出的定义。&lt;br&gt;可以说，一
      
    
    </summary>
    
    
      <category term="框架" scheme="http://yoursite.com/tags/%E6%A1%86%E6%9E%B6/"/>
    
  </entry>
  
  <entry>
    <title>HTML基础之HTML常用标签</title>
    <link href="http://yoursite.com/2019/02/18/HTML%E5%9F%BA%E7%A1%80%E4%B9%8BHTML%E5%B8%B8%E7%94%A8%E6%A0%87%E7%AD%BE/"/>
    <id>http://yoursite.com/2019/02/18/HTML基础之HTML常用标签/</id>
    <published>2019-02-18T04:05:28.000Z</published>
    <updated>2019-02-18T04:07:01.890Z</updated>
    
    <content type="html"><![CDATA[<h1 id="HTML基础之HTML常用标签"><a href="#HTML基础之HTML常用标签" class="headerlink" title="HTML基础之HTML常用标签"></a><a href="http://www.divcss5.com/html/h50219.shtml" target="_blank" rel="noopener">HTML基础之HTML常用标签</a></h1><p><a href="http://www.ibeifeng.com/tuiguang_web.php?div_top1_0603-qudao" target="_blank" rel="noopener"><img src="http://www.divcss5.com/ibeifeng/336-280.jpg" alt="img"></a></p><p>HTML是一种用来描述网页的标记性语言。学习HTML可能并不难，主要是要记一些HTML标签和标签代表的含义。下面PHP程序员雷雪松根据使用的情况，整理出平时常用的HTML标签。</p><h1 id="1、最基本的HTML结构"><a href="#1、最基本的HTML结构" class="headerlink" title="1、最基本的HTML结构"></a><strong>1、最基本的HTML结构</strong></h1><!--<!DOCTYPE> 是HTML5声明，<!DOCTYPE> 必须是 HTML 文档的第一行，位于<html> 标签之前。<!DOCTYPE>是指示 web 浏览器关于页面使用哪个 HTML 版本进行编写的指令。--><p>&lt;!DOCTYPE html&gt;</p><html><br><br><!-- head标签是所有头部元素的容器。head标签内的元素可包含脚本、样式表和提供页面的元信息等等。以下标签都可以添加到head 部分：title、base、link、meta、script 以及style。头部的内容不会显示在浏览器的。 --><br><br><head><br><br><!-- 设置字符集，如果字符集不对，可能导致乱码。一般建议utf-8国际编码 --><br><br><meta http-equiv="Content-Type" content="text/html; charset=gb2312或utf-8或gbk"><br><br><!-- SEO相关标签，title定义文档的标题,百度建议一般不要超过32位,meta定义页面关键词和页面的描述--><br><br><title>网页标题</title><br><br><meta name="keywords" content="PHP程序员,技术博客,个人博客,雷雪松"><br><br><meta name="description" content="PHP程序员，雷雪松（Raykaeso）的博客是一个优秀的个人技术博客。PHP程序员雷雪松的博客记录了Linux学习，PHP开发与编程，Web前端开发，MySQL学习和教程，NoSQL数据库教程以及个人的人生经历和观点。"><br><br><link rel="stylesheet" type="text/css" href="main.css"><br><br><script type="text/javascript" src="main.js"></script><br><br></head><br><br><!-- 正文部分，所有在浏览器上可见的内容必须写在body标签内部 --><br><br><body><br><br><script src="/live2dw/lib/L2Dwidget.min.js?0c58a1486de42ac6cc1c59c7d98ae887"></script><script>L2Dwidget.init({"pluginRootPath":"live2dw/","pluginJsPath":"lib/","pluginModelPath":"assets/","tagMode":false,"debug":false,"model":{"jsonPath":"/live2dw/assets/assets/shizuku.model.json"},"display":{"position":"right","width":130,"height":260},"mobile":{"show":false},"log":false});</script></body><br><br></html><h1 id="2、最常用的HTML标签"><a href="#2、最常用的HTML标签" class="headerlink" title="2、最常用的HTML标签"></a><strong>2、最常用的HTML标签</strong></h1><p><strong>a、布局标签</strong></p><p>div标签定义文档中的分区或节（division/section），可以把文档分割为独立的、不同的部分，主要用于布局。</p><p>aside标签的内容可用作文章的侧栏，<span style="color: #ff0000;">html5新增标签</span>。</p><p>header标签定义页面的头部（介绍信息），<span style="color: #ff0000;">html5新增标签</span>。</p><p>section标签定义文档中的节（section、区段）。比如章节、页眉、页脚或文档中的其他部分，<span style="color: #ff0000;">html5新增标签</span>。</p><p>footer 标签定义文档或节的页脚，通常包含文档的作者、版权信息、使用条款链接、联系信息等等，<span style="color: #ff0000;">html5新增标签</span>。</p><p>article标签规定文章独立的其他内容，比如：标题、内容、评论，<span style="color: #ff0000;">html5新增标签</span>。</p><p><strong>b、文本标签</strong></p><p>h1-h6标签可定义标题</p><p>p标签定义段落</p><p>b/strong标签加粗</p><p>em标签来表示强调的文本，斜体</p><p>strong标签表示重要文本</p><p>u标签下划线</p><p>s标签删除线</p><p>br标签表示回车换行</p><p>hr标签表示水平线</p><p>span标签被用来组合文档中的行内元素。</p><p>blockquote标签表示块引用</p><p>pre标签可定义预格式化的文本，保持原有格式的一种标签。</p><p>sub标签下标，</p><p>sup&gt;标签上标</p><p> 表示一个空格</p><p>©表示版权符</p><p>&lt;表示&lt;</p><p>>表示&gt;</p><p><strong>c、a标签定义超链接，指定页面间的跳转。链接可以指向外部链接或者页面内部id锚点，可以在当前页面打开，新开窗口。</strong></p><p><a href="指向的链接地址或者网址#ID名" target="_blank|_self|_top|_parent">百度</a></p><p><strong>d、多媒体标签</strong></p><p>img标签主要在网页中插入图像，可以定义图片替换文本、显示宽度和高度、是否带边框，建议等比例设置，否则图像会变形。</p><p><img src="/2019/02/18/HTML基础之HTML常用标签/图片地址" alt="替换文本，图片打不开的时候显示" width="图片宽度" height="高度" border="0"></p><p>audio标签定义声音，比如音乐或其他音频流。<span style="color: #ff0000;">html5新增标签</span>。</p><audio src="someaudio.wav">您的浏览器不支持 audio 标签。</audio><p>video标签定义视频，比如电影片段或其他视频流。<span style="color: #ff0000;">html5新增标签</span>。</p><video src="movie.ogg" controls="controls">您的浏览器不支持 video 标签。</video><p><strong>e、序列化标签</strong></p><p>ul和li无序列表标签</p><ul><br><br><li>HTML</li><br><br><li>JS</li><br><br><li>PHP</li><br><br></ul><p>ol和li有序列表标签，可以使用type属性规定有序列表符号的类型。1 按数字有序排列，为默认值，（1、2、3、4）；a 按小写字母有序排列，（a、b、c、d）；A 按字母大写有序排列，（A、B、C、D）。i 按小写罗马字母有序，（i, ii, iii, iv）；I 按小写罗马字母有序，（I, II, III, IV）。</p><ol><br><br><li>HTML</li><br><br><li>JS</li><br><br><li>PHP</li><br><br></ol><p>dl标签定义了定义列表（definition list），dl标签用于结合 dt（定义列表中的项目）和 dd（描述列表中的项目）。</p><dl><br><br><dt>计算机</dt><br><br><dd>用来计算的仪器 … …</dd><br><br></dl><p><strong>f、表格标签</strong></p><p>table标签和tr标签，th标签和td标签，合并单元格。</p><table width="100%" height="193" border="1" cellpadding="0" cellspacing="0" bordercolor="#FF0000" bgcolor="#000000" background=""><br><br><tr><br><br><th>标题</th><br><br><th>标题</th><br><br></tr><br><br><tr><br><br><!-- 合并横向单元格 --><br><br><td colspan="2" nowrap="nowrap">&nbsp;</td><br><br></tr><br><br><tr><br><br><td></td><br><br><!-- 合并纵向单元格 --><br><br><td rowspan="2"> </td><br><br></tr><br><br><tr><br><br><td height="16"> </td><br><br></tr><br><br></table><p><strong>g、表单标签</strong></p><p>form标签定义提交方式、提交地址、表单字符集以及如何对其进行编码，需要提交的表单一定要放在form标签内。</p><form id="form1" name="form1" method="post|get" enctype="multipart/form-data" action="提交到的地址"></form><p>input标签用于搜集用户信息</p><input name="userName" type="text" maxlength="5" size="100" value="asdfasdfasfd"><p>密码，输入的字符会被掩码（显示为星号或原点）</p><input name="pwd" type="password" maxlength="5" size="100" value=""><p>文件类型的表单，上传文件时，form表单一定要设置为enctype=”multipart/form-data”</p><input type="file" name="file"><p>隐藏表单</p><input type="hidden" name="country" value="China"><p>提交</p><input type="submit" name="Submit" value="提交" disabled="disabled"><p>重置</p><input type="reset" name="Submit2" value="重置"><p>radio单选</p><p><input name="sex" type="radio" value="1">男</p><p><input name="sex" type="radio" value="2" checked="checked">女</p><p>checkbox多选</p><p><input name="skill" type="checkbox" value="1" checked="checked">PHP</p><p><input name="skill" type="checkbox" value="2">前端</p><p><input name="skill" type="checkbox" value="2">数据库</p><p><span style="color: #ff0000;">注：checked=”checked”可以简写成checked</span></p><p>label标签为input元素定义标注，如果您点击label元素文本，就会触发此input控件。</p><p>textarea标签，设置文本区内的可见行数和宽度</p><textarea name="content" cols="30" rows="10">大段文本输入框</textarea><p>button标签定义一个按钮</p><p>提交按钮</p><button type="submit" value="提交">提交</button><p>重置按钮</p><button type="reset" value="重置">重置</button><p>select标签和option标签下拉列表</p><p>单选菜单列表框</p><select name="user"><br><br><option value="1">ray</option><br><br><option value="2" selected="selected">raykaeso</option><br><br></select><p>多选列表下拉框，shift加鼠标单击，可以连续选择多个选择，CTRL+鼠标点击，可以点击多个。</p><select name="user" size="10" multiple="multiple"><br><br><option value="1">雷雪松</option><br><br><option value="2" selected="selected">ray</option><br><br><option value="3">raykaeso</option><br><br></select><p>注:selected=”selected”可简写成selected，表示选中</p><h1 id="3、其他HTML事项"><a href="#3、其他HTML事项" class="headerlink" title="3、其他HTML事项"></a><strong>3、其他HTML事项</strong></h1><p>a、HTML标签和属性是不区分大小写的，建议HTML标签和属性都小写，属性值必须用双引号包围。</p><p>b、HTML标签都是以开始标签起始，以结束标签终止。大部分HTML标签都是成对出现的，称为双标签，比如：p标签、div标签，也有的HTML标签在开始标签中结束的标签，称为单标签，比如：hr标签、br标签。大多数 HTML 元素可拥有属性，文本内容都是写在开始标签与结束标签之间。</p><p>c、HTML标签之间尽量缩进与换行，每行代码不要过长，方便阅读和维护。</p><p>d、HTML标签使用必须符合标签嵌套规则。禁止a标签嵌套a标签，p标签嵌套div标签。</p><p>e、建议不使用HTML已经废弃的或者不赞成使用的标签，少使用table布局、iframe框架嵌套以及flash播放器。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;HTML基础之HTML常用标签&quot;&gt;&lt;a href=&quot;#HTML基础之HTML常用标签&quot; class=&quot;headerlink&quot; title=&quot;HTML基础之HTML常用标签&quot;&gt;&lt;/a&gt;&lt;a href=&quot;http://www.divcss5.com/html/h502
      
    
    </summary>
    
    
      <category term="http" scheme="http://yoursite.com/tags/http/"/>
    
  </entry>
  
  <entry>
    <title>Nginx的启动、停止与重启</title>
    <link href="http://yoursite.com/2019/02/16/Nginx%E7%9A%84%E5%90%AF%E5%8A%A8%E3%80%81%E5%81%9C%E6%AD%A2%E4%B8%8E%E9%87%8D%E5%90%AF/"/>
    <id>http://yoursite.com/2019/02/16/Nginx的启动、停止与重启/</id>
    <published>2019-02-16T13:37:12.000Z</published>
    <updated>2019-02-18T03:58:19.923Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Nginx的启动、停止与重启"><a href="#Nginx的启动、停止与重启" class="headerlink" title="Nginx的启动、停止与重启"></a><a href="https://www.cnblogs.com/codingcloud/p/5095066.html" target="_blank" rel="noopener">Nginx的启动、停止与重启</a></h1><h1 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h1><p> 启动代码格式：nginx安装目录地址 -c nginx配置文件地址</p><p>例如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@LinuxServer sbin]# /usr/local/nginx/sbin/nginx -c /usr/local/nginx/conf/nginx.conf</span><br></pre></td></tr></table></figure><h1 id="停止"><a href="#停止" class="headerlink" title="停止"></a>停止</h1><p> nginx的停止有三种方式：</p><ul><li><h2 id="从容停止"><a href="#从容停止" class="headerlink" title="从容停止"></a>从容停止</h2></li></ul><p>　　1、查看进程号</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@LinuxServer ~]# ps -ef|grep nginx</span><br></pre></td></tr></table></figure><p><img src="https://images2015.cnblogs.com/blog/848552/201601/848552-20160102182744854-1291053517.png" alt="img"></p><p>　　2、杀死进程</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@LinuxServer ~]# kill -QUIT 2072</span><br></pre></td></tr></table></figure><p><img src="https://images2015.cnblogs.com/blog/848552/201601/848552-20160102182652354-960281274.png" alt="img"></p><ul><li><h2 id="快速停止"><a href="#快速停止" class="headerlink" title="快速停止"></a>快速停止</h2></li></ul><p>1、查看进程号</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@LinuxServer ~]# ps -ef|grep nginx</span><br></pre></td></tr></table></figure><p><img src="https://images2015.cnblogs.com/blog/848552/201601/848552-20160102183103651-1859453208.png" alt="img"></p><p>2、杀死进程</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@LinuxServer ~]# kill -TERM 2132</span><br><span class="line">或 [root@LinuxServer ~]# kill -INT 2132</span><br></pre></td></tr></table></figure><p><img src="https://images2015.cnblogs.com/blog/848552/201601/848552-20160102183340010-2024212451.png" alt="img"></p><ul><li><h2 id="强制停止"><a href="#强制停止" class="headerlink" title="强制停止"></a>强制停止</h2></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@LinuxServer ~]# pkill -9 nginx</span><br></pre></td></tr></table></figure><h1 id="重启"><a href="#重启" class="headerlink" title="重启"></a>重启</h1><h2 id="1、验证nginx配置文件是否正确"><a href="#1、验证nginx配置文件是否正确" class="headerlink" title="1、验证nginx配置文件是否正确"></a>1、验证nginx配置文件是否正确</h2><h3 id="方法一：进入nginx安装目录sbin下，输入命令-nginx-t"><a href="#方法一：进入nginx安装目录sbin下，输入命令-nginx-t" class="headerlink" title="方法一：进入nginx安装目录sbin下，输入命令./nginx -t"></a>方法一：进入nginx安装目录sbin下，输入命令./nginx -t</h3><p>看到如下显示nginx.conf syntax is ok</p><p>nginx.conf test is successful</p><p>说明配置文件正确！</p><p><img src="https://images2015.cnblogs.com/blog/848552/201601/848552-20160102184633432-1268782338.png" alt="img"></p><h3 id="方法二：在启动命令-c前加-t"><a href="#方法二：在启动命令-c前加-t" class="headerlink" title="方法二：在启动命令-c前加-t"></a>方法二：在启动命令-c前加-t</h3><p><img src="https://images2015.cnblogs.com/blog/848552/201601/848552-20160102185023385-456612180.png" alt="img"></p><h2 id="2、重启Nginx服务"><a href="#2、重启Nginx服务" class="headerlink" title="2、重启Nginx服务"></a>2、重启Nginx服务</h2><h3 id="方法一：进入nginx可执行目录sbin下，输入命令-nginx-s-reload-即可"><a href="#方法一：进入nginx可执行目录sbin下，输入命令-nginx-s-reload-即可" class="headerlink" title="方法一：进入nginx可执行目录sbin下，输入命令./nginx -s reload 即可"></a>方法一：进入nginx可执行目录sbin下，输入命令<strong>./nginx -s reload</strong> 即可</h3><p><img src="https://images2015.cnblogs.com/blog/848552/201601/848552-20160102185521057-1341380905.png" alt="img"></p><h3 id="方法二：查找当前nginx进程号，然后输入命令：kill-HUP-进程号-实现重启nginx服务"><a href="#方法二：查找当前nginx进程号，然后输入命令：kill-HUP-进程号-实现重启nginx服务" class="headerlink" title="方法二：查找当前nginx进程号，然后输入命令：kill -HUP 进程号 实现重启nginx服务"></a>方法二：查找当前nginx进程号，然后输入命令：kill -HUP 进程号 实现重启nginx服务</h3><p><img src="https://images2015.cnblogs.com/blog/848552/201601/848552-20160102185838167-234856506.png" alt="img"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">总结的一些nginx vue常用命令</span><br><span class="line"></span><br><span class="line">cnpm install 自动安装依赖包</span><br><span class="line">npm run dev 开启</span><br><span class="line">npm run build 翻译 生成dist目录</span><br><span class="line">ps -ef  查看wsgi进程 ps -ef | grep gunicorn</span><br><span class="line">nginx -s reload 每次修改完nginx后都要运行这个命令重启一下</span><br><span class="line">ps -ef  查看wsgi进程 ps -ef | grep gunicorn</span><br><span class="line">kill -9 进程号   杀死进程</span><br><span class="line">ps -A  ps -a查看进程</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Nginx的启动、停止与重启&quot;&gt;&lt;a href=&quot;#Nginx的启动、停止与重启&quot; class=&quot;headerlink&quot; title=&quot;Nginx的启动、停止与重启&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://www.cnblogs.com/codingcloud
      
    
    </summary>
    
    
      <category term="nginx" scheme="http://yoursite.com/tags/nginx/"/>
    
  </entry>
  
  <entry>
    <title>npm 和 cnpm区别</title>
    <link href="http://yoursite.com/2019/02/16/npm%20%E5%92%8C%20cnpm%20%E5%8C%BA%E5%88%AB/"/>
    <id>http://yoursite.com/2019/02/16/npm 和 cnpm 区别/</id>
    <published>2019-02-16T02:30:57.000Z</published>
    <updated>2019-02-16T02:51:44.330Z</updated>
    
    <content type="html"><![CDATA[<h1 id="NPM介绍："><a href="#NPM介绍：" class="headerlink" title="NPM介绍："></a><a href="https://www.baidu.com/s?wd=NPM&amp;tn=24004469_oem_dg&amp;rsv_dl=gh_pl_sl_csd" target="_blank" rel="noopener">NPM</a>介绍：</h1><ol><li>说明：NPM（节点包管理器）是的NodeJS的包管理器，用于节点插件管理（包括安装，卸载，管理依赖等）</li><li>使用NPM安装插件：命令提示符执行<code>npm install &lt;name&gt; [-g] [--save-dev]</code><br><code>&lt;name&gt;</code>：节点插件名称。<br>例：<code>npm install gulp-less --save-dev</code></li><li><code>-g</code>：全局安装。 将会安装在C：\ Users \ Administrator \ AppData \ Roaming \ npm，并且写入系统环境变量;非全局安装：将会安装在当前定位目录;全局安装可以通过命令行任何地方调用它，本地安装将安装在定位目录的node_modules文件夹下，通过要求（）调用;</li><li><code>--save</code>：将保存至的package.json（的package.json是的NodeJS项目配置文件）</li><li><code>-dev</code>;：保存至的package.json的devDependencies节点，不指定-dev将保存至依赖节点</li></ol><p>为什么要保存至的的package.json？因为节点插件包相对来说非常庞大，所以不加入版本管理，将配置信息写入的的package.json并将其加入版本管理，其他开发者对应下载即可（命令提示符执行npm install，则会根据package.json下载所有需要的包）。</p><p>\6. 使用 npm 卸载插件： npm uninstall <name> [ -g ] [ –save-dev ]</name></p><p>\7. 使用 npm 更新插件： npm update <name> [ -g ] [ –save-dev ]</name></p><p>\8. 更新全部插件： npm update [ –save-dev ] </p><p>\9. 查看 NPM帮助： NPM帮助 </p><p>10.查看当前目录已安装插件：npm list</p><p>PS：NPM安装插件过程：从</p><p><a href="http://registry.npmjs.org" target="_blank" rel="noopener">http://registry.npmjs.org</a> </p><p>下载对应的插件包（该网站服务器位于国外，所以经常下载缓慢或出现异常），解决办法往下看↓↓↓↓↓↓。</p><h1 id="CNPM介绍："><a href="#CNPM介绍：" class="headerlink" title="CNPM介绍："></a>CNPM介绍：</h1><ol><li>说明：因为<a href="https://www.baidu.com/s?wd=%E6%95%85%E5%AE%AB&amp;tn=24004469_oem_dg&amp;rsv_dl=gh_pl_sl_csd" target="_blank" rel="noopener">故宫</a>安装插件是从国外服务器下载，受网络影响大，可能出现异常，如果故宫的服务器在中国就好了，所以我们乐于分享的淘宝团队干了这事来自官网：“这是一个完整npmjs.org镜像，你可以用此代替官方版本（只读），同步频率目前为10分钟一次以保证尽量与官方服务同步“。</li><li>官方网址：<a href="http://npm.taobao.org/" target="_blank" rel="noopener">http://npm.taobao.org</a></li><li>安装：命令提示符执行<code>npm install cnpm -g --registry=https://registry.npm.taobao.org</code></li><li>注意：安装完后最好查看其版本cnpm -v或关闭命令提示符重新打开，安装完直接使用有可能会出现错误 </li></ol><p>注：CNPM跟NPM用法完全一致，只是在执行命令时将故宫改为CNPM。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;NPM介绍：&quot;&gt;&lt;a href=&quot;#NPM介绍：&quot; class=&quot;headerlink&quot; title=&quot;NPM介绍：&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://www.baidu.com/s?wd=NPM&amp;amp;tn=24004469_oem_dg&amp;amp;r
      
    
    </summary>
    
    
      <category term="vue" scheme="http://yoursite.com/tags/vue/"/>
    
  </entry>
  
  <entry>
    <title>浅谈HTTP中Get、Post、Put与Delete的区别</title>
    <link href="http://yoursite.com/2019/02/14/%E6%B5%85%E8%B0%88HTTP%E4%B8%ADGet%E3%80%81Post%E3%80%81Put%E4%B8%8EDelete%E7%9A%84%E5%8C%BA%E5%88%AB/"/>
    <id>http://yoursite.com/2019/02/14/浅谈HTTP中Get、Post、Put与Delete的区别/</id>
    <published>2019-02-14T02:40:29.000Z</published>
    <updated>2019-02-18T04:04:49.416Z</updated>
    
    <content type="html"><![CDATA[<h1 id="先具体说下get和post区别"><a href="#先具体说下get和post区别" class="headerlink" title="先具体说下get和post区别"></a>先具体说下get和post区别</h1><h1 id="GET和POST两种基本请求方法的区别"><a href="#GET和POST两种基本请求方法的区别" class="headerlink" title="GET和POST两种基本请求方法的区别"></a><a href="https://www.cnblogs.com/logsharing/p/8448446.html" target="_blank" rel="noopener">GET和POST两种基本请求方法的区别</a></h1><p>GET和POST是HTTP请求的两种基本方法，要说它们的区别，接触过WEB开发的人都能说出一二。</p><p>最直观的区别就是GET把参数包含在URL中，POST通过request body传递参数。</p><p>你可能自己写过无数个GET和POST请求，或者已经看过很多权威网站总结出的他们的区别，你非常清楚知道什么时候该用什么。</p><p>当你在面试中被问到这个问题，你的内心充满了自信和喜悦。</p><p><img src="http://mmbiz.qpic.cn/mmbiz/VUGnGjllRE5vZcld02bjOjWPPBRXYdhLcm8TfMjvKvXwbzXTbpUaahYNVFpXh8fIMgqcmbIeEBqFTt7ibiaewMicg/640?wx_fmt=png" alt="img"></p><p>你轻轻松松的给出了一个“标准答案”：</p><ul><li>GET在浏览器回退时是无害的，而POST会再次提交请求。</li></ul><ul><li>GET产生的URL地址可以被Bookmark，而POST不可以。</li></ul><ul><li>GET请求会被浏览器主动cache，而POST不会，除非手动设置。</li></ul><ul><li>GET请求只能进行url编码，而POST支持多种编码方式。</li></ul><ul><li>GET请求参数会被完整保留在浏览器历史记录里，而POST中的参数不会被保留。</li></ul><ul><li>GET请求在URL中传送的参数是有长度限制的，而POST么有。</li></ul><ul><li>对参数的数据类型，GET只接受ASCII字符，而POST没有限制。</li></ul><ul><li>GET比POST更不安全，因为参数直接暴露在URL上，所以不能用来传递敏感信息。</li></ul><ul><li>GET参数通过URL传递，POST放在Request body中。</li></ul><p>（本标准答案参考自w3schools）</p><p>“很遗憾，这不是我们要的回答！”</p><p><img src="http://mmbiz.qpic.cn/mmbiz/VUGnGjllRE5vZcld02bjOjWPPBRXYdhLkCV5yUI4QFlaibOg9aFp2ZjPlaeAgaibbYyzOYsmcDfPlzFPAdcy21dQ/640?wx_fmt=jpeg" alt="img"></p><p>请告诉我真相。。。</p><p>如果我告诉你GET和POST本质上没有区别你信吗？ </p><p>让我们扒下GET和POST的外衣，坦诚相见吧！</p><p><img src="http://mmbiz.qpic.cn/mmbiz/VUGnGjllRE5vZcld02bjOjWPPBRXYdhLVXZkPZibSibtVZoIkDcBTQJ3mFibpNtqOSNTLDs01s2rmB6PyCoibjczxQ/640?wx_fmt=png" alt="img"></p><p>GET和POST是什么？HTTP协议中的两种发送请求的方法。</p><p>HTTP是什么？HTTP是基于TCP/IP的关于数据如何在万维网中如何通信的协议。</p><p>HTTP的底层是TCP/IP。所以GET和POST的底层也是TCP/IP，也就是说，GET/POST都是TCP链接。GET和POST能做的事情是一样一样的。你要给GET加上request body，给POST带上url参数，技术上是完全行的通的。 </p><p>那么，“标准答案”里的那些区别是怎么回事？</p><p><img src="http://mmbiz.qpic.cn/mmbiz/VUGnGjllRE5vZcld02bjOjWPPBRXYdhLdhmQxXtz2Kwn3yzT8Jzic1joUsjXxeaU8JwerDiabz9N9sYmBpIgWic2A/640?wx_fmt=jpeg" alt="img"></p><p>在我大万维网世界中，TCP就像汽车，我们用TCP来运输数据，它很可靠，从来不会发生丢件少件的现象。但是如果路上跑的全是看起来一模一样的汽车，那这个世界看起来是一团混乱，送急件的汽车可能被前面满载货物的汽车拦堵在路上，整个交通系统一定会瘫痪。为了避免这种情况发生，交通规则HTTP诞生了。HTTP给汽车运输设定了好几个服务类别，有GET, POST, PUT, DELETE等等，HTTP规定，当执行GET请求的时候，要给汽车贴上GET的标签（设置method为GET），而且要求把传送的数据放在车顶上（url中）以方便记录。如果是POST请求，就要在车上贴上POST的标签，并把货物放在车厢里。当然，你也可以在GET的时候往车厢内偷偷藏点货物，但是这是很不光彩；也可以在POST的时候在车顶上也放一些数据，让人觉得傻乎乎的。HTTP只是个行为准则，而TCP才是GET和POST怎么实现的基本。</p><p>但是，我们只看到HTTP对GET和POST参数的传送渠道（url还是requrest body）提出了要求。“标准答案”里关于参数大小的限制又是从哪来的呢？</p><p><img src="http://mmbiz.qpic.cn/mmbiz/VUGnGjllRE5vZcld02bjOjWPPBRXYdhLSDX3EiadGp0gDsHwgvGictCwWSEaAQ4jVib1sLaqnBGpFAUhHhjv8xGKQ/640?wx_fmt=jpeg" alt="img"></p><p>在我大万维网世界中，还有另一个重要的角色：运输公司。不同的浏览器（发起http请求）和服务器（接受http请求）就是不同的运输公司。 虽然理论上，你可以在车顶上无限的堆货物（url中无限加参数）。但是运输公司可不傻，装货和卸货也是有很大成本的，他们会限制单次运输量来控制风险，数据量太大对浏览器和服务器都是很大负担。业界不成文的规定是，（大多数）浏览器通常都会限制url长度在2K个字节，而（大多数）服务器最多处理64K大小的url。超过的部分，恕不处理。如果你用GET服务，在request body偷偷藏了数据，不同服务器的处理方式也是不同的，有些服务器会帮你卸货，读出数据，有些服务器直接忽略，所以，虽然GET可以带request body，也不能保证一定能被接收到哦。</p><p>好了，现在你知道，GET和POST本质上就是TCP链接，并无差别。但是由于HTTP的规定和浏览器/服务器的限制，导致他们在应用过程中体现出一些不同。 </p><p>你以为本文就这么结束了？</p><p><img src="http://mmbiz.qpic.cn/mmbiz/VUGnGjllRE5vZcld02bjOjWPPBRXYdhLNqLBKzbCAfuLHkM355iaBC9FuOlWrtiaIUmD95T8ReVJ9FInZIZWV0YA/0?" alt="img"></p><p>我们的大BOSS还等着出场呢。。。</p><p>这位BOSS有多神秘？当你试图在网上找“GET和POST的区别”的时候，那些你会看到的搜索结果里，从没有提到他。他究竟是什么呢。。。</p><p>GET和POST还有一个重大区别，简单的说：</p><p>GET产生一个TCP数据包；POST产生两个TCP数据包。</p><p>长的说：</p><p>对于GET方式的请求，浏览器会把http header和data一并发送出去，服务器响应200（返回数据）；</p><p>而对于POST，浏览器先发送header，服务器响应100 continue，浏览器再发送data，服务器响应200 ok（返回数据）。</p><p>也就是说，GET只需要汽车跑一趟就把货送到了，而POST得跑两趟，第一趟，先去和服务器打个招呼“嗨，我等下要送一批货来，你们打开门迎接我”，然后再回头把货送过去。</p><p>因为POST需要两步，时间上消耗的要多一点，看起来GET比POST更有效。因此Yahoo团队有推荐用GET替换POST来优化网站性能。但这是一个坑！跳入需谨慎。为什么？</p><p>\1. GET与POST都有自己的语义，不能随便混用。</p><p>\2. 据研究，在网络环境好的情况下，发一次包的时间和发两次包的时间差别基本可以无视。而在网络环境差的情况下，两次包的TCP在验证数据包完整性上，有非常大的优点。</p><p>\3. 并不是所有浏览器都会在POST中发送两次包，Firefox就只发送一次。</p><p>现在，当面试官再问你“GET与POST的区别”的时候，你的内心是不是这样的？</p><p><img src="http://mmbiz.qpic.cn/mmbiz/VUGnGjllRE5vZcld02bjOjWPPBRXYdhLyfrfWEnMQlicIoNbaQJCicpKjOVQp8tNjU9Zp8Eia40om3vTah9aZEF7w/640?wx_fmt=jpeg" alt="img"></p><h2 id="1、GET请求会向数据库发索取数据的请求，从而来获取信息，该请求就像数据库的select操作一样，只是用来查询一下数据，不会修改、增加数据，不会影响资源的内容，即该请求不会产生副作用。无论进行多少次操作，结果都是一样的。"><a href="#1、GET请求会向数据库发索取数据的请求，从而来获取信息，该请求就像数据库的select操作一样，只是用来查询一下数据，不会修改、增加数据，不会影响资源的内容，即该请求不会产生副作用。无论进行多少次操作，结果都是一样的。" class="headerlink" title="1、GET请求会向数据库发索取数据的请求，从而来获取信息，该请求就像数据库的select操作一样，只是用来查询一下数据，不会修改、增加数据，不会影响资源的内容，即该请求不会产生副作用。无论进行多少次操作，结果都是一样的。"></a>1、GET请求会向数据库发索取数据的请求，从而来获取信息，该请求就像数据库的select操作一样，只是用来查询一下数据，不会修改、增加数据，不会影响资源的内容，即该请求不会产生副作用。无论进行多少次操作，结果都是一样的。</h2><h2 id="2、与GET不同的是，PUT请求是向服务器端发送数据的，从而改变信息，该请求就像数据库的update操作一样，用来修改数据的内容，但是不会增加数据的种类等，也就是说无论进行多少次PUT操作，其结果并没有不同。"><a href="#2、与GET不同的是，PUT请求是向服务器端发送数据的，从而改变信息，该请求就像数据库的update操作一样，用来修改数据的内容，但是不会增加数据的种类等，也就是说无论进行多少次PUT操作，其结果并没有不同。" class="headerlink" title="2、与GET不同的是，PUT请求是向服务器端发送数据的，从而改变信息，该请求就像数据库的update操作一样，用来修改数据的内容，但是不会增加数据的种类等，也就是说无论进行多少次PUT操作，其结果并没有不同。"></a>2、与GET不同的是，PUT请求是向服务器端发送数据的，从而改变信息，该请求就像数据库的update操作一样，用来修改数据的内容，但是不会增加数据的种类等，也就是说无论进行多少次PUT操作，其结果并没有不同。</h2><h2 id="3、POST请求同PUT请求类似，都是向服务器端发送数据的，但是该请求会改变数据的种类等资源，就像数据库的insert操作一样，会创建新的内容。几乎目前所有的提交操作都是用POST请求的。"><a href="#3、POST请求同PUT请求类似，都是向服务器端发送数据的，但是该请求会改变数据的种类等资源，就像数据库的insert操作一样，会创建新的内容。几乎目前所有的提交操作都是用POST请求的。" class="headerlink" title="3、POST请求同PUT请求类似，都是向服务器端发送数据的，但是该请求会改变数据的种类等资源，就像数据库的insert操作一样，会创建新的内容。几乎目前所有的提交操作都是用POST请求的。"></a>3、POST请求同PUT请求类似，都是向服务器端发送数据的，但是该请求会改变数据的种类等资源，就像数据库的insert操作一样，会创建新的内容。几乎目前所有的提交操作都是用POST请求的。</h2><h2 id="4、DELETE请求顾名思义，就是用来删除某一个资源的，该请求就像数据库的delete操作。"><a href="#4、DELETE请求顾名思义，就是用来删除某一个资源的，该请求就像数据库的delete操作。" class="headerlink" title="4、DELETE请求顾名思义，就是用来删除某一个资源的，该请求就像数据库的delete操作。"></a>4、DELETE请求顾名思义，就是用来删除某一个资源的，该请求就像数据库的delete操作。</h2><p>就像前面所讲的一样，既然PUT和POST操作都是向服务器端发送数据的，那么两者有什么区别呢。。。POST主要作用在一个集合资源之上的（url），而PUT主要作用在一个具体资源之上的（url/xxx），通俗一下讲就是，如URL可以在客户端确定，那么可使用PUT，否则用POST。</p><h1 id="综上所述，我们可理解为以下："><a href="#综上所述，我们可理解为以下：" class="headerlink" title="综上所述，我们可理解为以下："></a>综上所述，我们可理解为以下：</h1><p>1、POST /url 创建<br>2、DELETE /url/xxx 删除<br>3、PUT /url/xxx 更新<br>4、GET /url/xxx 查看</p><p> Http定义了与服务器交互的不同方法，最基本的方法有4种，分别是GET，POST，PUT，DELETE。URL全称是统一资源定位符，我们可以这样认为：一个URL地址，它用于描述一个网络上的资源，而HTTP中的GET，POST，PUT，DELETE就对应着对这个资源的查，改，增，删4个操作。到这里，大家应该有个大概的了解了，GET一般用于获取/查询资源信息，而POST一般用于更新资源信息。</p><h1 id="1-根据HTTP规范，GET用于信息获取，而且应该是安全的和幂等的。"><a href="#1-根据HTTP规范，GET用于信息获取，而且应该是安全的和幂等的。" class="headerlink" title="1.根据HTTP规范，GET用于信息获取，而且应该是安全的和幂等的。"></a>1.根据HTTP规范，GET用于信息获取，而且应该是安全的和幂等的。</h1><p>(1).所谓安全的意味着该操作用于获取信息而非修改信息。换句话说，GET 请求一般不应产生副作用。就是说，它仅仅是获取资源信息，就像数据库查询一样，不会修改，增加数据，不会影响资源的状态。</p><ul><li>注意：这里安全的含义仅仅是指是非修改信息。</li></ul><p>(2).幂等的意味着对同一URL的多个请求应该返回同样的结果。这里我再解释一下幂等这个概念：</p><p>幂等（idempotent、idempotence）是一个数学或计算机学概念，常见于抽象代数中。<br>　　幂等有一下几种定义：<br>　　对于单目运算，如果一个运算对于在范围内的所有的一个数多次进行该运算所得的结果和进行一次该运算所得的结果是一样的，那么我们就称该运算是幂等的。比如绝对值运算就是一个例子，在实数集中，有abs(a)=abs(abs(a))。<br>　　对于双目运算，则要求当参与运算的两个值是等值的情况下，如果满足运算结果与参与运算的两个值相等，则称该运算幂等，如求两个数的最大值的函数，有在在实数集中幂等，即max(x,x) = x。</p><p>看完上述解释后，应该可以理解GET幂等的含义了。</p><p>　　但在实际应用中，以上2条规定并没有这么严格。引用别人文章的例子：比如，新闻站点的头版不断更新。虽然第二次请求会返回不同的一批新闻，该操作仍然被认为是安全的和幂等的，因为它总是返回当前的新闻。从根本上说，如果目标是当用户打开一个链接时，他可以确信从自身的角度来看没有改变资源即可。</p><h1 id="2-根据HTTP规范，POST表示可能修改变服务器上的资源的请求。继续引用上面的例子：还是新闻以网站为例，读者对新闻发表自己的评论应该通过POST实现，因为在评论提交后站点的资源已经不同了，或者说资源被修改了。"><a href="#2-根据HTTP规范，POST表示可能修改变服务器上的资源的请求。继续引用上面的例子：还是新闻以网站为例，读者对新闻发表自己的评论应该通过POST实现，因为在评论提交后站点的资源已经不同了，或者说资源被修改了。" class="headerlink" title="2.根据HTTP规范，POST表示可能修改变服务器上的资源的请求。继续引用上面的例子：还是新闻以网站为例，读者对新闻发表自己的评论应该通过POST实现，因为在评论提交后站点的资源已经不同了，或者说资源被修改了。"></a>2.根据HTTP规范，POST表示可能修改变服务器上的资源的请求。继续引用上面的例子：还是新闻以网站为例，读者对新闻发表自己的评论应该通过POST实现，因为在评论提交后站点的资源已经不同了，或者说资源被修改了。</h1><p>　　上面大概说了一下HTTP规范中GET和POST的一些原理性的问题。但在实际的做的时候，很多人却没有按照HTTP规范去做，导致这个问题的原因有很多，比如说：</p><p>1.很多人贪方便，更新资源时用了GET，因为用POST必须要到FORM（表单），这样会麻烦一点。</p><p>2.对资源的增，删，改，查操作，其实都可以通过GET/POST完成，不需要用到PUT和DELETE。</p><p>3.另外一个是，早期的Web MVC框架设计者们并没有有意识地将URL当作抽象的资源来看待和设计，所以导致一个比较严重的问题是传统的Web MVC框架基本上都只支持GET和POST两种HTTP方法，而不支持PUT和DELETE方法。</p><ul><li>简单解释一下MVC：MVC本来是存在于Desktop程序中的，M是指数据模型，V是指用户界面，C则是控制器。使用MVC的目的是将M和V的实现代码分离，从而使同一个程序可以使用不同的表现形式。</li></ul><p>　　以上3点典型地描述了老一套的风格（没有严格遵守HTTP规范），随着架构的发展，现在出现REST(Representational State Transfer)，一套支持HTTP规范的新风格，这里不多说了，可以参考《RESTful Web Services》。</p><h2 id="说完原理性的问题，我们再从表面现像上面看看GET和POST的区别："><a href="#说完原理性的问题，我们再从表面现像上面看看GET和POST的区别：" class="headerlink" title="说完原理性的问题，我们再从表面现像上面看看GET和POST的区别："></a>说完原理性的问题，我们再从表面现像上面看看GET和POST的区别：</h2><p>1.GET请求的数据会附在URL之后（就是把数据放置在HTTP协议头中），以?分割URL和传输数据，参数之间以&amp;相连，如：login.action?name=hyddd&amp;password=idontknow&amp;verify=%E4%BD%A0%E5%A5%BD。如果数据是英文字母/数字，原样发送，如果是空格，转换为+，如果是中文/其他字符，则直接把字符串用BASE64加密，得出如：%E4%BD%A0%E5%A5%BD，其中％XX中的XX为该符号以16进制表示的ASCII。</p><p>POST把提交的数据则放置在是HTTP包的包体中。</p><p>2.”GET方式提交的数据最多只能是1024字节，理论上POST没有限制，可传较大量的数据，IIS4中最大为80KB，IIS5中为100KB”？？！</p><p>　　以上这句是我从其他文章转过来的，其实这样说是错误的，不准确的：</p><p>(1).首先是”GET方式提交的数据最多只能是1024字节”，因为GET是通过URL提交数据，那么GET可提交的数据量就跟URL的长度有直接关系了。而实际上，URL不存在参数上限的问题，HTTP协议规范没有对URL长度进行限制。这个限制是特定的浏览器及服务器对它的限制。IE对URL长度的限制是2083字节(2K+35)。对于其他浏览器，如Netscape、FireFox等，理论上没有长度限制，其限制取决于操作系统的支持。</p><p>　　注意这是限制是整个URL长度，而不仅仅是你的参数值数据长度。[见参考资料5]</p><p>(2).理论上讲，POST是没有大小限制的，HTTP协议规范也没有进行大小限制，说“POST数据量存在80K/100K的大小限制”是不准确的，POST数据是没有限制的，起限制作用的是服务器的处理程序的处理能力。</p><p>　　对于ASP程序，Request对象处理每个表单域时存在100K的数据长度限制。但如果使用Request.BinaryRead则没有这个限制。</p><p>　　由这个延伸出去，对于IIS 6.0，微软出于安全考虑，加大了限制。我们还需要注意：</p><p>1).IIS 6.0默认ASP POST数据量最大为200KB，每个表单域限制是100KB。<br>2).IIS 6.0默认上传文件的最大大小是4MB。<br>3).IIS 6.0默认最大请求头是16KB。<br>IIS 6.0之前没有这些限制。[见参考资料5]</p><p>　　所以上面的80K，100K可能只是默认值而已(注：关于IIS4和IIS5的参数，我还没有确认)，但肯定是可以自己设置的。由于每个版本的IIS对这些参数的默认值都不一样，具体请参考相关的IIS配置文档。</p><p>3.在ASP中，服务端获取GET请求参数用Request.QueryString，获取POST请求参数用Request.Form。在JSP中，用request.getParameter(\”XXXX\”)来获取，虽然jsp中也有request.getQueryString()方法，但使用起来比较麻烦，比如：传一个test.jsp?name=hyddd&amp;password=hyddd，用request.getQueryString()得到的是：name=hyddd&amp;password=hyddd。在PHP中，可以用$_GET和$_POST分别获取GET和POST中的数据，而$_REQUEST则可以获取GET和POST两种请求中的数据。值得注意的是，JSP中使用request和PHP中使用$_REQUEST都会有隐患，这个下次再写个文章总结。</p><p>4.POST的安全性要比GET的安全性高。注意：这里所说的安全性和上面GET提到的“安全”不是同个概念。上面“安全”的含义仅仅是不作数据修改，而这里安全的含义是真正的Security的含义，比如：通过GET提交数据，用户名和密码将明文出现在URL上，因为(1)登录页面有可能被浏览器缓存，(2)其他人查看浏览器的历史纪录，那么别人就可以拿到你的账号和密码了，除此之外，使用GET提交数据还可能会造成Cross-site request forgery攻击。</p><p>　　总结一下，Get是向服务器发索取数据的一种请求，而Post是向服务器提交数据的一种请求，在FORM（表单）中，Method默认为”GET”，实质上，GET和POST只是发送机制不同，并不是一个取一个发！</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;先具体说下get和post区别&quot;&gt;&lt;a href=&quot;#先具体说下get和post区别&quot; class=&quot;headerlink&quot; title=&quot;先具体说下get和post区别&quot;&gt;&lt;/a&gt;先具体说下get和post区别&lt;/h1&gt;&lt;h1 id=&quot;GET和POST两种基本请
      
    
    </summary>
    
    
      <category term="http" scheme="http://yoursite.com/tags/http/"/>
    
  </entry>
  
  <entry>
    <title>正则表达式的使用</title>
    <link href="http://yoursite.com/2018/12/12/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
    <id>http://yoursite.com/2018/12/12/正则表达式的使用/</id>
    <published>2018-12-12T12:21:16.000Z</published>
    <updated>2019-02-18T03:04:23.849Z</updated>
    
    <content type="html"><![CDATA[<h1 id="正则表达式"><a href="#正则表达式" class="headerlink" title="正则表达式"></a>正则表达式</h1><p>正则表达式在爬虫中被广泛使用，正则和Xpath各有各的优点。虽然以前学习过正则表达式，但现在还总是迷迷糊糊的，今天有所顿悟。</p><h2 id="re-search-和re-match"><a href="#re-search-和re-match" class="headerlink" title="re.search()和re.match()"></a>re.search()和re.match()</h2><p>re.match决定RE是否在字符串刚开始的位置匹配。//注：这个方法并不是完全匹配。当pattern结束时若string还有剩余字符，仍然视为成功。想要完全匹配，可以在表达式末尾加上边界匹配符’$’</p><p>re.search函数会在字符串内查找模式匹配,只要找到第一个匹配然后返回，如果字符串没有匹配，则返回None。</p><p>match和search一旦匹配成功，就是一个match object对象，而match object对象有以下方法：</p><ul><li>group() 返回被RE匹配的字符串</li><li>start() 返回匹配开始的位置编号</li><li>end() 返回匹配结束的位置编号</li><li>span() 返回一个元组包含匹配（开始，结束）的位置编号</li><li>group() 返回re整体匹配的字符串，可以一次输入多个组号，对应组号匹配的字符串</li></ul><p>re.search()后使用group()不加参数表示返回被匹配的整体字符串，group()加上一个参数1表示取出匹配的第一组字符，可以输入多个组号。</p><p>eg.:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line">str1 = <span class="string">'&lt;h1&gt;hello world&lt;/h1&gt;你好世界&lt;/h1&gt;'</span></span><br><span class="line">x = re.search(<span class="string">'&lt;h1&gt;(.*?)&lt;/h1&gt;(.*?)&lt;/h1&gt;'</span>, str1).group(<span class="number">1</span>,<span class="number">2</span>)</span><br><span class="line">print(x)</span><br><span class="line">结果：(<span class="string">'hello world'</span>, <span class="string">'你好世界'</span>)</span><br></pre></td></tr></table></figure><h2 id="re-compile和re-findall"><a href="#re-compile和re-findall" class="headerlink" title="re.compile和re.findall"></a>re.compile和re.findall</h2><p>re.compile是对正则表达式进行预编译，返回一个对象的模式，主要作用是把常用的正则表达式编译成正则表达式对象，这样可以提高一点效率。</p><p>格式：<code>re.compile(pattern,flags=0)</code></p><p>pattern：编译时用的表达式字符串</p><p>flags：编译标志位，用于修改正则表达式的匹配方式，模式修正符。</p><p>常用的flags模式修正符有：</p><ul><li>re.S：使.匹配包括换行符在内的所有字符</li><li>re.I：使匹配不区分大小写</li><li>re.L：做本地化识别匹配</li><li>re.M：多行匹配，影响^和$</li><li>re.X：该标志通过给予更灵活的格式一遍将正则表达式写的更易于理解</li><li>re.U：根据Unicode字符集解析字符，这个标志影响\w,\W,\b,\B</li></ul><p>re.findall遍历匹配，可以获取字符串中所有匹配的字符串，返回一个列表。</p><p>格式：re.findall(pattern, string, flags=0)</p><p>pattern为表达式字符串，</p><p>strings为要匹配的字符串</p><p>flags为模式修正符</p><p>所以可以看到：</p><p>在findall中包含了compile，为了简洁，一般我都不适用compile。</p><h2 id="re-finditer"><a href="#re-finditer" class="headerlink" title="re.finditer"></a>re.finditer</h2><p>re.finditer() 搜索string，返回一个顺序访问每一个匹配结果（Match对象）的迭代器。找到 RE 匹配的所有子串，并把它们作为一个迭代器返回。</p><p>格式和findall()一样，返回的是一个迭代器，要使用for循环迭代取值，由于他返回的是一个Match对象，所以还要使用.group()函数来取出字符串。</p><h2 id="re-split"><a href="#re-split" class="headerlink" title="re.split"></a>re.split</h2><p>按照能够匹配的子串将string分割后返回列表。</p><p>可以使用re.split来分割字符串，如：re.split(r’\s+’, text)；将字符串按空格分割成一个单词列表。</p><p>格式：</p><p>re.split(pattern, string[, maxsplit])</p><p>maxsplit用于指定最大分割次数，不指定将全部分割。</p><p>eg.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">print(re.split(<span class="string">'\d+'</span>,<span class="string">'one1two2three3four4five5'</span>))</span><br><span class="line">执行结果如下：</span><br><span class="line">[<span class="string">'one'</span>, <span class="string">'two'</span>, <span class="string">'three'</span>, <span class="string">'four'</span>, <span class="string">'five'</span>, <span class="string">''</span>]</span><br></pre></td></tr></table></figure><h2 id="re-sup"><a href="#re-sup" class="headerlink" title="re.sup"></a>re.sup</h2><p>re.sup使用re替换string中每一个匹配的子串后返回替换后的字符串。</p><p>eg.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">re.sup(&apos;[\n ]&apos;, &apos;&apos;, str)</span><br></pre></td></tr></table></figure><p>上面这个例子会吧str中所有的换行符和空格去除。</p><h2 id="一些要注意的地方"><a href="#一些要注意的地方" class="headerlink" title="一些要注意的地方"></a>一些要注意的地方</h2><p><strong>re.match与re.search与re.findall的区别：</strong></p><p>re.match只匹配字符串的开始，如果字符串开始不符合正则表达式，则匹配失败，函数返回None；而re.search匹配整个字符串，直到找到一个匹配。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">a=re.search(<span class="string">'[\d]'</span>,<span class="string">"abc33"</span>).group()</span><br><span class="line">print(a)</span><br><span class="line">p=re.match(<span class="string">'[\d]'</span>,<span class="string">"abc33"</span>)</span><br><span class="line">print(p)</span><br><span class="line">b=re.findall(<span class="string">'[\d]'</span>,<span class="string">"abc33"</span>)</span><br><span class="line">print(b)</span><br><span class="line">执行结果：</span><br><span class="line"><span class="number">3</span></span><br><span class="line"><span class="keyword">None</span></span><br><span class="line">[<span class="string">'3'</span>, <span class="string">'3'</span>]</span><br></pre></td></tr></table></figure><p><strong>贪婪匹配与非贪婪匹配</strong></p><p><em>?,+?,??,{m,n}?    前面的</em>,+,?等都是贪婪匹配，也就是尽可能匹配，后面加?号使其变成惰性匹配</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br></pre></td><td class="code"><pre><span class="line">a = re.findall(<span class="string">r"a(\d+?)"</span>,<span class="string">'a23b'</span>)</span><br><span class="line">print(a)</span><br><span class="line">b = re.findall(<span class="string">r"a(\d+)"</span>,<span class="string">'a23b'</span>)</span><br><span class="line">print(b)</span><br><span class="line">执行结果：</span><br><span class="line">[<span class="string">'2'</span>]</span><br><span class="line">[<span class="string">'23'</span>]</span><br><span class="line"></span><br><span class="line">a = re.match(<span class="string">'&lt;(.*)&gt;'</span>,<span class="string">'&lt;H1&gt;title&lt;H1&gt;'</span>).group()</span><br><span class="line">print(a)</span><br><span class="line">b = re.match(<span class="string">'&lt;(.*?)&gt;'</span>,<span class="string">'&lt;H1&gt;title&lt;H1&gt;'</span>).group()</span><br><span class="line">print(b)</span><br><span class="line">执行结果：</span><br><span class="line">&lt;H1&gt;title&lt;H1&gt;</span><br><span class="line">&lt;H1&gt;</span><br><span class="line"></span><br><span class="line">a = re.findall(<span class="string">r"a(\d+)b"</span>,<span class="string">'a3333b'</span>)</span><br><span class="line">print(a)</span><br><span class="line">b = re.findall(<span class="string">r"a(\d+?)b"</span>,<span class="string">'a3333b'</span>)</span><br><span class="line">print(b)</span><br><span class="line">执行结果如下：</span><br><span class="line">[<span class="string">'3333'</span>]</span><br><span class="line">[<span class="string">'3333'</span>]</span><br><span class="line"><span class="comment">#######################</span></span><br><span class="line">这里需要注意的是如果前后均有限定条件的时候，就不存在什么贪婪模式了，非匹配模式失效。</span><br><span class="line"></span><br><span class="line"><span class="meta">@" 这两个字符都是匹配字符本身</span></span><br><span class="line">(.*?) 匹配任意长度的任意字符但是后面的?表示采用非贪婪模式也就是说在遇到/字符之前的位置上尽可能多的匹配而不是一直匹配到最后一个/字符</span><br><span class="line">([\w\d]) \w表示任意字母或数字 \d表示任意数字 所以这里的[\w\d]写的有些问题因为[]内的内容只匹配一个字符所以([\w\d])和(\w)的意义应该是一样的</span><br><span class="line"></span><br><span class="line"><span class="comment">###   正则表达式贪婪与非贪婪模式</span></span><br><span class="line"></span><br><span class="line">之前做程序的时候看到过正则表达式的贪婪与非贪婪模式，今天用的时候就想不起来了，现在这里总结一下，以备自己以后用到注意。</span><br><span class="line"></span><br><span class="line"><span class="number">1.</span>什么是正则表达式的贪婪与非贪婪匹配</span><br><span class="line"></span><br><span class="line">　　如：String str=<span class="string">"abcaxc"</span>;</span><br><span class="line"></span><br><span class="line">　　　　Patter p=<span class="string">"ab.*c"</span>;</span><br><span class="line"></span><br><span class="line">　　贪婪匹配:正则表达式一般趋向于最大长度匹配，也就是所谓的贪婪匹配。如上面使用模式p匹配字符串str，结果就是匹配到：abcaxc(ab.*c)。</span><br><span class="line"></span><br><span class="line">　　非贪婪匹配：就是匹配到结果就好，就少的匹配字符。如上面使用模式p匹配字符串str，结果就是匹配到：abc(ab.*c)。</span><br><span class="line"></span><br><span class="line"><span class="number">2.</span>编程中如何区分两种模式</span><br><span class="line"></span><br><span class="line">　　默认是贪婪模式；在量词后面直接加上一个问号？就是非贪婪模式。</span><br><span class="line"></span><br><span class="line">　　量词：&#123;m,n&#125;：m到n个</span><br><span class="line"></span><br><span class="line">　　　　　*：任意多个</span><br><span class="line"></span><br><span class="line">　　　　　+：一个到多个</span><br><span class="line"></span><br><span class="line">　　　　　？：<span class="number">0</span>或一个</span><br><span class="line"></span><br><span class="line"><span class="number">3.</span>程序实例</span><br><span class="line"></span><br><span class="line">使用Snort的规则一条规则的一部分作为匹配文本，匹配出其中的content部分。</span><br><span class="line"></span><br><span class="line">复制代码</span><br><span class="line"> <span class="number">1</span> <span class="keyword">import</span> java.util.regex.Matcher;</span><br><span class="line"> <span class="number">2</span> <span class="keyword">import</span> java.util.regex.Pattern;</span><br><span class="line"> <span class="number">3</span> </span><br><span class="line"> 4 public class RegularTest &#123;</span><br><span class="line"> <span class="number">5</span>     </span><br><span class="line"> <span class="number">6</span>     public static void main(String[] arg)&#123;</span><br><span class="line"> <span class="number">7</span>         String text=<span class="string">"(content:\"rcpt to root\";pcre:\"word\";)"</span>;</span><br><span class="line"> <span class="number">8</span>         String rule1=<span class="string">"content:\".+\""</span>;    //贪婪模式</span><br><span class="line"> <span class="number">9</span>         String rule2=<span class="string">"content:\".+?\""</span>;    //非贪婪模式</span><br><span class="line"><span class="number">10</span>         </span><br><span class="line"><span class="number">11</span>         System.out.println(<span class="string">"文本："</span>+text);</span><br><span class="line"><span class="number">12</span>         System.out.println(<span class="string">"贪婪模式："</span>+rule1);</span><br><span class="line"><span class="number">13</span>         Pattern p1 =Pattern.compile(rule1);</span><br><span class="line"><span class="number">14</span>         Matcher m1 = p1.matcher(text);</span><br><span class="line"><span class="number">15</span>         <span class="keyword">while</span>(m1.find())&#123;</span><br><span class="line"><span class="number">16</span>             System.out.println(<span class="string">"匹配结果："</span>+m1.group(<span class="number">0</span>));</span><br><span class="line"><span class="number">17</span>         &#125;</span><br><span class="line"><span class="number">18</span>         </span><br><span class="line"><span class="number">19</span>         System.out.println(<span class="string">"非贪婪模式："</span>+rule2);</span><br><span class="line"><span class="number">20</span>         Pattern p2 =Pattern.compile(rule2);</span><br><span class="line"><span class="number">21</span>         Matcher m2 = p2.matcher(text);</span><br><span class="line"><span class="number">22</span>         <span class="keyword">while</span>(m2.find())&#123;</span><br><span class="line"><span class="number">23</span>             System.out.println(<span class="string">"匹配结果："</span>+m2.group(<span class="number">0</span>));</span><br><span class="line"><span class="number">24</span>         &#125;</span><br><span class="line"><span class="number">25</span>     &#125;</span><br><span class="line"><span class="number">26</span> &#125;</span><br><span class="line">复制代码</span><br><span class="line">执行结果：</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;正则表达式&quot;&gt;&lt;a href=&quot;#正则表达式&quot; class=&quot;headerlink&quot; title=&quot;正则表达式&quot;&gt;&lt;/a&gt;正则表达式&lt;/h1&gt;&lt;p&gt;正则表达式在爬虫中被广泛使用，正则和Xpath各有各的优点。虽然以前学习过正则表达式，但现在还总是迷迷糊糊的，今天有
      
    
    </summary>
    
      <category term="爬虫" scheme="http://yoursite.com/categories/%E7%88%AC%E8%99%AB/"/>
    
    
      <category term="爬虫" scheme="http://yoursite.com/tags/%E7%88%AC%E8%99%AB/"/>
    
  </entry>
  
</feed>
