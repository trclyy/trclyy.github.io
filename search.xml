<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[正则表达式的使用]]></title>
    <url>%2F2018%2F12%2F12%2F%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%E7%9A%84%E4%BD%BF%E7%94%A8%2F</url>
    <content type="text"><![CDATA[正则表达式正则表达式在爬虫中被广泛使用，正则和Xpath各有各的优点。虽然以前学习过正则表达式，但现在还总是迷迷糊糊的，今天有所顿悟。 re.search()和re.match()re.match决定RE是否在字符串刚开始的位置匹配。//注：这个方法并不是完全匹配。当pattern结束时若string还有剩余字符，仍然视为成功。想要完全匹配，可以在表达式末尾加上边界匹配符’$’ re.search函数会在字符串内查找模式匹配,只要找到第一个匹配然后返回，如果字符串没有匹配，则返回None。 match和search一旦匹配成功，就是一个match object对象，而match object对象有以下方法： group() 返回被RE匹配的字符串 start() 返回匹配开始的位置编号 end() 返回匹配结束的位置编号 span() 返回一个元组包含匹配（开始，结束）的位置编号 group() 返回re整体匹配的字符串，可以一次输入多个组号，对应组号匹配的字符串 re.search()后使用group()不加参数表示返回被匹配的整体字符串，group()加上一个参数1表示取出匹配的第一组字符，可以输入多个组号。 eg.: 12345import restr1 = '&lt;h1&gt;hello world&lt;/h1&gt;你好世界&lt;/h1&gt;'x = re.search('&lt;h1&gt;(.*?)&lt;/h1&gt;(.*?)&lt;/h1&gt;', str1).group(1,2)print(x)结果：('hello world', '你好世界') re.compile和re.findallre.compile是对正则表达式进行预编译，返回一个对象的模式，主要作用是把常用的正则表达式编译成正则表达式对象，这样可以提高一点效率。 格式：re.compile(pattern,flags=0) pattern：编译时用的表达式字符串 flags：编译标志位，用于修改正则表达式的匹配方式，模式修正符。 常用的flags模式修正符有： re.S：使.匹配包括换行符在内的所有字符 re.I：使匹配不区分大小写 re.L：做本地化识别匹配 re.M：多行匹配，影响^和$ re.X：该标志通过给予更灵活的格式一遍将正则表达式写的更易于理解 re.U：根据Unicode字符集解析字符，这个标志影响\w,\W,\b,\B re.findall遍历匹配，可以获取字符串中所有匹配的字符串，返回一个列表。 格式：re.findall(pattern, string, flags=0) pattern为表达式字符串， strings为要匹配的字符串 flags为模式修正符 所以可以看到： 在findall中包含了compile，为了简洁，一般我都不适用compile。 re.finditerre.finditer() 搜索string，返回一个顺序访问每一个匹配结果（Match对象）的迭代器。找到 RE 匹配的所有子串，并把它们作为一个迭代器返回。 格式和findall()一样，返回的是一个迭代器，要使用for循环迭代取值，由于他返回的是一个Match对象，所以还要使用.group()函数来取出字符串。 re.split按照能够匹配的子串将string分割后返回列表。 可以使用re.split来分割字符串，如：re.split(r’\s+’, text)；将字符串按空格分割成一个单词列表。 格式： re.split(pattern, string[, maxsplit]) maxsplit用于指定最大分割次数，不指定将全部分割。 eg. 123print(re.split('\d+','one1two2three3four4five5'))执行结果如下：['one', 'two', 'three', 'four', 'five', ''] re.supre.sup使用re替换string中每一个匹配的子串后返回替换后的字符串。 eg. 1re.sup(&apos;[\n ]&apos;, &apos;&apos;, str) 上面这个例子会吧str中所有的换行符和空格去除。 一些要注意的地方re.match与re.search与re.findall的区别： re.match只匹配字符串的开始，如果字符串开始不符合正则表达式，则匹配失败，函数返回None；而re.search匹配整个字符串，直到找到一个匹配。 12345678910a=re.search('[\d]',"abc33").group()print(a)p=re.match('[\d]',"abc33")print(p)b=re.findall('[\d]',"abc33")print(b)执行结果：3None['3', '3'] 贪婪匹配与非贪婪匹配 ?,+?,??,{m,n}? 前面的,+,?等都是贪婪匹配，也就是尽可能匹配，后面加?号使其变成惰性匹配 12345678910111213141516171819202122232425a = re.findall(r"a(\d+?)",'a23b')print(a)b = re.findall(r"a(\d+)",'a23b')print(b)执行结果：['2']['23']a = re.match('&lt;(.*)&gt;','&lt;H1&gt;title&lt;H1&gt;').group()print(a)b = re.match('&lt;(.*?)&gt;','&lt;H1&gt;title&lt;H1&gt;').group()print(b)执行结果：&lt;H1&gt;title&lt;H1&gt;&lt;H1&gt;a = re.findall(r"a(\d+)b",'a3333b')print(a)b = re.findall(r"a(\d+?)b",'a3333b')print(b)执行结果如下：['3333']['3333']#######################这里需要注意的是如果前后均有限定条件的时候，就不存在什么贪婪模式了，非匹配模式失效。 本篇博客借鉴CNBLOGS]]></content>
      <categories>
        <category>爬虫</category>
      </categories>
      <tags>
        <tag>爬虫</tag>
      </tags>
  </entry>
</search>
